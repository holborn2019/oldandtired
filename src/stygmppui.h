// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef stygmppui_h
#define stygmppui_h
#include <FL/Fl.H>
#include "stygmorgan.h"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Box.H>

class rmgmpp {
public:
  rmgmpp(RMGMO *rmgmo_);
private:
  RMGMO *rmgmo; 
public:
  Fl_Double_Window* make_window();
  Fl_Double_Window *rmgmppwin;
private:
  inline void cb_rmgmppwin_i(Fl_Double_Window*, void*);
  static void cb_rmgmppwin(Fl_Double_Window*, void*);
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
  inline void cb_Ok_i(Fl_Button*, void*);
  static void cb_Ok(Fl_Button*, void*);
public:
  Fl_Choice *PatChoice;
private:
  inline void cb_PatChoice_i(Fl_Choice*, void*);
  static void cb_PatChoice(Fl_Choice*, void*);
public:
  Fl_Counter *DChannel;
private:
  inline void cb_DChannel_i(Fl_Counter*, void*);
  static void cb_DChannel(Fl_Counter*, void*);
public:
  Fl_Counter *ChordRoot;
private:
  inline void cb_ChordRoot_i(Fl_Counter*, void*);
  static void cb_ChordRoot(Fl_Counter*, void*);
public:
  Fl_Counter *ChordType;
private:
  inline void cb_ChordType_i(Fl_Counter*, void*);
  static void cb_ChordType(Fl_Counter*, void*);
public:
  Fl_Box *DChordRoot;
  Fl_Box *DChordType;
  Fl_Counter *NTT;
private:
  inline void cb_NTT_i(Fl_Counter*, void*);
  static void cb_NTT(Fl_Counter*, void*);
public:
  Fl_Counter *RTR;
private:
  inline void cb_RTR_i(Fl_Counter*, void*);
  static void cb_RTR(Fl_Counter*, void*);
public:
  void ASeCh(int tr);
  void calcula();
};
#endif
