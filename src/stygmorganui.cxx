// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include <libintl.h>
#include "stygmorganui.h"
//Copyright(c) 2006 Josep Andreu (holborn)
//License GNU/GPL version 2
#include <stygmicon128.xpm>

void stygmorgan::cb_rmgmorganwin_i(Fl_Double_Window* o, void*) {
  GuardaPref();
Pexitprogram=1;
o->hide();
}
void stygmorgan::cb_rmgmorganwin(Fl_Double_Window* o, void* v) {
  ((stygmorgan*)(o->user_data()))->cb_rmgmorganwin_i(o,v);
}

void stygmorgan::cb_Pan0_i(Fl_Dial* o, void*) {
  int nc=0;
rmgmo->CM[nc].pan=(int)o->value();
rmgmo->enviocontrol(nc,10,(int)o->value());
poninfo(7,3,(int)o->value());
}
void stygmorgan::cb_Pan0(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Pan0_i(o,v);
}

void stygmorgan::cb_Reverb0_i(Fl_Dial* o, void*) {
  int nc=0;
rmgmo->CM[nc].reverb=(int)o->value();
rmgmo->enviocontrol(nc,91,(int)o->value());
poninfo(7,2,(int)o->value());
}
void stygmorgan::cb_Reverb0(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Reverb0_i(o,v);
}

void stygmorgan::cb_Chorus0_i(Fl_Dial* o, void*) {
  int nc=0;
rmgmo->CM[nc].chorus=(int)o->value();
rmgmo->enviocontrol(nc,93,(int)o->value());
poninfo(7,1,(int)o->value());
}
void stygmorgan::cb_Chorus0(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Chorus0_i(o,v);
}

void stygmorgan::cb_Vol0_i(Fl_Slider* o, void*) {
  int nc=0;
rmgmo->CM[nc].vol=(int)o->value();
rmgmo->ActuVarVol(nc,nc);
poninfo(7,0,(int)o->value());
}
void stygmorgan::cb_Vol0(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Vol0_i(o,v);
}

void stygmorgan::cb_On0_i(Fl_Button* o, void*) {
  int nc=0;
rmgmo->CM[nc].OnOff=o->value();
if (!rmgmo->CM[nc].OnOff) DP0->color((Fl_Color)0);
else
DP0->color((Fl_Color)230);
DP0->redraw();
}
void stygmorgan::cb_On0(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_On0_i(o,v);
}

void stygmorgan::cb_Solo0_i(Fl_Button* o, void*) {
  int nc=0;
rmgmo->CM[nc].solo=o->value();
if ((int)o->value()) PonSolo(nc); else QuitaSolo();
}
void stygmorgan::cb_Solo0(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Solo0_i(o,v);
}

void stygmorgan::cb_More0_i(Fl_Button* o, void*) {
  int nc=0;
if (rmgmo->wmore) o->value(0); else
MoreParams(nc);
}
void stygmorgan::cb_More0(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_More0_i(o,v);
}

void stygmorgan::cb_P0_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
int nc=0;
rmgmo->CM[nc].program=(int)o->value();
rmgmo->envioprograma(nc,rmgmo->CM[nc].program);
DP0->label(rmgmo->PresetList[rmgmo->CalculaBanco(nc)].PBanco[rmgmo->CM[nc].program].ProgName);
}
void stygmorgan::cb_P0(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_P0_i(o,v);
}

void stygmorgan::cb_Pan1_i(Fl_Dial* o, void*) {
  int nc=1;
rmgmo->CM[nc].pan=(int)o->value();
rmgmo->enviocontrol(nc,10,(int)o->value());
poninfo(8,3,(int)o->value());
}
void stygmorgan::cb_Pan1(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Pan1_i(o,v);
}

void stygmorgan::cb_Reverb1_i(Fl_Dial* o, void*) {
  int nc=1;
rmgmo->CM[nc].reverb=(int)o->value();
rmgmo->enviocontrol(nc,91,(int)o->value());
poninfo(8,2,(int)o->value());
}
void stygmorgan::cb_Reverb1(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Reverb1_i(o,v);
}

void stygmorgan::cb_Chorus1_i(Fl_Dial* o, void*) {
  int nc=1;
rmgmo->CM[nc].chorus=(int)o->value();
rmgmo->enviocontrol(nc,93,(int)o->value());
poninfo(8,1,(int)o->value());
}
void stygmorgan::cb_Chorus1(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Chorus1_i(o,v);
}

void stygmorgan::cb_Vol1_i(Fl_Slider* o, void*) {
  int nc=1;
rmgmo->CM[nc].vol=(int)o->value();
rmgmo->ActuVarVol(nc,nc);
poninfo(8,0,(int)o->value());
}
void stygmorgan::cb_Vol1(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Vol1_i(o,v);
}

void stygmorgan::cb_On1_i(Fl_Button* o, void*) {
  int nc=1;
rmgmo->CM[nc].OnOff=o->value();
if (!rmgmo->CM[nc].OnOff) DP1->color((Fl_Color)0);
else
DP1->color((Fl_Color)230);
DP1->redraw();
}
void stygmorgan::cb_On1(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_On1_i(o,v);
}

void stygmorgan::cb_Solo1_i(Fl_Button* o, void*) {
  int nc=1;
rmgmo->CM[nc].solo=o->value();
if ((int)o->value()) PonSolo(nc); else QuitaSolo();
}
void stygmorgan::cb_Solo1(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Solo1_i(o,v);
}

void stygmorgan::cb_More1_i(Fl_Button* o, void*) {
  int nc=1;
if (rmgmo->wmore) o->value(0); else
MoreParams(nc);
}
void stygmorgan::cb_More1(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_More1_i(o,v);
}

void stygmorgan::cb_P1_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
int nc=1;
rmgmo->CM[nc].program=(int)o->value();
rmgmo->envioprograma(nc,rmgmo->CM[nc].program);
DP1->label(rmgmo->PresetList[rmgmo->CalculaBanco(nc)].PBanco[rmgmo->CM[nc].program].ProgName);
}
void stygmorgan::cb_P1(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_P1_i(o,v);
}

void stygmorgan::cb_Pan2_i(Fl_Dial* o, void*) {
  int nc=2;
rmgmo->CM[nc].pan=(int)o->value();
rmgmo->enviocontrol(nc,10,(int)o->value());
poninfo(9,3,(int)o->value());
}
void stygmorgan::cb_Pan2(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Pan2_i(o,v);
}

void stygmorgan::cb_Reverb2_i(Fl_Dial* o, void*) {
  int nc=2;
rmgmo->CM[nc].reverb=(int)o->value();
rmgmo->enviocontrol(nc,91,(int)o->value());
poninfo(9,2,(int)o->value());
}
void stygmorgan::cb_Reverb2(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Reverb2_i(o,v);
}

void stygmorgan::cb_Chorus2_i(Fl_Dial* o, void*) {
  int nc=2;
rmgmo->CM[nc].chorus=(int)o->value();
rmgmo->enviocontrol(nc,93,(int)o->value());
poninfo(9,1,(int)o->value());
}
void stygmorgan::cb_Chorus2(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Chorus2_i(o,v);
}

void stygmorgan::cb_Vol2_i(Fl_Slider* o, void*) {
  int nc=2;
rmgmo->CM[nc].vol=(int)o->value();
rmgmo->ActuVarVol(nc,nc);
poninfo(9,0,(int)o->value());
}
void stygmorgan::cb_Vol2(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Vol2_i(o,v);
}

void stygmorgan::cb_On2_i(Fl_Button* o, void*) {
  int nc=2;
rmgmo->CM[nc].OnOff=o->value();
if (!rmgmo->CM[nc].OnOff) DP2->color((Fl_Color)0);
else
DP2->color((Fl_Color)230);
DP2->redraw();
}
void stygmorgan::cb_On2(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_On2_i(o,v);
}

void stygmorgan::cb_Solo2_i(Fl_Button* o, void*) {
  int nc=2;
rmgmo->CM[nc].solo=o->value();
if ((int)o->value()) PonSolo(nc); else QuitaSolo();
}
void stygmorgan::cb_Solo2(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Solo2_i(o,v);
}

void stygmorgan::cb_More2_i(Fl_Button* o, void*) {
  int nc=2;
if (rmgmo->wmore) o->value(0); else
MoreParams(nc);
}
void stygmorgan::cb_More2(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_More2_i(o,v);
}

void stygmorgan::cb_P2_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
int nc=2;
rmgmo->CM[nc].program=(int)o->value();
rmgmo->envioprograma(nc,rmgmo->CM[nc].program);
DP2->label(rmgmo->PresetList[rmgmo->CalculaBanco(nc)].PBanco[rmgmo->CM[nc].program].ProgName);
}
void stygmorgan::cb_P2(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_P2_i(o,v);
}

void stygmorgan::cb_Pan3_i(Fl_Dial* o, void*) {
  int nc=3;
rmgmo->CM[nc].pan=(int)o->value();
rmgmo->enviocontrol(nc,10,(int)o->value());
poninfo(10,3,(int)o->value());
}
void stygmorgan::cb_Pan3(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Pan3_i(o,v);
}

void stygmorgan::cb_Reverb3_i(Fl_Dial* o, void*) {
  int nc=3;
rmgmo->CM[nc].reverb=(int)o->value();
rmgmo->enviocontrol(nc,91,(int)o->value());
poninfo(10,2,(int)o->value());
}
void stygmorgan::cb_Reverb3(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Reverb3_i(o,v);
}

void stygmorgan::cb_Chorus3_i(Fl_Dial* o, void*) {
  int nc=3;
rmgmo->CM[nc].chorus=(int)o->value();
rmgmo->enviocontrol(nc,93,(int)o->value());
poninfo(10,1,(int)o->value());
}
void stygmorgan::cb_Chorus3(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Chorus3_i(o,v);
}

void stygmorgan::cb_Vol3_i(Fl_Slider* o, void*) {
  int nc=3;
rmgmo->CM[nc].vol=(int)o->value();
rmgmo->ActuVarVol(nc,nc);
poninfo(10,0,(int)o->value());
}
void stygmorgan::cb_Vol3(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Vol3_i(o,v);
}

void stygmorgan::cb_On3_i(Fl_Button* o, void*) {
  int nc=3;
rmgmo->CM[nc].OnOff=o->value();
if (!rmgmo->CM[nc].OnOff) DP3->color((Fl_Color)0);
else
DP3->color((Fl_Color)230);
DP3->redraw();
}
void stygmorgan::cb_On3(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_On3_i(o,v);
}

void stygmorgan::cb_Solo3_i(Fl_Button* o, void*) {
  int nc=3;
rmgmo->CM[nc].solo=o->value();
if ((int)o->value()) PonSolo(nc); else QuitaSolo();
}
void stygmorgan::cb_Solo3(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Solo3_i(o,v);
}

void stygmorgan::cb_More3_i(Fl_Button* o, void*) {
  int nc=3;
if (rmgmo->wmore) o->value(0); else
MoreParams(nc);
}
void stygmorgan::cb_More3(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_More3_i(o,v);
}

void stygmorgan::cb_P3_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
int nc=3;
rmgmo->CM[nc].program=(int)o->value();
rmgmo->envioprograma(nc,rmgmo->CM[nc].program);
DP3->label(rmgmo->PresetList[rmgmo->CalculaBanco(nc)].PBanco[rmgmo->CM[nc].program].ProgName);
}
void stygmorgan::cb_P3(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_P3_i(o,v);
}

void stygmorgan::cb_Pan4_i(Fl_Dial* o, void*) {
  int nc=4;
rmgmo->CM[nc].pan=(int)o->value();
rmgmo->enviocontrol(nc,10,(int)o->value());
poninfo(11,3,(int)o->value());
}
void stygmorgan::cb_Pan4(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Pan4_i(o,v);
}

void stygmorgan::cb_Reverb4_i(Fl_Dial* o, void*) {
  int nc=4;
rmgmo->CM[nc].reverb=(int)o->value();
rmgmo->enviocontrol(nc,91,(int)o->value());
poninfo(11,2,(int)o->value());
}
void stygmorgan::cb_Reverb4(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Reverb4_i(o,v);
}

void stygmorgan::cb_Chorus4_i(Fl_Dial* o, void*) {
  int nc=4;
rmgmo->CM[nc].chorus=(int)o->value();
rmgmo->enviocontrol(nc,93,(int)o->value());
poninfo(11,1,(int)o->value());
}
void stygmorgan::cb_Chorus4(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Chorus4_i(o,v);
}

void stygmorgan::cb_Vol4_i(Fl_Slider* o, void*) {
  int nc=4;
rmgmo->CM[nc].vol=(int)o->value();
rmgmo->ActuVarVol(nc,nc);
poninfo(11,0,(int)o->value());
}
void stygmorgan::cb_Vol4(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Vol4_i(o,v);
}

void stygmorgan::cb_On4_i(Fl_Button* o, void*) {
  int nc=4;
rmgmo->CM[nc].OnOff=o->value();
if (!rmgmo->CM[nc].OnOff) DP4->color((Fl_Color)0);
else
DP4->color((Fl_Color)230);
DP4->redraw();
}
void stygmorgan::cb_On4(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_On4_i(o,v);
}

void stygmorgan::cb_Solo4_i(Fl_Button* o, void*) {
  int nc=4;
rmgmo->CM[nc].solo=o->value();
if ((int)o->value()) PonSolo(nc); else QuitaSolo();
}
void stygmorgan::cb_Solo4(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Solo4_i(o,v);
}

void stygmorgan::cb_More4_i(Fl_Button* o, void*) {
  int nc=4;
if (rmgmo->wmore) o->value(0); else
MoreParams(nc);
}
void stygmorgan::cb_More4(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_More4_i(o,v);
}

void stygmorgan::cb_P4_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
int nc=4;
rmgmo->CM[nc].program=(int)o->value();
rmgmo->envioprograma(nc,rmgmo->CM[nc].program);
DP4->label(rmgmo->PresetList[rmgmo->CalculaBanco(nc)].PBanco[rmgmo->CM[nc].program].ProgName);
}
void stygmorgan::cb_P4(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_P4_i(o,v);
}

void stygmorgan::cb_Pan9_i(Fl_Dial* o, void*) {
  int nc=9;
rmgmo->CM[nc].pan=(int)o->value();
rmgmo->enviocontrol(nc,10,(int)o->value());
poninfo(0,3,(int)o->value());
}
void stygmorgan::cb_Pan9(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Pan9_i(o,v);
}

void stygmorgan::cb_Reverb9_i(Fl_Dial* o, void*) {
  int nc=9;
rmgmo->CM[nc].reverb=(int)o->value();
rmgmo->enviocontrol(nc,91,(int)o->value());
poninfo(0,2,(int)o->value());
}
void stygmorgan::cb_Reverb9(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Reverb9_i(o,v);
}

void stygmorgan::cb_Chorus9_i(Fl_Dial* o, void*) {
  int nc=9;
rmgmo->CM[nc].chorus=(int)o->value();
rmgmo->enviocontrol(nc,93,(int)o->value());
poninfo(0,1,(int)o->value());
}
void stygmorgan::cb_Chorus9(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Chorus9_i(o,v);
}

void stygmorgan::cb_Vol9_i(Fl_Slider* o, void*) {
  int nc=9;
rmgmo->CM[nc].vol=(int)o->value();
rmgmo->ActuVarVol(nc,nc);
poninfo(0,0,(int)o->value());
}
void stygmorgan::cb_Vol9(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Vol9_i(o,v);
}

void stygmorgan::cb_On9_i(Fl_Button* o, void*) {
  int nc=9;
rmgmo->CM[nc].OnOff=o->value();
if (!rmgmo->CM[nc].OnOff) DP9->color((Fl_Color)0);
else
DP9->color((Fl_Color)230);
DP9->redraw();
}
void stygmorgan::cb_On9(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_On9_i(o,v);
}

void stygmorgan::cb_Solo9_i(Fl_Button* o, void*) {
  int nc=9;
rmgmo->CM[nc].solo=o->value();
if ((int)o->value()) PonSolo(nc); else QuitaSolo();
}
void stygmorgan::cb_Solo9(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Solo9_i(o,v);
}

void stygmorgan::cb_More9_i(Fl_Button* o, void*) {
  int nc=9;
if (rmgmo->wmore) o->value(0); else
MoreParams(nc);
}
void stygmorgan::cb_More9(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_More9_i(o,v);
}

void stygmorgan::cb_P9_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
int nc=9;
rmgmo->CM[nc].program=(int)o->value();
rmgmo->envioprograma(nc,rmgmo->CM[nc].program);
DP9->label(rmgmo->PresetList[rmgmo->CalculaBanco(nc)].PBanco[rmgmo->CM[nc].program].ProgName);
}
void stygmorgan::cb_P9(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_P9_i(o,v);
}

void stygmorgan::cb_Pan10_i(Fl_Dial* o, void*) {
  int nc=10;
rmgmo->CM[nc].pan=(int)o->value();
rmgmo->enviocontrol(nc,10,(int)o->value());
poninfo(1,3,(int)o->value());
}
void stygmorgan::cb_Pan10(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Pan10_i(o,v);
}

void stygmorgan::cb_Reverb10_i(Fl_Dial* o, void*) {
  int nc=10;
rmgmo->CM[nc].reverb=(int)o->value();
rmgmo->enviocontrol(nc,91,(int)o->value());
poninfo(1,2,(int)o->value());
}
void stygmorgan::cb_Reverb10(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Reverb10_i(o,v);
}

void stygmorgan::cb_Chorus10_i(Fl_Dial* o, void*) {
  int nc=10;
rmgmo->CM[nc].chorus=(int)o->value();
rmgmo->enviocontrol(nc,93,(int)o->value());
poninfo(1,1,(int)o->value());
}
void stygmorgan::cb_Chorus10(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Chorus10_i(o,v);
}

void stygmorgan::cb_Vol10_i(Fl_Slider* o, void*) {
  int nc=10;
rmgmo->CM[nc].vol=(int)o->value();
rmgmo->ActuVarVol(nc,nc);
poninfo(1,0,(int)o->value());
}
void stygmorgan::cb_Vol10(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Vol10_i(o,v);
}

void stygmorgan::cb_On10_i(Fl_Button* o, void*) {
  int nc=10;
rmgmo->CM[nc].OnOff=o->value();
if (!rmgmo->CM[nc].OnOff) DP10->color((Fl_Color)0);
else
DP10->color((Fl_Color)230);
DP10->redraw();
}
void stygmorgan::cb_On10(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_On10_i(o,v);
}

void stygmorgan::cb_Solo10_i(Fl_Button* o, void*) {
  int nc=10;
rmgmo->CM[nc].solo=o->value();
if ((int)o->value()) PonSolo(nc); else QuitaSolo();
}
void stygmorgan::cb_Solo10(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Solo10_i(o,v);
}

void stygmorgan::cb_More10_i(Fl_Button* o, void*) {
  int nc=10;
if (rmgmo->wmore) o->value(0); else
MoreParams(nc);
}
void stygmorgan::cb_More10(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_More10_i(o,v);
}

void stygmorgan::cb_P10_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
int nc=10;
rmgmo->CM[nc].program=(int)o->value();
rmgmo->envioprograma(nc,rmgmo->CM[nc].program);
DP10->label(rmgmo->PresetList[rmgmo->CalculaBanco(nc)].PBanco[rmgmo->CM[nc].program].ProgName);
}
void stygmorgan::cb_P10(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_P10_i(o,v);
}

void stygmorgan::cb_Pan11_i(Fl_Dial* o, void*) {
  int nc=11;
rmgmo->CM[nc].pan=(int)o->value();
rmgmo->enviocontrol(nc,10,(int)o->value());
poninfo(2,3,(int)o->value());
}
void stygmorgan::cb_Pan11(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Pan11_i(o,v);
}

void stygmorgan::cb_Reverb11_i(Fl_Dial* o, void*) {
  int nc=11;
rmgmo->CM[nc].reverb=(int)o->value();
rmgmo->enviocontrol(nc,91,(int)o->value());
poninfo(2,2,(int)o->value());
}
void stygmorgan::cb_Reverb11(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Reverb11_i(o,v);
}

void stygmorgan::cb_Chorus11_i(Fl_Dial* o, void*) {
  int nc=11;
rmgmo->CM[nc].chorus=(int)o->value();
rmgmo->enviocontrol(nc,93,(int)o->value());
poninfo(2,1,(int)o->value());
}
void stygmorgan::cb_Chorus11(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Chorus11_i(o,v);
}

void stygmorgan::cb_Vol11_i(Fl_Slider* o, void*) {
  int nc=11;
rmgmo->CM[nc].vol=(int)o->value();
rmgmo->ActuVarVol(nc,nc);
poninfo(2,0,(int)o->value());
}
void stygmorgan::cb_Vol11(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Vol11_i(o,v);
}

void stygmorgan::cb_On11_i(Fl_Button* o, void*) {
  int nc=11;
rmgmo->CM[nc].OnOff=o->value();
if (!rmgmo->CM[nc].OnOff) DP11->color((Fl_Color)0);
else
DP11->color((Fl_Color)230);
DP11->redraw();
}
void stygmorgan::cb_On11(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_On11_i(o,v);
}

void stygmorgan::cb_Solo11_i(Fl_Button* o, void*) {
  int nc=11;
rmgmo->CM[nc].solo=o->value();
if ((int)o->value()) PonSolo(nc); else QuitaSolo();
}
void stygmorgan::cb_Solo11(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Solo11_i(o,v);
}

void stygmorgan::cb_More11_i(Fl_Button* o, void*) {
  int nc=11;
if (rmgmo->wmore) o->value(0); else
MoreParams(nc);
}
void stygmorgan::cb_More11(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_More11_i(o,v);
}

void stygmorgan::cb_P11_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
int nc=11;
rmgmo->CM[nc].program=(int)o->value();
rmgmo->envioprograma(nc,rmgmo->CM[nc].program);
DP11->label(rmgmo->PresetList[rmgmo->CalculaBanco(nc)].PBanco[rmgmo->CM[nc].program].ProgName);
}
void stygmorgan::cb_P11(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_P11_i(o,v);
}

void stygmorgan::cb_Pan12_i(Fl_Dial* o, void*) {
  int nc=12;
rmgmo->CM[nc].pan=(int)o->value();
rmgmo->enviocontrol(nc,10,(int)o->value());
poninfo(3,3,(int)o->value());
}
void stygmorgan::cb_Pan12(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Pan12_i(o,v);
}

void stygmorgan::cb_Reverb12_i(Fl_Dial* o, void*) {
  int nc=12;
rmgmo->CM[nc].reverb=(int)o->value();
rmgmo->enviocontrol(nc,91,(int)o->value());
poninfo(3,2,(int)o->value());
}
void stygmorgan::cb_Reverb12(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Reverb12_i(o,v);
}

void stygmorgan::cb_Chorus12_i(Fl_Dial* o, void*) {
  int nc=12;
rmgmo->CM[nc].chorus=(int)o->value();
rmgmo->enviocontrol(nc,93,(int)o->value());
poninfo(3,1,(int)o->value());
}
void stygmorgan::cb_Chorus12(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Chorus12_i(o,v);
}

void stygmorgan::cb_Vol12_i(Fl_Slider* o, void*) {
  int nc=12;
rmgmo->CM[nc].vol=(int)o->value();
rmgmo->ActuVarVol(nc,nc);
poninfo(3,0,(int)o->value());
}
void stygmorgan::cb_Vol12(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Vol12_i(o,v);
}

void stygmorgan::cb_On12_i(Fl_Button* o, void*) {
  int nc=12;
rmgmo->CM[nc].OnOff=o->value();
if (!rmgmo->CM[nc].OnOff) DP12->color((Fl_Color)0);
else
DP12->color((Fl_Color)230);
DP12->redraw();
}
void stygmorgan::cb_On12(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_On12_i(o,v);
}

void stygmorgan::cb_Solo12_i(Fl_Button* o, void*) {
  int nc=12;
rmgmo->CM[nc].solo=o->value();
if ((int)o->value()) PonSolo(nc); else QuitaSolo();
}
void stygmorgan::cb_Solo12(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Solo12_i(o,v);
}

void stygmorgan::cb_More12_i(Fl_Button* o, void*) {
  int nc=12;
if (rmgmo->wmore) o->value(0); else
MoreParams(nc);
}
void stygmorgan::cb_More12(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_More12_i(o,v);
}

void stygmorgan::cb_P12_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
int nc=12;
rmgmo->CM[nc].program=(int)o->value();
rmgmo->envioprograma(nc,rmgmo->CM[nc].program);
DP12->label(rmgmo->PresetList[rmgmo->CalculaBanco(nc)].PBanco[rmgmo->CM[nc].program].ProgName);
}
void stygmorgan::cb_P12(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_P12_i(o,v);
}

void stygmorgan::cb_Pan13_i(Fl_Dial* o, void*) {
  int nc=13;
rmgmo->CM[nc].pan=(int)o->value();
rmgmo->enviocontrol(nc,10,(int)o->value());
poninfo(4,3,(int)o->value());
}
void stygmorgan::cb_Pan13(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Pan13_i(o,v);
}

void stygmorgan::cb_Reverb13_i(Fl_Dial* o, void*) {
  int nc=13;
rmgmo->CM[nc].reverb=(int)o->value();
rmgmo->enviocontrol(nc,91,(int)o->value());
poninfo(4,2,(int)o->value());
}
void stygmorgan::cb_Reverb13(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Reverb13_i(o,v);
}

void stygmorgan::cb_Chorus13_i(Fl_Dial* o, void*) {
  int nc=13;
rmgmo->CM[nc].chorus=(int)o->value();
rmgmo->enviocontrol(nc,93,(int)o->value());
poninfo(4,1,(int)o->value());
}
void stygmorgan::cb_Chorus13(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Chorus13_i(o,v);
}

void stygmorgan::cb_Vol13_i(Fl_Slider* o, void*) {
  int nc=13;
rmgmo->CM[nc].vol=(int)o->value();
rmgmo->ActuVarVol(nc,nc);
poninfo(4,0,(int)o->value());
}
void stygmorgan::cb_Vol13(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Vol13_i(o,v);
}

void stygmorgan::cb_On13_i(Fl_Button* o, void*) {
  int nc=13;
rmgmo->CM[nc].OnOff=o->value();
if (!rmgmo->CM[nc].OnOff) DP13->color((Fl_Color)0);
else
DP13->color((Fl_Color)230);
DP13->redraw();
}
void stygmorgan::cb_On13(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_On13_i(o,v);
}

void stygmorgan::cb_Solo13_i(Fl_Button* o, void*) {
  int nc=13;
rmgmo->CM[nc].solo=o->value();
if ((int)o->value()) PonSolo(nc); else QuitaSolo();
}
void stygmorgan::cb_Solo13(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Solo13_i(o,v);
}

void stygmorgan::cb_More13_i(Fl_Button* o, void*) {
  int nc=13;
if (rmgmo->wmore) o->value(0); else
MoreParams(nc);
}
void stygmorgan::cb_More13(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_More13_i(o,v);
}

void stygmorgan::cb_P13_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
int nc=13;
rmgmo->CM[nc].program=(int)o->value();
rmgmo->envioprograma(nc,rmgmo->CM[nc].program);
DP13->label(rmgmo->PresetList[rmgmo->CalculaBanco(nc)].PBanco[rmgmo->CM[nc].program].ProgName);
}
void stygmorgan::cb_P13(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_P13_i(o,v);
}

void stygmorgan::cb_Pan14_i(Fl_Dial* o, void*) {
  int nc=14;
rmgmo->CM[nc].pan=(int)o->value();
rmgmo->enviocontrol(nc,10,(int)o->value());
poninfo(5,3,(int)o->value());
}
void stygmorgan::cb_Pan14(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Pan14_i(o,v);
}

void stygmorgan::cb_Reverb14_i(Fl_Dial* o, void*) {
  int nc=14;
rmgmo->CM[nc].reverb=(int)o->value();
rmgmo->enviocontrol(nc,91,(int)o->value());
poninfo(5,2,(int)o->value());
}
void stygmorgan::cb_Reverb14(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Reverb14_i(o,v);
}

void stygmorgan::cb_Chorus14_i(Fl_Dial* o, void*) {
  int nc=14;
rmgmo->CM[nc].chorus=(int)o->value();
rmgmo->enviocontrol(nc,93,(int)o->value());
poninfo(5,1,(int)o->value());
}
void stygmorgan::cb_Chorus14(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Chorus14_i(o,v);
}

void stygmorgan::cb_Vol14_i(Fl_Slider* o, void*) {
  int nc=14;
rmgmo->CM[nc].vol=(int)o->value();
rmgmo->ActuVarVol(nc,nc);
poninfo(5,0,(int)o->value());
}
void stygmorgan::cb_Vol14(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Vol14_i(o,v);
}

void stygmorgan::cb_On14_i(Fl_Button* o, void*) {
  int nc=14;
rmgmo->CM[nc].OnOff=o->value();
if (!rmgmo->CM[nc].OnOff) DP14->color((Fl_Color)0);
else
DP14->color((Fl_Color)230);
DP14->redraw();
}
void stygmorgan::cb_On14(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_On14_i(o,v);
}

void stygmorgan::cb_Solo14_i(Fl_Button* o, void*) {
  int nc=14;
rmgmo->CM[nc].solo=o->value();
if ((int)o->value()) PonSolo(nc); else QuitaSolo();
}
void stygmorgan::cb_Solo14(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Solo14_i(o,v);
}

void stygmorgan::cb_More14_i(Fl_Button* o, void*) {
  int nc=14;
if (rmgmo->wmore) o->value(0); else
MoreParams(nc);
}
void stygmorgan::cb_More14(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_More14_i(o,v);
}

void stygmorgan::cb_P14_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
int nc=14;
rmgmo->CM[nc].program=(int)o->value();
rmgmo->envioprograma(nc,rmgmo->CM[nc].program);
DP14->label(rmgmo->PresetList[rmgmo->CalculaBanco(nc)].PBanco[rmgmo->CM[nc].program].ProgName);
}
void stygmorgan::cb_P14(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_P14_i(o,v);
}

void stygmorgan::cb_Pan15_i(Fl_Dial* o, void*) {
  int nc=15;
rmgmo->CM[nc].pan=(int)o->value();
rmgmo->enviocontrol(nc,10,(int)o->value());
poninfo(6,3,(int)o->value());
}
void stygmorgan::cb_Pan15(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Pan15_i(o,v);
}

void stygmorgan::cb_Reverb15_i(Fl_Dial* o, void*) {
  int nc=15;
rmgmo->CM[nc].reverb=(int)o->value();
rmgmo->enviocontrol(nc,91,(int)o->value());
poninfo(6,2,(int)o->value());
}
void stygmorgan::cb_Reverb15(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Reverb15_i(o,v);
}

void stygmorgan::cb_Chorus15_i(Fl_Dial* o, void*) {
  int nc=15;
rmgmo->CM[nc].chorus=(int)o->value();
rmgmo->enviocontrol(nc,93,(int)o->value());
poninfo(6,1,(int)o->value());
}
void stygmorgan::cb_Chorus15(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Chorus15_i(o,v);
}

void stygmorgan::cb_Vol15_i(Fl_Slider* o, void*) {
  int nc=15;
rmgmo->CM[nc].vol=(int)o->value();
rmgmo->ActuVarVol(nc,nc);
poninfo(6,0,(int)o->value());
}
void stygmorgan::cb_Vol15(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Vol15_i(o,v);
}

void stygmorgan::cb_On15_i(Fl_Button* o, void*) {
  int nc=15;
rmgmo->CM[nc].OnOff=o->value();
if (!rmgmo->CM[nc].OnOff) DP15->color((Fl_Color)0);
else
DP15->color((Fl_Color)230);
DP15->redraw();
}
void stygmorgan::cb_On15(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_On15_i(o,v);
}

void stygmorgan::cb_Solo15_i(Fl_Button* o, void*) {
  int nc=15;
rmgmo->CM[nc].solo=o->value();
if ((int)o->value()) PonSolo(nc); else QuitaSolo();
}
void stygmorgan::cb_Solo15(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Solo15_i(o,v);
}

void stygmorgan::cb_More15_i(Fl_Button* o, void*) {
  int nc=15;
if (rmgmo->wmore) o->value(0); else
MoreParams(nc);
}
void stygmorgan::cb_More15(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_More15_i(o,v);
}

void stygmorgan::cb_P15_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
int nc=15;
rmgmo->CM[nc].program=(int)o->value();
rmgmo->envioprograma(nc,rmgmo->CM[nc].program);
DP15->label(rmgmo->PresetList[rmgmo->CalculaBanco(nc)].PBanco[rmgmo->CM[nc].program].ProgName);
}
void stygmorgan::cb_P15(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_P15_i(o,v);
}

void stygmorgan::cb_NewSound_i(Fl_Menu_*, void*) {
  const char *pepe;

pepe = fl_input("Please enter the name of the sound:");

if (pepe != NULL)
{
rmgmo->isnews=1;
strcpy(rmgmo->nSound.Name,pepe);
VSound->label(rmgmo->nSound.Name);
labelwin(5);
};
}
void stygmorgan::cb_NewSound(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_NewSound_i(o,v);
}

void stygmorgan::cb_LoadSounds_i(Fl_Menu_*, void*) {
  char *filename;

filename=fl_file_chooser("Read Sounds:","SNDR Files (*.sndr)",NULL,0);
if (filename==NULL) return;
rmgmo->readsounds(filename);
Leer_Sounds();
}
void stygmorgan::cb_LoadSounds(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_LoadSounds_i(o,v);
}

void stygmorgan::cb_SaveSounds_i(Fl_Menu_*, void*) {
  rmgmo->ponmixensound();
if (rmgmo->isnews)rmgmo->savesound();
else rmgmo->writesound((int)ListaSounds->value());

rmgmo->readsounds(rmgmo->SoundsFilename);
Leer_Sounds();
labelwin(1);
}
void stygmorgan::cb_SaveSounds(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_SaveSounds_i(o,v);
}

void stygmorgan::cb_Delete_i(Fl_Menu_*, void*) {
  rmgmo->deletesound(ListaSounds->value());
rmgmo->readsounds(rmgmo->SoundsFilename);
Leer_Sounds();
}
void stygmorgan::cb_Delete(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Delete_i(o,v);
}

void stygmorgan::cb_LoadStyles_i(Fl_Menu_*, void*) {
  char *filename;

filename=fl_file_chooser("Read Styles:","STYR Files (*.styr)",NULL,0);
if (filename==NULL) return;
rmgmo->readstyles(filename);
Leer_Styles(1);
}
void stygmorgan::cb_LoadStyles(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_LoadStyles_i(o,v);
}

void stygmorgan::cb_SaveStyles_i(Fl_Menu_*, void*) {
  SaveStylesFunction();
}
void stygmorgan::cb_SaveStyles(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_SaveStyles_i(o,v);
}

void stygmorgan::cb_DelStyle_i(Fl_Menu_*, void*) {
  rmgmo->writestylec(rmgmo->numLista[(int)ListaStyles->value()],1);
rmgmo->readstyles(rmgmo->StylesFilename);
Leer_Styles(1);
}
void stygmorgan::cb_DelStyle(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_DelStyle_i(o,v);
}

void stygmorgan::cb_ImportSty_i(Fl_Menu_*, void*) {
  char *filename;
Fl::focus(STST);
rmgmo->panico(0,0,15);
filename=fl_file_chooser("Import Style:","STY Files (*.sty)\tprs Files(*.prs)\tMidi Files(*.mid)",NULL,0);
if (filename==NULL) return;
rmgmo->isnew=1;
rmgmo->ImportaMidi(filename);
VStyle->copy_label(fl_filename_setext(rmgmo->nStyle.Name,""));
labelwin(3);
pontempo();
ponmix();
rmgmo->AsignaTabla();
EnAp();
CVari(0,1);
}
void stygmorgan::cb_ImportSty(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_ImportSty_i(o,v);
}

void stygmorgan::cb_Load_i(Fl_Menu_*, void*) {
  char *filename;
filename=fl_file_chooser("Load single style:","stys files (*.stys)",NULL,0);
if (filename==NULL) return;
rmgmo->isnew=1;
rmgmo->readsinglestyle(filename);
VStyle->copy_label(fl_filename_setext(rmgmo->nStyle.Name,""));
labelwin(3);
rmgmo->bpm=rmgmo->nStyle.bpm;
pontempo();
ponmix();
rmgmo->AsignaTabla();
EnAp();
CVari(0,1);
}
void stygmorgan::cb_Load(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void stygmorgan::cb_Save_i(Fl_Menu_*, void*) {
  char *filename;


filename=fl_file_chooser("Save single style:","stys files (*.stys)",rmgmo->nStyle.Name,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".stys");
rmgmo->savesinglestyle(filename);
}
void stygmorgan::cb_Save(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void stygmorgan::cb_New_i(Fl_Menu_*, void*) {
  const char *pepe;

pepe=fl_input("Please enter the name of the registration:");
if (pepe != NULL)
{
rmgmo->isnewr=1;
strcpy(rmgmo->R.Name,pepe);
labelwin(4);
}
else
return;
}
void stygmorgan::cb_New(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_New_i(o,v);
}

void stygmorgan::cb_Read_i(Fl_Menu_*, void*) {
  char *filename;

filename=fl_file_chooser("Read Registration:","(*)",NULL,0);
if (filename==NULL) return;
rmgmo->readregistrations(filename);
Leer_Registrations();
BroReg->value(BroReg->size());
}
void stygmorgan::cb_Read(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Read_i(o,v);
}

void stygmorgan::cb_Save1_i(Fl_Menu_*, void*) {
  rmgmo->PonaReg();
if (rmgmo->isnewr) 
{
rmgmo->saveregistration();
rmgmo->readregistrations(rmgmo->RegisFilename);
Leer_Registrations();
labelwin(2);
}
else
rmgmo->writeregistration((int)BroReg->value());
Leer_Registrations();
labelwin(2);
}
void stygmorgan::cb_Save1(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void stygmorgan::cb_Delete1_i(Fl_Menu_*, void*) {
  rmgmo->deleteregistration(BroReg->value());
rmgmo->readregistrations(rmgmo->RegisFilename);
Leer_Registrations();
}
void stygmorgan::cb_Delete1(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Delete1_i(o,v);
}

void stygmorgan::cb_Load1_i(Fl_Menu_*, void*) {
  char *filename;
filename=fl_file_chooser("Read Preset Names:","(*)",NULL,0);

if (filename==NULL) return;
rmgmo->loadpreset(filename);
}
void stygmorgan::cb_Load1(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Load1_i(o,v);
}

void stygmorgan::cb_Load2_i(Fl_Menu_*, void*) {
  char *filename;
filename=fl_file_chooser("Read Drum Note Names:","(*)",NULL,0);
if (filename==NULL) return;
rmgmo->loaddrumset(filename);
}
void stygmorgan::cb_Load2(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Load2_i(o,v);
}

void stygmorgan::cb_Exit_i(Fl_Menu_*, void*) {
  rmgmorganwin->do_callback();
}
void stygmorgan::cb_Exit(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

void stygmorgan::cb_EPattern_i(Fl_Menu_*, void*) {
  if(rmgmo->weventeditor) return;
pera=1;
Botones->deactivate();
ListaStyles->deactivate();
SelectType->deactivate();
ImportSty->deactivate();
coord();
rmgmo->vuelve=rmgmo->Variacion;
rmgmo->ventana=2;
rmgmo->weventeditor=1;
}
void stygmorgan::cb_EPattern(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_EPattern_i(o,v);
}

void stygmorgan::cb_MixerE_i(Fl_Menu_*, void*) {
  if(rmgmo->wmixereditor) return;
rmgmo->wmixereditor=1;
Botones->deactivate();
ListaStyles->deactivate();
ImportSty->deactivate();
SelectType->deactivate();
CreaCMixer();
}
void stygmorgan::cb_MixerE(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_MixerE_i(o,v);
}

void stygmorgan::cb_Pattern_i(Fl_Menu_*, void*) {
  if(rmgmo->wpatterneditor) return;
pera=1;
Botones->deactivate();
ListaStyles->deactivate();
SelectType->deactivate();
ImportSty->deactivate();
coord();
rmgmo->vuelve=rmgmo->Variacion;
rmgmo->wpatterneditor=1;
rmgmo->ventana=3;
}
void stygmorgan::cb_Pattern(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Pattern_i(o,v);
}

void stygmorgan::cb_Style_i(Fl_Menu_*, void*) {
  if(rmgmo->wstyleeditor) return;
ImportSty->deactivate();
ListaStyles->deactivate();
SelectType->deactivate();
coord();
rmgmo->wstyleeditor=1;
rmgmo->ventana=4;
}
void stygmorgan::cb_Style(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Style_i(o,v);
}

void stygmorgan::cb_Preferences_i(Fl_Menu_*, void*) {
  if(rmgmo->wpreferences) return;
coord();
rmgmo->wpreferences=1;
rmgmo->ventana=5;
}
void stygmorgan::cb_Preferences(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Preferences_i(o,v);
}

void stygmorgan::cb_ElSeq_i(Fl_Menu_*, void*) {
  if (rmgmo->wsequencer) return;
pera=1;
Botones->deactivate();
ListaStyles->deactivate();
SelectType->deactivate();
ImportSty->deactivate();
BroReg->deactivate();
STST->deactivate();
FGBM->value(1);
FGBM->do_callback();
rmgmo->vuelve=rmgmo->Variacion;
rmgmo->ventana=6;
rmgmo->wsequencer=1;
}
void stygmorgan::cb_ElSeq(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_ElSeq_i(o,v);
}

void stygmorgan::cb_Help_i(Fl_Menu_*, void*) {
  coord();
rmgmo->ventana=7;
}
void stygmorgan::cb_Help(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Help_i(o,v);
}

void stygmorgan::cb_About_i(Fl_Menu_*, void*) {
  if(wabout) return;
coord();
wabout=1;
rmgmo->ventana=1;
}
void stygmorgan::cb_About(Fl_Menu_* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_About_i(o,v);
}

unsigned char stygmorgan::menu_Menu_i18n_done = 0;
Fl_Menu_Item stygmorgan::menu_Menu[] = {
 {"&File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"New Sound", 0,  (Fl_Callback*)stygmorgan::cb_NewSound, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Sounds", 0,  (Fl_Callback*)stygmorgan::cb_LoadSounds, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Sound", 0,  (Fl_Callback*)stygmorgan::cb_SaveSounds, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Delete Sound", 0,  (Fl_Callback*)stygmorgan::cb_Delete, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Styles", 0,  (Fl_Callback*)stygmorgan::cb_LoadStyles, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Style", 0,  (Fl_Callback*)stygmorgan::cb_SaveStyles, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Delete Style", 0,  (Fl_Callback*)stygmorgan::cb_DelStyle, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Import .STY File", 0,  (Fl_Callback*)stygmorgan::cb_ImportSty, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Single Style", 0,  (Fl_Callback*)stygmorgan::cb_Load, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Single Style", 0,  (Fl_Callback*)stygmorgan::cb_Save, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"New Registration", 0,  (Fl_Callback*)stygmorgan::cb_New, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Registrations", 0,  (Fl_Callback*)stygmorgan::cb_Read, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Registration", 0,  (Fl_Callback*)stygmorgan::cb_Save1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Delete Registration", 0,  (Fl_Callback*)stygmorgan::cb_Delete1, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Preset Names", 0,  (Fl_Callback*)stygmorgan::cb_Load1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Drum Note Names", 0,  (Fl_Callback*)stygmorgan::cb_Load2, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0,  (Fl_Callback*)stygmorgan::cb_Exit, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Edit", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Pattern Events ", 0,  (Fl_Callback*)stygmorgan::cb_EPattern, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Copy pattern mixer to...", 0,  (Fl_Callback*)stygmorgan::cb_MixerE, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Pattern Params", 0,  (Fl_Callback*)stygmorgan::cb_Pattern, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Style Params", 0,  (Fl_Callback*)stygmorgan::cb_Style, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Preferences", 0,  (Fl_Callback*)stygmorgan::cb_Preferences, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"&Sequencer", 0,  (Fl_Callback*)stygmorgan::cb_ElSeq, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"&Help", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Help", 0xffbe,  (Fl_Callback*)stygmorgan::cb_Help, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"About", 0,  (Fl_Callback*)stygmorgan::cb_About, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* stygmorgan::File = stygmorgan::menu_Menu + 0;
Fl_Menu_Item* stygmorgan::NewSound = stygmorgan::menu_Menu + 1;
Fl_Menu_Item* stygmorgan::LoadSounds = stygmorgan::menu_Menu + 2;
Fl_Menu_Item* stygmorgan::SaveSounds = stygmorgan::menu_Menu + 3;
Fl_Menu_Item* stygmorgan::LoadStyles = stygmorgan::menu_Menu + 5;
Fl_Menu_Item* stygmorgan::SaveStyles = stygmorgan::menu_Menu + 6;
Fl_Menu_Item* stygmorgan::DelStyle = stygmorgan::menu_Menu + 7;
Fl_Menu_Item* stygmorgan::ImportSty = stygmorgan::menu_Menu + 8;
Fl_Menu_Item* stygmorgan::Exit = stygmorgan::menu_Menu + 17;
Fl_Menu_Item* stygmorgan::sEdit = stygmorgan::menu_Menu + 19;
Fl_Menu_Item* stygmorgan::EPattern = stygmorgan::menu_Menu + 20;
Fl_Menu_Item* stygmorgan::MixerE = stygmorgan::menu_Menu + 21;
Fl_Menu_Item* stygmorgan::ElSeq = stygmorgan::menu_Menu + 26;

void stygmorgan::cb_RTempo_i(Fl_Dial* o, void*) {
  if (rmgmo->splay) return;
rmgmo->bpm=o->value();
o->parent()->redraw();
CTempo->value(rmgmo->bpm);
rmgmo->set_tempo();
}
void stygmorgan::cb_RTempo(Fl_Dial* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->parent()->user_data()))->cb_RTempo_i(o,v);
}

void stygmorgan::cb_CTempo_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
if (rmgmo->splay) return;
rmgmo->bpm=(int)o->value();
RTempo->value(rmgmo->bpm);
if (rmgmo->splay==0) rmgmo->set_tempo();
}
void stygmorgan::cb_CTempo(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->parent()->user_data()))->cb_CTempo_i(o,v);
}

void stygmorgan::cb_ListaStyles_i(Fl_Browser* o, void*) {
  if (o->size()== 0) return;
if (o->text(o->value()) == NULL) return;
if (! rmgmo->bplay)
{ rmgmo->rela=1.0;
  rmgmo->lppq=1; 
} 
rmgmo->EventoCambia=0;
memset(&rmgmo->nStyle, 0 ,sizeof(rmgmo->nStyle));
rmgmo->Estilo=rmgmo->numLista[(int)o->value()];
rmgmo->readstyle(rmgmo->Estilo);
labelwin(1);
VStyle->label(rmgmo->nStyle.Name);
rmgmo->isnew=0;
if (! rmgmo->bplay) rmgmo->bpm=rmgmo->nStyle.bpm;
CTempo->parent()->redraw();
CTempo->value(rmgmo->bpm);
pontempo();
rmgmo->AsignaTabla();
EnAp();
int lavuelta=0;

if (rmgmo->vuelve !=0 ) 
{
lavuelta=rmgmo->vuelve; 
rmgmo->vuelve=0;
}
else lavuelta=1;

if (rmgmo->bplay ) PCVari(0,lavuelta); else 
    CVari(0,lavuelta);
}
void stygmorgan::cb_ListaStyles(Fl_Browser* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_ListaStyles_i(o,v);
}

void stygmorgan::cb_ListaSounds_i(Fl_Browser* o, void*) {
  if (o->size()== 0) return;
if (o->text(o->value()) == NULL) return;
int actual=0;
const char *pepe;
actual=(int) o->value();
rmgmo->Sonido=(int)o->value();
SetSound(rmgmo->Sonido);
if (Fl::event_button()==3)
{
pepe =fl_input("Please enter the new name of the sound:",rmgmo->nSound.Name);
if (pepe != NULL)
{
strcpy(rmgmo->nSound.Name,pepe);
VSound->label(rmgmo->nSound.Name);
rmgmo->writesound((int)ListaSounds->value());
rmgmo->readsounds(rmgmo->SoundsFilename);
Leer_Sounds();
SetSound(actual);

}
};
}
void stygmorgan::cb_ListaSounds(Fl_Browser* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_ListaSounds_i(o,v);
}

void stygmorgan::cb_STST_i(Fl_Button* o, void*) {
  rmgmo->bplay=o->value();
if (o->value())
{
 ElSeq->deactivate();
 N1->activate(); 
 rmgmo->ostart(); 
} 
 else 
{
rmgmo->ostop();
apaga();
};
}
void stygmorgan::cb_STST(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_STST_i(o,v);
}

void stygmorgan::cb_DCompas_i(Fl_Box*, void*) {
  if(rmgmo->bplay)
{
 rmgmo->EPlay();
 semabplay();
}

rmgmo->miramidi();
sema();

if(rmgmo->splay) 
{
	rmgmo->SeqPlay();

	if (sponmix) 
		{
			sponmix=0;
			ponmix();
		}

	if (rmgmo->semi != rmgmo->osemi)
		{ 
			rmgmo->osemi=rmgmo->semi;
			FunciLeds(0);
		}
};
}
void stygmorgan::cb_DCompas(Fl_Box* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_DCompas_i(o,v);
}

void stygmorgan::cb_Sso_i(Fl_Button* o, void*) {
  if (o->value()) rmgmo->sel=0;
ActuaDsel();
}
void stygmorgan::cb_Sso(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->parent()->user_data()))->cb_Sso_i(o,v);
}

void stygmorgan::cb_Sst_i(Fl_Button* o, void*) {
  if (o->value()) rmgmo->sel=1;
ActuaDsel();
}
void stygmorgan::cb_Sst(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->parent()->user_data()))->cb_Sst_i(o,v);
}

void stygmorgan::cb_VolKeyb_i(Fl_Slider* o, void*) {
  rmgmo->KeybVol=(int) o->value();
rmgmo->ActuKeybVol();
}
void stygmorgan::cb_VolKeyb(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_VolKeyb_i(o,v);
}

void stygmorgan::cb_CTranspose_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
rmgmo->transpose=(int)o->value();
}
void stygmorgan::cb_CTranspose(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_CTranspose_i(o,v);
}

void stygmorgan::cb_CSplit_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
rmgmo->split=(int)o->value();
char temp[128];
bzero(temp,sizeof(temp));
sprintf(temp,"%s%d",rmgmo->NC[rmgmo->split % 12].Nom,(rmgmo->split / 12)-2);
DSplit->copy_label(temp);
}
void stygmorgan::cb_CSplit(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_CSplit_i(o,v);
}

void stygmorgan::cb_VolAcc_i(Fl_Slider* o, void*) {
  rmgmo->AccVol=(int)o->value();
rmgmo->ActuAccVol();
}
void stygmorgan::cb_VolAcc(Fl_Slider* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_VolAcc_i(o,v);
}

void stygmorgan::cb_SelectType_i(Fl_Choice* o, void*) {
  rmgmo->SStipo=(int) o->value();
Leer_Styles(1);
}
void stygmorgan::cb_SelectType(Fl_Choice* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_SelectType_i(o,v);
}

void stygmorgan::cb_FGBM_i(Fl_Button* o, void*) {
  if((int) o->value()) rmgmo->TipoRecChord=2;
}
void stygmorgan::cb_FGBM(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->parent()->user_data()))->cb_FGBM_i(o,v);
}

void stygmorgan::cb_FG_i(Fl_Button* o, void*) {
  if((int) o->value()) rmgmo->TipoRecChord=1;
}
void stygmorgan::cb_FG(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->parent()->user_data()))->cb_FG_i(o,v);
}

void stygmorgan::cb_STSync_i(Fl_Button* o, void*) {
  rmgmo->syncstart=(int)o->value();
}
void stygmorgan::cb_STSync(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_STSync_i(o,v);
}

void stygmorgan::cb_BroReg_i(Fl_Browser* o, void*) {
  if (o->size()== 0) return;
if (o->text(o->value()) == NULL) return;
int actual=0;
const char *pepe;
actual=(int) o->value();
SetRegistration(actual);
labelwin(2);
if (Fl::event_button()==3)
{
pepe =fl_input("Please enter the new name of the Registration:",rmgmo->R.Name);
if (pepe != NULL)
{
strcpy(rmgmo->R.Name,pepe);
rmgmo->PonaReg();
rmgmo->writeregistration((int)BroReg->value());
rmgmo->readregistrations(rmgmo->RegisFilename);
labelwin(4);
}
};
}
void stygmorgan::cb_BroReg(Fl_Browser* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_BroReg_i(o,v);
}

void stygmorgan::cb_Copy_i(Fl_Button*, void*) {
  if(rmgmo->wmixereditor) return;
rmgmo->wmixereditor=1;
Botones->deactivate();
ListaStyles->deactivate();
ImportSty->deactivate();
SelectType->deactivate();
CreaCMixer();
}
void stygmorgan::cb_Copy(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_Copy_i(o,v);
}

void stygmorgan::cb_bMainA_i(Fl_Button*, void*) {
  rmgmo->nb=1;
CVari(rmgmo->nb,0);
}
void stygmorgan::cb_bMainA(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->parent()->user_data()))->cb_bMainA_i(o,v);
}

void stygmorgan::cb_bMainB_i(Fl_Button*, void*) {
  rmgmo->nb=2;
CVari(rmgmo->nb,0);
}
void stygmorgan::cb_bMainB(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->parent()->user_data()))->cb_bMainB_i(o,v);
}

void stygmorgan::cb_bMainC_i(Fl_Button*, void*) {
  rmgmo->nb=3;
CVari(rmgmo->nb,0);
}
void stygmorgan::cb_bMainC(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->parent()->user_data()))->cb_bMainC_i(o,v);
}

void stygmorgan::cb_bMainD_i(Fl_Button*, void*) {
  rmgmo->nb=4;
CVari(rmgmo->nb,0);
}
void stygmorgan::cb_bMainD(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->parent()->user_data()))->cb_bMainD_i(o,v);
}

void stygmorgan::cb_bEndingA_i(Fl_Button* o, void*) {
  if (o->value())
{
rmgmo->nb=12;
CVari(rmgmo->nb,0);
}
else
{
rmgmo->sbot[rmgmo->nb]=0;
ActuaBoton();
buscala();
};
}
void stygmorgan::cb_bEndingA(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_bEndingA_i(o,v);
}

void stygmorgan::cb_bEndingB_i(Fl_Button* o, void*) {
  if(o->value())
{
rmgmo->nb=13;
CVari(rmgmo->nb,0);
}
else
{
rmgmo->sbot[rmgmo->nb]=0;
ActuaBoton();
buscala();
};
}
void stygmorgan::cb_bEndingB(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_bEndingB_i(o,v);
}

void stygmorgan::cb_bEndingC_i(Fl_Button* o, void*) {
  if (o->value())
{
rmgmo->nb=14;
CVari(rmgmo->nb,0);
}
else
{
rmgmo->sbot[rmgmo->nb]=0;
ActuaBoton();
buscala();
};
}
void stygmorgan::cb_bEndingC(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_bEndingC_i(o,v);
}

void stygmorgan::cb_bIntroA_i(Fl_Button* o, void*) {
  if (o->value())
{
rmgmo->nb=9;
CVari(rmgmo->nb,0);
}
else
{
rmgmo->sbot[rmgmo->nb]=0;
ActuaBoton();
buscala();
};
}
void stygmorgan::cb_bIntroA(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_bIntroA_i(o,v);
}

void stygmorgan::cb_bIntroB_i(Fl_Button* o, void*) {
  if (o->value())
{
rmgmo->nb=10;
CVari(rmgmo->nb,0);
}
else
{
rmgmo->sbot[rmgmo->nb]=0;
ActuaBoton();
buscala();
};
}
void stygmorgan::cb_bIntroB(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_bIntroB_i(o,v);
}

void stygmorgan::cb_bIntroC_i(Fl_Button* o, void*) {
  if(o->value())
{
rmgmo->nb=11;
CVari(rmgmo->nb,0);
}
else
{
rmgmo->sbot[rmgmo->nb]=0;
ActuaBoton();
buscala();
};
}
void stygmorgan::cb_bIntroC(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_bIntroC_i(o,v);
}

void stygmorgan::cb_bFillAA_i(Fl_Button* o, void*) {
  if (o->value())
{
rmgmo->nb=5;
CVari(rmgmo->nb,0);
}
else
{
rmgmo->sbot[rmgmo->nb]=0;
ActuaBoton();
buscala();
};
}
void stygmorgan::cb_bFillAA(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_bFillAA_i(o,v);
}

void stygmorgan::cb_bFillAB_i(Fl_Button* o, void*) {
  if (o->value())
{
rmgmo->nb=16;
CVari(rmgmo->nb,0);
}
else
{
rmgmo->sbot[rmgmo->nb]=0;
ActuaBoton();
buscala();
};
}
void stygmorgan::cb_bFillAB(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_bFillAB_i(o,v);
}

void stygmorgan::cb_bFillBA_i(Fl_Button* o, void*) {
  if (o->value())
{
rmgmo->nb=15;
CVari(rmgmo->nb,0);
}
else
{
rmgmo->sbot[rmgmo->nb]=0;
ActuaBoton();
buscala();
};
}
void stygmorgan::cb_bFillBA(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_bFillBA_i(o,v);
}

void stygmorgan::cb_bFillBB_i(Fl_Button* o, void*) {
  if (o->value())
{
rmgmo->nb=6;
CVari(rmgmo->nb,0);
}
else
{
rmgmo->sbot[rmgmo->nb]=0;
ActuaBoton();
buscala();
};
}
void stygmorgan::cb_bFillBB(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_bFillBB_i(o,v);
}

void stygmorgan::cb_bFillCC_i(Fl_Button* o, void*) {
  if (o->value())
{
rmgmo->nb=7;
CVari(rmgmo->nb,0);
}
else
{
rmgmo->sbot[rmgmo->nb]=0;
ActuaBoton();
buscala();
};
}
void stygmorgan::cb_bFillCC(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_bFillCC_i(o,v);
}

void stygmorgan::cb_bFillDD_i(Fl_Button* o, void*) {
  if (o->value())
{
rmgmo->nb=8;
CVari(rmgmo->nb,0);
}
else
{
rmgmo->sbot[rmgmo->nb]=0;
ActuaBoton();
buscala();
};
}
void stygmorgan::cb_bFillDD(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_bFillDD_i(o,v);
}

void stygmorgan::cb_AutoFill_i(Fl_Button* o, void*) {
  rmgmo->AFill=(int)o->value();
}
void stygmorgan::cb_AutoFill(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->parent()->user_data()))->cb_AutoFill_i(o,v);
}

void stygmorgan::cb_More_i(Fl_Double_Window*, void*) {
  More->hide();
Actua_More();
rmgmo->wmore=0;
delete More;
}
void stygmorgan::cb_More(Fl_Double_Window* o, void* v) {
  ((stygmorgan*)(o->user_data()))->cb_More_i(o,v);
}

void stygmorgan::cb_Octave_i(Fl_Counter* o, void*) {
  rmgmo->CM[rmgmo->selmix].octave=(int)o->value();
o->parent()->redraw();
}
void stygmorgan::cb_Octave(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Octave_i(o,v);
}

void stygmorgan::cb_Transpose_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
rmgmo->CM[rmgmo->selmix].transpose=(int)o->value();
}
void stygmorgan::cb_Transpose(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Transpose_i(o,v);
}

void stygmorgan::cb_bMSB_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
rmgmo->CM[rmgmo->selmix].bMSB=(int)o->value();
ActuaBanco(rmgmo->selmix);
}
void stygmorgan::cb_bMSB(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_bMSB_i(o,v);
}

void stygmorgan::cb_bLSB_i(Fl_Counter* o, void*) {
  o->parent()->redraw();
rmgmo->CM[rmgmo->selmix].bLSB=(int)o->value();
ActuaBanco(rmgmo->selmix);
}
void stygmorgan::cb_bLSB(Fl_Counter* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_bLSB_i(o,v);
}

void stygmorgan::cb_Ok_i(Fl_Button*, void*) {
  More->do_callback();
}
void stygmorgan::cb_Ok(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Ok_i(o,v);
}

void stygmorgan::cb_CMixer_i(Fl_Double_Window*, void*) {
  pera=2;
CMixer->hide();
rmgmo->wmixereditor=0;
CMixer->clear();
delete CMixer;
}
void stygmorgan::cb_CMixer(Fl_Double_Window* o, void* v) {
  ((stygmorgan*)(o->user_data()))->cb_CMixer_i(o,v);
}

void stygmorgan::cb_Ok1_i(Fl_Button*, void*) {
  int i;
Fl_Check_Button *pepe;


for (i=3; i<CMixer->children(); i++)
  {

  pepe = (Fl_Check_Button*) CMixer->child(i);

  if (pepe->value())
  rmgmo->ponmixenmixpattern(i-2); 
  }

CMixer->do_callback();
}
void stygmorgan::cb_Ok1(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Ok1_i(o,v);
}

void stygmorgan::cb_CCCancel_i(Fl_Button*, void*) {
  rmgmo->bcancel=1;
CMixer->do_callback();
}
void stygmorgan::cb_CCCancel(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_CCCancel_i(o,v);
}

void stygmorgan::cb_Select_i(Fl_Button*, void*) {
  int i;
Fl_Check_Button *pepe;


for (i=3; i<CMixer->children(); i++)
  {

  pepe = (Fl_Check_Button*) CMixer->child(i);
  pepe->value(1);
   
  };
}
void stygmorgan::cb_Select(Fl_Button* o, void* v) {
  ((stygmorgan*)(o->parent()->user_data()))->cb_Select_i(o,v);
}

Fl_Double_Window* stygmorgan::make_window() {
  { rmgmorganwin = new Fl_Double_Window(1010, 780);
    rmgmorganwin->box(FL_GTK_UP_BOX);
    rmgmorganwin->color((Fl_Color)44);
    rmgmorganwin->selection_color(FL_DARK1);
    rmgmorganwin->callback((Fl_Callback*)cb_rmgmorganwin, (void*)(this));
    { Fl_Group* o = new Fl_Group(1, 325, 71, 450);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)44);
      o->selection_color(FL_BACKGROUND2_COLOR);
      o->labelfont(1);
      { Pan0 = new Fl_Dial(20, 415, 35, 35, gettext("Pan"));
        Pan0->box(FL_GTK_ROUND_UP_BOX);
        Pan0->color(FL_DARK1);
        Pan0->selection_color((Fl_Color)1);
        Pan0->labelsize(9);
        Pan0->labelcolor(FL_LIGHT2);
        Pan0->maximum(127);
        Pan0->step(1);
        Pan0->value(64);
        Pan0->callback((Fl_Callback*)cb_Pan0);
        Pan0->align(Fl_Align(98));
      } // Fl_Dial* Pan0
      { Reverb0 = new Fl_Dial(20, 465, 35, 35, gettext("Reverb"));
        Reverb0->box(FL_GTK_ROUND_UP_BOX);
        Reverb0->color(FL_DARK1);
        Reverb0->selection_color((Fl_Color)4);
        Reverb0->labelsize(9);
        Reverb0->labelcolor(FL_LIGHT2);
        Reverb0->maximum(127);
        Reverb0->step(1);
        Reverb0->callback((Fl_Callback*)cb_Reverb0);
      } // Fl_Dial* Reverb0
      { Chorus0 = new Fl_Dial(20, 515, 35, 35, gettext("Chorus"));
        Chorus0->box(FL_GTK_ROUND_UP_BOX);
        Chorus0->color(FL_DARK1);
        Chorus0->selection_color((Fl_Color)4);
        Chorus0->labelsize(9);
        Chorus0->labelcolor(FL_LIGHT2);
        Chorus0->maximum(127);
        Chorus0->step(1);
        Chorus0->callback((Fl_Callback*)cb_Chorus0);
      } // Fl_Dial* Chorus0
      { Vol0 = new Fl_Slider(20, 565, 35, 140);
        Vol0->type(4);
        Vol0->box(FL_GTK_DOWN_BOX);
        Vol0->color((Fl_Color)43);
        Vol0->selection_color((Fl_Color)12);
        Vol0->labelcolor((Fl_Color)1);
        Vol0->minimum(127);
        Vol0->maximum(0);
        Vol0->step(1);
        Vol0->callback((Fl_Callback*)cb_Vol0);
      } // Fl_Slider* Vol0
      { On0 = new Fl_Button(20, 365, 40, 25, gettext("On"));
        On0->type(1);
        On0->box(FL_PLASTIC_THIN_UP_BOX);
        On0->shortcut(0x31);
        On0->color((Fl_Color)11);
        On0->selection_color((Fl_Color)3);
        On0->labelsize(13);
        On0->callback((Fl_Callback*)cb_On0);
        On0->align(Fl_Align(FL_ALIGN_CLIP));
      } // Fl_Button* On0
      { Solo0 = new Fl_Button(13, 395, 25, 15, gettext("Solo"));
        Solo0->type(1);
        Solo0->box(FL_PLASTIC_THIN_UP_BOX);
        Solo0->color((Fl_Color)11);
        Solo0->selection_color((Fl_Color)3);
        Solo0->labelsize(8);
        Solo0->callback((Fl_Callback*)cb_Solo0);
        Solo0->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* Solo0
      { More0 = new Fl_Button(41, 395, 25, 15, gettext("+"));
        More0->type(1);
        More0->box(FL_PLASTIC_THIN_UP_BOX);
        More0->color((Fl_Color)11);
        More0->selection_color((Fl_Color)3);
        More0->labelsize(8);
        More0->callback((Fl_Callback*)cb_More0);
        More0->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* More0
      { DP0 = new Fl_Box(5, 710, 65, 25, gettext("Piano"));
        DP0->box(FL_PLASTIC_DOWN_BOX);
        DP0->color((Fl_Color)230);
        DP0->labelsize(9);
        DP0->labelcolor((Fl_Color)1);
        DP0->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DP0
      { Fl_Box* o = new Fl_Box(5, 335, 65, 25, gettext("Left 1"));
        o->labelsize(15);
        o->labelcolor(FL_LIGHT2);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { P0 = new Fl_Counter(1, 750, 64, 15, gettext("Program"));
        P0->type(1);
        P0->box(FL_NO_BOX);
        P0->color((Fl_Color)44);
        P0->labelsize(9);
        P0->labelcolor(FL_LIGHT2);
        P0->minimum(0);
        P0->maximum(127);
        P0->step(1);
        P0->textcolor(FL_BACKGROUND2_COLOR);
        P0->callback((Fl_Callback*)cb_P0);
        P0->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* P0
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(72, 325, 70, 450);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)44);
      o->labelfont(1);
      o->labelsize(17);
      o->labelcolor((Fl_Color)1);
      { Pan1 = new Fl_Dial(90, 415, 35, 35, gettext("Pan"));
        Pan1->box(FL_GTK_ROUND_UP_BOX);
        Pan1->color(FL_DARK1);
        Pan1->selection_color((Fl_Color)1);
        Pan1->labelsize(9);
        Pan1->labelcolor(FL_LIGHT2);
        Pan1->maximum(127);
        Pan1->step(1);
        Pan1->value(64);
        Pan1->callback((Fl_Callback*)cb_Pan1);
        Pan1->align(Fl_Align(66));
      } // Fl_Dial* Pan1
      { Reverb1 = new Fl_Dial(90, 465, 35, 35, gettext("Reverb"));
        Reverb1->box(FL_GTK_ROUND_UP_BOX);
        Reverb1->color(FL_DARK1);
        Reverb1->selection_color((Fl_Color)4);
        Reverb1->labelsize(9);
        Reverb1->labelcolor(FL_LIGHT2);
        Reverb1->maximum(127);
        Reverb1->step(1);
        Reverb1->callback((Fl_Callback*)cb_Reverb1);
      } // Fl_Dial* Reverb1
      { Chorus1 = new Fl_Dial(90, 515, 35, 35, gettext("Chorus"));
        Chorus1->box(FL_GTK_ROUND_UP_BOX);
        Chorus1->color(FL_DARK1);
        Chorus1->selection_color((Fl_Color)4);
        Chorus1->labelsize(9);
        Chorus1->labelcolor(FL_LIGHT2);
        Chorus1->maximum(127);
        Chorus1->step(1);
        Chorus1->callback((Fl_Callback*)cb_Chorus1);
      } // Fl_Dial* Chorus1
      { Vol1 = new Fl_Slider(90, 565, 35, 140);
        Vol1->type(4);
        Vol1->box(FL_GTK_DOWN_BOX);
        Vol1->color((Fl_Color)43);
        Vol1->selection_color((Fl_Color)12);
        Vol1->labelcolor((Fl_Color)1);
        Vol1->minimum(127);
        Vol1->maximum(0);
        Vol1->step(1);
        Vol1->callback((Fl_Callback*)cb_Vol1);
      } // Fl_Slider* Vol1
      { On1 = new Fl_Button(90, 365, 40, 25, gettext("On"));
        On1->type(1);
        On1->box(FL_PLASTIC_THIN_UP_BOX);
        On1->shortcut(0x32);
        On1->color((Fl_Color)11);
        On1->selection_color((Fl_Color)3);
        On1->labelsize(13);
        On1->callback((Fl_Callback*)cb_On1);
        On1->align(Fl_Align(FL_ALIGN_CLIP));
      } // Fl_Button* On1
      { Solo1 = new Fl_Button(83, 395, 25, 15, gettext("Solo"));
        Solo1->type(1);
        Solo1->box(FL_PLASTIC_THIN_UP_BOX);
        Solo1->color((Fl_Color)11);
        Solo1->selection_color((Fl_Color)3);
        Solo1->labelsize(8);
        Solo1->callback((Fl_Callback*)cb_Solo1);
        Solo1->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* Solo1
      { More1 = new Fl_Button(111, 395, 25, 15, gettext("+"));
        More1->type(1);
        More1->box(FL_PLASTIC_THIN_UP_BOX);
        More1->color((Fl_Color)11);
        More1->selection_color((Fl_Color)3);
        More1->labelsize(8);
        More1->callback((Fl_Callback*)cb_More1);
        More1->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* More1
      { DP1 = new Fl_Box(75, 710, 65, 25, gettext("Piano"));
        DP1->box(FL_PLASTIC_DOWN_BOX);
        DP1->color((Fl_Color)230);
        DP1->labelsize(9);
        DP1->labelcolor((Fl_Color)1);
        DP1->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DP1
      { Fl_Box* o = new Fl_Box(75, 335, 65, 25, gettext("Left 2"));
        o->labelsize(15);
        o->labelcolor(FL_LIGHT2);
      } // Fl_Box* o
      { P1 = new Fl_Counter(72, 750, 64, 14, gettext("Program"));
        P1->type(1);
        P1->box(FL_NO_BOX);
        P1->color((Fl_Color)44);
        P1->labelsize(9);
        P1->labelcolor(FL_LIGHT2);
        P1->minimum(0);
        P1->maximum(127);
        P1->step(1);
        P1->textcolor(FL_BACKGROUND2_COLOR);
        P1->callback((Fl_Callback*)cb_P1);
        P1->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* P1
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(141, 325, 72, 450);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)44);
      { Pan2 = new Fl_Dial(160, 415, 35, 35, gettext("Pan"));
        Pan2->box(FL_GTK_ROUND_UP_BOX);
        Pan2->color(FL_DARK1);
        Pan2->selection_color((Fl_Color)1);
        Pan2->labelsize(9);
        Pan2->labelcolor(FL_LIGHT2);
        Pan2->maximum(127);
        Pan2->step(1);
        Pan2->value(64);
        Pan2->callback((Fl_Callback*)cb_Pan2);
        Pan2->align(Fl_Align(66));
      } // Fl_Dial* Pan2
      { Reverb2 = new Fl_Dial(160, 465, 35, 35, gettext("Reverb"));
        Reverb2->box(FL_GTK_ROUND_UP_BOX);
        Reverb2->color(FL_DARK1);
        Reverb2->selection_color((Fl_Color)4);
        Reverb2->labelsize(9);
        Reverb2->labelcolor(FL_LIGHT2);
        Reverb2->maximum(127);
        Reverb2->step(1);
        Reverb2->callback((Fl_Callback*)cb_Reverb2);
      } // Fl_Dial* Reverb2
      { Chorus2 = new Fl_Dial(160, 515, 35, 35, gettext("Chorus"));
        Chorus2->box(FL_GTK_ROUND_UP_BOX);
        Chorus2->color(FL_DARK1);
        Chorus2->selection_color((Fl_Color)4);
        Chorus2->labelsize(9);
        Chorus2->labelcolor(FL_LIGHT2);
        Chorus2->maximum(127);
        Chorus2->step(1);
        Chorus2->callback((Fl_Callback*)cb_Chorus2);
      } // Fl_Dial* Chorus2
      { Vol2 = new Fl_Slider(160, 565, 35, 140);
        Vol2->type(4);
        Vol2->box(FL_GTK_DOWN_BOX);
        Vol2->color((Fl_Color)43);
        Vol2->selection_color((Fl_Color)12);
        Vol2->labelcolor((Fl_Color)1);
        Vol2->minimum(127);
        Vol2->maximum(0);
        Vol2->step(1);
        Vol2->callback((Fl_Callback*)cb_Vol2);
      } // Fl_Slider* Vol2
      { On2 = new Fl_Button(160, 365, 40, 25, gettext("On"));
        On2->type(1);
        On2->box(FL_PLASTIC_THIN_UP_BOX);
        On2->shortcut(0x33);
        On2->color((Fl_Color)11);
        On2->selection_color((Fl_Color)3);
        On2->labelsize(13);
        On2->callback((Fl_Callback*)cb_On2);
        On2->align(Fl_Align(FL_ALIGN_CLIP));
      } // Fl_Button* On2
      { Solo2 = new Fl_Button(153, 395, 25, 15, gettext("Solo"));
        Solo2->type(1);
        Solo2->box(FL_PLASTIC_THIN_UP_BOX);
        Solo2->color((Fl_Color)11);
        Solo2->selection_color((Fl_Color)3);
        Solo2->labelsize(8);
        Solo2->callback((Fl_Callback*)cb_Solo2);
        Solo2->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* Solo2
      { More2 = new Fl_Button(181, 395, 25, 15, gettext("+"));
        More2->type(1);
        More2->box(FL_PLASTIC_THIN_UP_BOX);
        More2->color((Fl_Color)11);
        More2->selection_color((Fl_Color)3);
        More2->labelsize(8);
        More2->callback((Fl_Callback*)cb_More2);
        More2->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* More2
      { DP2 = new Fl_Box(145, 710, 65, 25, gettext("Piano"));
        DP2->box(FL_PLASTIC_DOWN_BOX);
        DP2->color((Fl_Color)230);
        DP2->labelsize(9);
        DP2->labelcolor((Fl_Color)1);
        DP2->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DP2
      { Fl_Box* o = new Fl_Box(145, 335, 65, 25, gettext("Right 1"));
        o->labelsize(15);
        o->labelcolor(FL_LIGHT2);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { P2 = new Fl_Counter(141, 750, 64, 14, gettext("Program"));
        P2->type(1);
        P2->box(FL_NO_BOX);
        P2->color((Fl_Color)44);
        P2->labelsize(9);
        P2->labelcolor(FL_LIGHT2);
        P2->minimum(0);
        P2->maximum(127);
        P2->step(1);
        P2->textcolor(FL_BACKGROUND2_COLOR);
        P2->callback((Fl_Callback*)cb_P2);
        P2->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* P2
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(211, 325, 73, 450);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)44);
      { Pan3 = new Fl_Dial(230, 415, 35, 35, gettext("Pan"));
        Pan3->box(FL_GTK_ROUND_UP_BOX);
        Pan3->color(FL_DARK1);
        Pan3->selection_color((Fl_Color)1);
        Pan3->labelsize(9);
        Pan3->labelcolor(FL_LIGHT2);
        Pan3->maximum(127);
        Pan3->step(1);
        Pan3->value(64);
        Pan3->callback((Fl_Callback*)cb_Pan3);
        Pan3->align(Fl_Align(66));
      } // Fl_Dial* Pan3
      { Reverb3 = new Fl_Dial(230, 465, 35, 35, gettext("Reverb"));
        Reverb3->box(FL_GTK_ROUND_UP_BOX);
        Reverb3->color(FL_DARK1);
        Reverb3->selection_color((Fl_Color)4);
        Reverb3->labelsize(9);
        Reverb3->labelcolor(FL_LIGHT2);
        Reverb3->maximum(127);
        Reverb3->step(1);
        Reverb3->callback((Fl_Callback*)cb_Reverb3);
      } // Fl_Dial* Reverb3
      { Chorus3 = new Fl_Dial(230, 515, 35, 35, gettext("Chorus"));
        Chorus3->box(FL_GTK_ROUND_UP_BOX);
        Chorus3->color(FL_DARK1);
        Chorus3->selection_color((Fl_Color)4);
        Chorus3->labelsize(9);
        Chorus3->labelcolor(FL_LIGHT2);
        Chorus3->maximum(127);
        Chorus3->step(1);
        Chorus3->callback((Fl_Callback*)cb_Chorus3);
      } // Fl_Dial* Chorus3
      { Vol3 = new Fl_Slider(230, 565, 35, 140);
        Vol3->type(4);
        Vol3->box(FL_GTK_DOWN_BOX);
        Vol3->color((Fl_Color)43);
        Vol3->selection_color((Fl_Color)12);
        Vol3->minimum(127);
        Vol3->maximum(0);
        Vol3->step(1);
        Vol3->callback((Fl_Callback*)cb_Vol3);
      } // Fl_Slider* Vol3
      { On3 = new Fl_Button(230, 365, 40, 25, gettext("On"));
        On3->type(1);
        On3->box(FL_PLASTIC_THIN_UP_BOX);
        On3->shortcut(0x34);
        On3->color((Fl_Color)11);
        On3->selection_color((Fl_Color)3);
        On3->labelsize(13);
        On3->callback((Fl_Callback*)cb_On3);
        On3->align(Fl_Align(FL_ALIGN_CLIP));
      } // Fl_Button* On3
      { Solo3 = new Fl_Button(223, 395, 25, 15, gettext("Solo"));
        Solo3->type(1);
        Solo3->box(FL_PLASTIC_THIN_UP_BOX);
        Solo3->color((Fl_Color)11);
        Solo3->selection_color((Fl_Color)3);
        Solo3->labelsize(8);
        Solo3->callback((Fl_Callback*)cb_Solo3);
        Solo3->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* Solo3
      { More3 = new Fl_Button(251, 395, 25, 15, gettext("+"));
        More3->type(1);
        More3->box(FL_PLASTIC_THIN_UP_BOX);
        More3->color((Fl_Color)11);
        More3->selection_color((Fl_Color)3);
        More3->labelsize(8);
        More3->callback((Fl_Callback*)cb_More3);
        More3->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* More3
      { DP3 = new Fl_Box(215, 710, 65, 25, gettext("Piano"));
        DP3->box(FL_PLASTIC_DOWN_BOX);
        DP3->color((Fl_Color)230);
        DP3->labelsize(9);
        DP3->labelcolor((Fl_Color)1);
        DP3->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DP3
      { Fl_Box* o = new Fl_Box(215, 335, 65, 25, gettext("Right 2"));
        o->labelsize(15);
        o->labelcolor(FL_LIGHT2);
      } // Fl_Box* o
      { P3 = new Fl_Counter(211, 750, 64, 15, gettext("Program"));
        P3->type(1);
        P3->box(FL_NO_BOX);
        P3->color((Fl_Color)44);
        P3->labelsize(9);
        P3->labelcolor(FL_LIGHT2);
        P3->minimum(0);
        P3->maximum(127);
        P3->step(1);
        P3->textcolor(FL_BACKGROUND2_COLOR);
        P3->callback((Fl_Callback*)cb_P3);
        P3->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* P3
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(280, 325, 75, 450);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)44);
      { Pan4 = new Fl_Dial(300, 415, 35, 35, gettext("Pan"));
        Pan4->box(FL_GTK_ROUND_UP_BOX);
        Pan4->color(FL_DARK1);
        Pan4->selection_color((Fl_Color)1);
        Pan4->labelsize(9);
        Pan4->labelcolor(FL_LIGHT2);
        Pan4->maximum(127);
        Pan4->step(1);
        Pan4->value(64);
        Pan4->callback((Fl_Callback*)cb_Pan4);
        Pan4->align(Fl_Align(66));
      } // Fl_Dial* Pan4
      { Reverb4 = new Fl_Dial(300, 465, 35, 35, gettext("Reverb"));
        Reverb4->box(FL_GTK_ROUND_UP_BOX);
        Reverb4->color(FL_DARK1);
        Reverb4->selection_color((Fl_Color)4);
        Reverb4->labelsize(9);
        Reverb4->labelcolor(FL_LIGHT2);
        Reverb4->maximum(127);
        Reverb4->step(1);
        Reverb4->callback((Fl_Callback*)cb_Reverb4);
      } // Fl_Dial* Reverb4
      { Chorus4 = new Fl_Dial(300, 515, 35, 35, gettext("Chorus"));
        Chorus4->box(FL_GTK_ROUND_UP_BOX);
        Chorus4->color(FL_DARK1);
        Chorus4->selection_color((Fl_Color)4);
        Chorus4->labelsize(9);
        Chorus4->labelcolor(FL_LIGHT2);
        Chorus4->maximum(127);
        Chorus4->step(1);
        Chorus4->callback((Fl_Callback*)cb_Chorus4);
      } // Fl_Dial* Chorus4
      { Vol4 = new Fl_Slider(300, 565, 35, 140);
        Vol4->type(4);
        Vol4->box(FL_GTK_DOWN_BOX);
        Vol4->color((Fl_Color)43);
        Vol4->selection_color((Fl_Color)12);
        Vol4->minimum(127);
        Vol4->maximum(0);
        Vol4->step(1);
        Vol4->callback((Fl_Callback*)cb_Vol4);
      } // Fl_Slider* Vol4
      { On4 = new Fl_Button(300, 365, 40, 25, gettext("On"));
        On4->type(1);
        On4->box(FL_PLASTIC_THIN_UP_BOX);
        On4->shortcut(0x35);
        On4->color((Fl_Color)11);
        On4->selection_color((Fl_Color)3);
        On4->labelsize(13);
        On4->callback((Fl_Callback*)cb_On4);
        On4->align(Fl_Align(FL_ALIGN_CLIP));
      } // Fl_Button* On4
      { Solo4 = new Fl_Button(293, 395, 25, 15, gettext("Solo"));
        Solo4->type(1);
        Solo4->box(FL_PLASTIC_THIN_UP_BOX);
        Solo4->color((Fl_Color)11);
        Solo4->selection_color((Fl_Color)3);
        Solo4->labelsize(8);
        Solo4->callback((Fl_Callback*)cb_Solo4);
        Solo4->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* Solo4
      { More4 = new Fl_Button(321, 395, 25, 15, gettext("+"));
        More4->type(1);
        More4->box(FL_PLASTIC_THIN_UP_BOX);
        More4->color((Fl_Color)11);
        More4->selection_color((Fl_Color)3);
        More4->labelsize(8);
        More4->callback((Fl_Callback*)cb_More4);
        More4->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* More4
      { DP4 = new Fl_Box(286, 710, 66, 25, gettext("Piano"));
        DP4->box(FL_PLASTIC_DOWN_BOX);
        DP4->color((Fl_Color)230);
        DP4->labelsize(9);
        DP4->labelcolor((Fl_Color)1);
        DP4->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DP4
      { Fl_Box* o = new Fl_Box(285, 335, 70, 25, gettext("Right 3"));
        o->labelsize(15);
        o->labelcolor(FL_LIGHT2);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { P4 = new Fl_Counter(286, 750, 64, 20, gettext("Program"));
        P4->type(1);
        P4->box(FL_NO_BOX);
        P4->color((Fl_Color)44);
        P4->labelsize(9);
        P4->labelcolor(FL_LIGHT2);
        P4->minimum(0);
        P4->maximum(127);
        P4->step(1);
        P4->textcolor(FL_BACKGROUND2_COLOR);
        P4->callback((Fl_Callback*)cb_P4);
        P4->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* P4
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(515, 325, 75, 450);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)44);
      { Pan9 = new Fl_Dial(531, 415, 35, 35, gettext("Pan"));
        Pan9->box(FL_GTK_ROUND_UP_BOX);
        Pan9->color(FL_DARK1);
        Pan9->selection_color((Fl_Color)1);
        Pan9->labelsize(9);
        Pan9->labelcolor(FL_LIGHT2);
        Pan9->maximum(127);
        Pan9->step(1);
        Pan9->value(64);
        Pan9->callback((Fl_Callback*)cb_Pan9);
        Pan9->align(Fl_Align(66));
      } // Fl_Dial* Pan9
      { Reverb9 = new Fl_Dial(531, 465, 35, 35, gettext("Reverb"));
        Reverb9->box(FL_GTK_ROUND_UP_BOX);
        Reverb9->color(FL_DARK1);
        Reverb9->selection_color((Fl_Color)4);
        Reverb9->labelsize(9);
        Reverb9->labelcolor(FL_LIGHT2);
        Reverb9->maximum(127);
        Reverb9->step(1);
        Reverb9->callback((Fl_Callback*)cb_Reverb9);
      } // Fl_Dial* Reverb9
      { Chorus9 = new Fl_Dial(531, 515, 35, 35, gettext("Chorus"));
        Chorus9->box(FL_GTK_ROUND_UP_BOX);
        Chorus9->color(FL_DARK1);
        Chorus9->selection_color((Fl_Color)4);
        Chorus9->labelsize(9);
        Chorus9->labelcolor(FL_LIGHT2);
        Chorus9->maximum(127);
        Chorus9->step(1);
        Chorus9->callback((Fl_Callback*)cb_Chorus9);
      } // Fl_Dial* Chorus9
      { Vol9 = new Fl_Slider(531, 565, 35, 140);
        Vol9->type(4);
        Vol9->box(FL_GTK_DOWN_BOX);
        Vol9->color((Fl_Color)43);
        Vol9->selection_color((Fl_Color)12);
        Vol9->minimum(127);
        Vol9->maximum(0);
        Vol9->step(1);
        Vol9->callback((Fl_Callback*)cb_Vol9);
      } // Fl_Slider* Vol9
      { On9 = new Fl_Button(531, 365, 40, 25, gettext("On"));
        On9->type(1);
        On9->box(FL_PLASTIC_THIN_UP_BOX);
        On9->shortcut(0x36);
        On9->color((Fl_Color)11);
        On9->selection_color((Fl_Color)3);
        On9->labelsize(13);
        On9->callback((Fl_Callback*)cb_On9);
        On9->align(Fl_Align(FL_ALIGN_CLIP));
      } // Fl_Button* On9
      { Solo9 = new Fl_Button(524, 395, 25, 15, gettext("Solo"));
        Solo9->type(1);
        Solo9->box(FL_PLASTIC_THIN_UP_BOX);
        Solo9->color((Fl_Color)11);
        Solo9->selection_color((Fl_Color)3);
        Solo9->labelsize(8);
        Solo9->callback((Fl_Callback*)cb_Solo9);
        Solo9->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* Solo9
      { More9 = new Fl_Button(552, 395, 25, 15, gettext("+"));
        More9->type(1);
        More9->box(FL_PLASTIC_THIN_UP_BOX);
        More9->color((Fl_Color)11);
        More9->selection_color((Fl_Color)3);
        More9->labelsize(8);
        More9->callback((Fl_Callback*)cb_More9);
        More9->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* More9
      { DP9 = new Fl_Box(516, 710, 70, 25, gettext("Piano"));
        DP9->box(FL_PLASTIC_DOWN_BOX);
        DP9->color((Fl_Color)230);
        DP9->labelsize(9);
        DP9->labelcolor((Fl_Color)1);
        DP9->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DP9
      { Fl_Box* o = new Fl_Box(519, 335, 65, 25, gettext("Drums"));
        o->labelsize(15);
        o->labelcolor(FL_LIGHT2);
      } // Fl_Box* o
      { VumCanal9 = new Fl_Group(571, 558, 11, 152);
        VumCanal9->color(FL_DARK1);
        { Fl_Box* o = new Fl_Box(572, 685, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(572, 665, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(572, 645, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(572, 625, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(572, 605, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(572, 585, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)82);
          o->selection_color((Fl_Color)133);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(572, 565, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)80);
          o->selection_color((Fl_Color)1);
        } // Fl_Box* o
        VumCanal9->end();
      } // Fl_Group* VumCanal9
      { P9 = new Fl_Counter(520, 750, 64, 19, gettext("Program"));
        P9->type(1);
        P9->box(FL_NO_BOX);
        P9->color((Fl_Color)44);
        P9->labelsize(9);
        P9->labelcolor(FL_LIGHT2);
        P9->minimum(0);
        P9->maximum(127);
        P9->step(1);
        P9->textcolor(FL_BACKGROUND2_COLOR);
        P9->callback((Fl_Callback*)cb_P9);
        P9->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* P9
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(586, 325, 74, 450);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)44);
      { Pan10 = new Fl_Dial(604, 415, 35, 35, gettext("Pan"));
        Pan10->box(FL_GTK_ROUND_UP_BOX);
        Pan10->color(FL_DARK1);
        Pan10->selection_color((Fl_Color)1);
        Pan10->labelsize(9);
        Pan10->labelcolor(FL_LIGHT2);
        Pan10->maximum(127);
        Pan10->step(1);
        Pan10->value(64);
        Pan10->callback((Fl_Callback*)cb_Pan10);
        Pan10->align(Fl_Align(66));
      } // Fl_Dial* Pan10
      { Reverb10 = new Fl_Dial(604, 465, 35, 35, gettext("Reverb"));
        Reverb10->box(FL_GTK_ROUND_UP_BOX);
        Reverb10->color(FL_DARK1);
        Reverb10->selection_color((Fl_Color)4);
        Reverb10->labelsize(9);
        Reverb10->labelcolor(FL_LIGHT2);
        Reverb10->maximum(127);
        Reverb10->step(1);
        Reverb10->callback((Fl_Callback*)cb_Reverb10);
      } // Fl_Dial* Reverb10
      { Chorus10 = new Fl_Dial(604, 515, 35, 35, gettext("Chorus"));
        Chorus10->box(FL_GTK_ROUND_UP_BOX);
        Chorus10->color(FL_DARK1);
        Chorus10->selection_color((Fl_Color)4);
        Chorus10->labelsize(9);
        Chorus10->labelcolor(FL_LIGHT2);
        Chorus10->maximum(127);
        Chorus10->step(1);
        Chorus10->callback((Fl_Callback*)cb_Chorus10);
      } // Fl_Dial* Chorus10
      { Vol10 = new Fl_Slider(602, 565, 35, 140);
        Vol10->type(4);
        Vol10->box(FL_GTK_DOWN_BOX);
        Vol10->color((Fl_Color)43);
        Vol10->selection_color((Fl_Color)12);
        Vol10->minimum(127);
        Vol10->maximum(0);
        Vol10->step(1);
        Vol10->callback((Fl_Callback*)cb_Vol10);
      } // Fl_Slider* Vol10
      { On10 = new Fl_Button(604, 365, 40, 25, gettext("On"));
        On10->type(1);
        On10->box(FL_PLASTIC_THIN_UP_BOX);
        On10->shortcut(0x37);
        On10->color((Fl_Color)11);
        On10->selection_color((Fl_Color)3);
        On10->labelsize(13);
        On10->callback((Fl_Callback*)cb_On10);
        On10->align(Fl_Align(FL_ALIGN_CLIP));
      } // Fl_Button* On10
      { Solo10 = new Fl_Button(597, 395, 25, 15, gettext("Solo"));
        Solo10->type(1);
        Solo10->box(FL_PLASTIC_THIN_UP_BOX);
        Solo10->color((Fl_Color)11);
        Solo10->selection_color((Fl_Color)3);
        Solo10->labelsize(8);
        Solo10->callback((Fl_Callback*)cb_Solo10);
        Solo10->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* Solo10
      { More10 = new Fl_Button(625, 395, 25, 15, gettext("+"));
        More10->type(1);
        More10->box(FL_PLASTIC_THIN_UP_BOX);
        More10->color((Fl_Color)11);
        More10->selection_color((Fl_Color)3);
        More10->labelsize(8);
        More10->callback((Fl_Callback*)cb_More10);
        More10->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* More10
      { DP10 = new Fl_Box(587, 710, 70, 25, gettext("Piano"));
        DP10->box(FL_PLASTIC_DOWN_BOX);
        DP10->color((Fl_Color)230);
        DP10->labelsize(9);
        DP10->labelcolor((Fl_Color)1);
        DP10->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DP10
      { Fl_Box* o = new Fl_Box(590, 335, 65, 25, gettext("Bass"));
        o->labelsize(15);
        o->labelcolor(FL_LIGHT2);
      } // Fl_Box* o
      { VumCanal10 = new Fl_Group(643, 558, 10, 152);
        { Fl_Box* o = new Fl_Box(643, 685, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(643, 665, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(643, 645, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(643, 625, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(643, 605, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(643, 585, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)82);
          o->selection_color((Fl_Color)133);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(643, 565, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)80);
          o->selection_color((Fl_Color)1);
        } // Fl_Box* o
        VumCanal10->end();
      } // Fl_Group* VumCanal10
      { P10 = new Fl_Counter(590, 750, 62, 15, gettext("Program"));
        P10->type(1);
        P10->box(FL_NO_BOX);
        P10->color((Fl_Color)44);
        P10->labelsize(9);
        P10->labelcolor(FL_LIGHT2);
        P10->minimum(0);
        P10->maximum(127);
        P10->step(1);
        P10->textcolor(FL_BACKGROUND2_COLOR);
        P10->callback((Fl_Callback*)cb_P10);
        P10->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* P10
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(657, 325, 73, 450);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)44);
      { Pan11 = new Fl_Dial(674, 415, 35, 35, gettext("Pan"));
        Pan11->box(FL_GTK_ROUND_UP_BOX);
        Pan11->color(FL_DARK1);
        Pan11->selection_color((Fl_Color)1);
        Pan11->labelsize(9);
        Pan11->labelcolor(FL_LIGHT2);
        Pan11->maximum(127);
        Pan11->step(1);
        Pan11->value(64);
        Pan11->callback((Fl_Callback*)cb_Pan11);
        Pan11->align(Fl_Align(66));
      } // Fl_Dial* Pan11
      { Reverb11 = new Fl_Dial(674, 465, 35, 35, gettext("Reverb"));
        Reverb11->box(FL_GTK_ROUND_UP_BOX);
        Reverb11->color(FL_DARK1);
        Reverb11->selection_color((Fl_Color)4);
        Reverb11->labelsize(9);
        Reverb11->labelcolor(FL_LIGHT2);
        Reverb11->maximum(127);
        Reverb11->step(1);
        Reverb11->callback((Fl_Callback*)cb_Reverb11);
      } // Fl_Dial* Reverb11
      { Chorus11 = new Fl_Dial(674, 515, 35, 35, gettext("Chorus"));
        Chorus11->box(FL_GTK_ROUND_UP_BOX);
        Chorus11->color(FL_DARK1);
        Chorus11->selection_color((Fl_Color)4);
        Chorus11->labelsize(9);
        Chorus11->labelcolor(FL_LIGHT2);
        Chorus11->maximum(127);
        Chorus11->step(1);
        Chorus11->callback((Fl_Callback*)cb_Chorus11);
      } // Fl_Dial* Chorus11
      { Vol11 = new Fl_Slider(674, 565, 35, 140);
        Vol11->type(4);
        Vol11->box(FL_GTK_DOWN_BOX);
        Vol11->color((Fl_Color)43);
        Vol11->selection_color((Fl_Color)12);
        Vol11->minimum(127);
        Vol11->maximum(0);
        Vol11->step(1);
        Vol11->callback((Fl_Callback*)cb_Vol11);
      } // Fl_Slider* Vol11
      { On11 = new Fl_Button(674, 365, 40, 25, gettext("On"));
        On11->type(1);
        On11->box(FL_PLASTIC_THIN_UP_BOX);
        On11->shortcut(0x38);
        On11->color((Fl_Color)11);
        On11->selection_color((Fl_Color)3);
        On11->labelsize(13);
        On11->callback((Fl_Callback*)cb_On11);
        On11->align(Fl_Align(FL_ALIGN_CLIP));
      } // Fl_Button* On11
      { Solo11 = new Fl_Button(667, 395, 25, 15, gettext("Solo"));
        Solo11->type(1);
        Solo11->box(FL_PLASTIC_THIN_UP_BOX);
        Solo11->color((Fl_Color)11);
        Solo11->selection_color((Fl_Color)3);
        Solo11->labelsize(8);
        Solo11->callback((Fl_Callback*)cb_Solo11);
        Solo11->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* Solo11
      { More11 = new Fl_Button(695, 395, 25, 15, gettext("+"));
        More11->type(1);
        More11->box(FL_PLASTIC_THIN_UP_BOX);
        More11->color((Fl_Color)11);
        More11->selection_color((Fl_Color)3);
        More11->labelsize(8);
        More11->callback((Fl_Callback*)cb_More11);
        More11->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* More11
      { DP11 = new Fl_Box(658, 710, 70, 25, gettext("Piano"));
        DP11->box(FL_PLASTIC_DOWN_BOX);
        DP11->color((Fl_Color)230);
        DP11->labelsize(9);
        DP11->labelcolor((Fl_Color)1);
        DP11->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DP11
      { Fl_Box* o = new Fl_Box(659, 335, 71, 25, gettext("Acc 1"));
        o->labelsize(15);
        o->labelcolor(FL_LIGHT2);
      } // Fl_Box* o
      { VumCanal11 = new Fl_Group(714, 558, 10, 147);
        { Fl_Box* o = new Fl_Box(714, 685, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(714, 665, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(714, 645, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(714, 625, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(714, 605, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(714, 585, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)82);
          o->selection_color((Fl_Color)133);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(714, 565, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)80);
          o->selection_color((Fl_Color)1);
        } // Fl_Box* o
        VumCanal11->end();
      } // Fl_Group* VumCanal11
      { P11 = new Fl_Counter(660, 750, 62, 20, gettext("Program"));
        P11->type(1);
        P11->box(FL_NO_BOX);
        P11->color((Fl_Color)44);
        P11->labelsize(9);
        P11->labelcolor(FL_LIGHT2);
        P11->minimum(0);
        P11->maximum(127);
        P11->step(1);
        P11->textcolor(FL_BACKGROUND2_COLOR);
        P11->callback((Fl_Callback*)cb_P11);
        P11->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* P11
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(728, 325, 72, 450);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)44);
      { Pan12 = new Fl_Dial(745, 415, 35, 35, gettext("Pan"));
        Pan12->box(FL_GTK_ROUND_UP_BOX);
        Pan12->color(FL_DARK1);
        Pan12->selection_color((Fl_Color)1);
        Pan12->labelsize(9);
        Pan12->labelcolor(FL_LIGHT2);
        Pan12->maximum(127);
        Pan12->step(1);
        Pan12->value(64);
        Pan12->callback((Fl_Callback*)cb_Pan12);
        Pan12->align(Fl_Align(66));
      } // Fl_Dial* Pan12
      { Reverb12 = new Fl_Dial(745, 465, 35, 35, gettext("Reverb"));
        Reverb12->box(FL_GTK_ROUND_UP_BOX);
        Reverb12->color(FL_DARK1);
        Reverb12->selection_color((Fl_Color)4);
        Reverb12->labelsize(9);
        Reverb12->labelcolor(FL_LIGHT2);
        Reverb12->maximum(127);
        Reverb12->step(1);
        Reverb12->callback((Fl_Callback*)cb_Reverb12);
      } // Fl_Dial* Reverb12
      { Chorus12 = new Fl_Dial(745, 515, 35, 35, gettext("Chorus"));
        Chorus12->box(FL_GTK_ROUND_UP_BOX);
        Chorus12->color(FL_DARK1);
        Chorus12->selection_color((Fl_Color)4);
        Chorus12->labelsize(9);
        Chorus12->labelcolor(FL_LIGHT2);
        Chorus12->maximum(127);
        Chorus12->step(1);
        Chorus12->callback((Fl_Callback*)cb_Chorus12);
      } // Fl_Dial* Chorus12
      { Vol12 = new Fl_Slider(745, 565, 35, 140);
        Vol12->type(4);
        Vol12->box(FL_GTK_DOWN_BOX);
        Vol12->color((Fl_Color)43);
        Vol12->selection_color((Fl_Color)12);
        Vol12->minimum(127);
        Vol12->maximum(0);
        Vol12->step(1);
        Vol12->callback((Fl_Callback*)cb_Vol12);
      } // Fl_Slider* Vol12
      { On12 = new Fl_Button(745, 365, 40, 25, gettext("On"));
        On12->type(1);
        On12->box(FL_PLASTIC_THIN_UP_BOX);
        On12->shortcut(0x39);
        On12->color((Fl_Color)11);
        On12->selection_color((Fl_Color)3);
        On12->labelsize(13);
        On12->callback((Fl_Callback*)cb_On12);
        On12->align(Fl_Align(FL_ALIGN_CLIP));
      } // Fl_Button* On12
      { Solo12 = new Fl_Button(738, 395, 25, 15, gettext("Solo"));
        Solo12->type(1);
        Solo12->box(FL_PLASTIC_THIN_UP_BOX);
        Solo12->color((Fl_Color)11);
        Solo12->selection_color((Fl_Color)3);
        Solo12->labelsize(8);
        Solo12->callback((Fl_Callback*)cb_Solo12);
        Solo12->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* Solo12
      { More12 = new Fl_Button(766, 395, 25, 15, gettext("+"));
        More12->type(1);
        More12->box(FL_PLASTIC_THIN_UP_BOX);
        More12->color((Fl_Color)11);
        More12->selection_color((Fl_Color)3);
        More12->labelsize(8);
        More12->callback((Fl_Callback*)cb_More12);
        More12->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* More12
      { DP12 = new Fl_Box(730, 710, 70, 25, gettext("Piano"));
        DP12->box(FL_PLASTIC_DOWN_BOX);
        DP12->color((Fl_Color)230);
        DP12->labelsize(9);
        DP12->labelcolor((Fl_Color)1);
        DP12->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DP12
      { Fl_Box* o = new Fl_Box(730, 335, 70, 25, gettext("Acc 2"));
        o->labelsize(15);
        o->labelcolor(FL_LIGHT2);
      } // Fl_Box* o
      { VumCanal12 = new Fl_Group(785, 558, 10, 147);
        { Fl_Box* o = new Fl_Box(785, 685, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(785, 665, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(785, 645, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(785, 625, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(785, 605, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(785, 585, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)82);
          o->selection_color((Fl_Color)133);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(785, 565, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)80);
          o->selection_color((Fl_Color)1);
        } // Fl_Box* o
        VumCanal12->end();
      } // Fl_Group* VumCanal12
      { P12 = new Fl_Counter(730, 750, 62, 21, gettext("Program"));
        P12->type(1);
        P12->box(FL_NO_BOX);
        P12->color((Fl_Color)44);
        P12->labelsize(9);
        P12->labelcolor(FL_LIGHT2);
        P12->minimum(0);
        P12->maximum(127);
        P12->step(1);
        P12->textcolor(FL_BACKGROUND2_COLOR);
        P12->callback((Fl_Callback*)cb_P12);
        P12->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* P12
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(799, 325, 71, 450);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)44);
      { Pan13 = new Fl_Dial(815, 415, 35, 35, gettext("Pan"));
        Pan13->box(FL_GTK_ROUND_UP_BOX);
        Pan13->color(FL_DARK1);
        Pan13->selection_color((Fl_Color)1);
        Pan13->labelsize(9);
        Pan13->labelcolor(FL_LIGHT2);
        Pan13->maximum(127);
        Pan13->step(1);
        Pan13->value(64);
        Pan13->callback((Fl_Callback*)cb_Pan13);
        Pan13->align(Fl_Align(66));
      } // Fl_Dial* Pan13
      { Reverb13 = new Fl_Dial(815, 465, 35, 35, gettext("Reverb"));
        Reverb13->box(FL_GTK_ROUND_UP_BOX);
        Reverb13->color(FL_DARK1);
        Reverb13->selection_color((Fl_Color)4);
        Reverb13->labelsize(9);
        Reverb13->labelcolor(FL_LIGHT2);
        Reverb13->maximum(127);
        Reverb13->step(1);
        Reverb13->callback((Fl_Callback*)cb_Reverb13);
      } // Fl_Dial* Reverb13
      { Chorus13 = new Fl_Dial(815, 515, 35, 35, gettext("Chorus"));
        Chorus13->box(FL_GTK_ROUND_UP_BOX);
        Chorus13->color(FL_DARK1);
        Chorus13->selection_color((Fl_Color)4);
        Chorus13->labelsize(9);
        Chorus13->labelcolor(FL_LIGHT2);
        Chorus13->maximum(127);
        Chorus13->step(1);
        Chorus13->callback((Fl_Callback*)cb_Chorus13);
      } // Fl_Dial* Chorus13
      { Vol13 = new Fl_Slider(815, 565, 35, 140);
        Vol13->type(4);
        Vol13->box(FL_GTK_DOWN_BOX);
        Vol13->color((Fl_Color)43);
        Vol13->selection_color((Fl_Color)12);
        Vol13->minimum(127);
        Vol13->maximum(0);
        Vol13->step(1);
        Vol13->callback((Fl_Callback*)cb_Vol13);
      } // Fl_Slider* Vol13
      { On13 = new Fl_Button(815, 365, 40, 25, gettext("On"));
        On13->type(1);
        On13->box(FL_PLASTIC_THIN_UP_BOX);
        On13->shortcut(0x30);
        On13->color((Fl_Color)11);
        On13->selection_color((Fl_Color)3);
        On13->labelsize(13);
        On13->callback((Fl_Callback*)cb_On13);
        On13->align(Fl_Align(FL_ALIGN_CLIP));
      } // Fl_Button* On13
      { Solo13 = new Fl_Button(808, 395, 25, 15, gettext("Solo"));
        Solo13->type(1);
        Solo13->box(FL_PLASTIC_THIN_UP_BOX);
        Solo13->color((Fl_Color)11);
        Solo13->selection_color((Fl_Color)3);
        Solo13->labelsize(8);
        Solo13->callback((Fl_Callback*)cb_Solo13);
        Solo13->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* Solo13
      { More13 = new Fl_Button(836, 395, 25, 15, gettext("+"));
        More13->type(1);
        More13->box(FL_PLASTIC_THIN_UP_BOX);
        More13->color((Fl_Color)11);
        More13->selection_color((Fl_Color)3);
        More13->labelsize(8);
        More13->callback((Fl_Callback*)cb_More13);
        More13->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* More13
      { DP13 = new Fl_Box(800, 710, 70, 25, gettext("Piano"));
        DP13->box(FL_PLASTIC_DOWN_BOX);
        DP13->color((Fl_Color)230);
        DP13->labelsize(9);
        DP13->labelcolor((Fl_Color)1);
        DP13->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DP13
      { Fl_Box* o = new Fl_Box(800, 335, 70, 25, gettext("Acc 3"));
        o->labelsize(15);
        o->labelcolor(FL_LIGHT2);
      } // Fl_Box* o
      { VumCanal13 = new Fl_Group(855, 558, 10, 147);
        { Fl_Box* o = new Fl_Box(855, 685, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(855, 665, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(855, 645, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(855, 625, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(855, 605, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(855, 585, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)82);
          o->selection_color((Fl_Color)133);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(855, 565, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)80);
          o->selection_color((Fl_Color)1);
        } // Fl_Box* o
        VumCanal13->end();
      } // Fl_Group* VumCanal13
      { P13 = new Fl_Counter(800, 750, 62, 20, gettext("Program"));
        P13->type(1);
        P13->box(FL_NO_BOX);
        P13->color((Fl_Color)44);
        P13->labelsize(9);
        P13->labelcolor(FL_LIGHT2);
        P13->minimum(0);
        P13->maximum(127);
        P13->step(1);
        P13->textcolor(FL_BACKGROUND2_COLOR);
        P13->callback((Fl_Callback*)cb_P13);
        P13->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* P13
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(870, 325, 70, 450);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)44);
      { Pan14 = new Fl_Dial(885, 415, 35, 35, gettext("Pan"));
        Pan14->box(FL_GTK_ROUND_UP_BOX);
        Pan14->color(FL_DARK1);
        Pan14->selection_color((Fl_Color)1);
        Pan14->labelsize(9);
        Pan14->labelcolor(FL_LIGHT2);
        Pan14->maximum(127);
        Pan14->step(1);
        Pan14->value(64);
        Pan14->callback((Fl_Callback*)cb_Pan14);
        Pan14->align(Fl_Align(66));
      } // Fl_Dial* Pan14
      { Reverb14 = new Fl_Dial(885, 465, 35, 35, gettext("Reverb"));
        Reverb14->box(FL_GTK_ROUND_UP_BOX);
        Reverb14->color(FL_DARK1);
        Reverb14->selection_color((Fl_Color)4);
        Reverb14->labelsize(9);
        Reverb14->labelcolor(FL_LIGHT2);
        Reverb14->maximum(127);
        Reverb14->step(1);
        Reverb14->callback((Fl_Callback*)cb_Reverb14);
      } // Fl_Dial* Reverb14
      { Chorus14 = new Fl_Dial(885, 515, 35, 35, gettext("Chorus"));
        Chorus14->box(FL_GTK_ROUND_UP_BOX);
        Chorus14->color(FL_DARK1);
        Chorus14->selection_color((Fl_Color)4);
        Chorus14->labelsize(9);
        Chorus14->labelcolor(FL_LIGHT2);
        Chorus14->maximum(127);
        Chorus14->step(1);
        Chorus14->callback((Fl_Callback*)cb_Chorus14);
      } // Fl_Dial* Chorus14
      { Vol14 = new Fl_Slider(885, 565, 35, 140);
        Vol14->type(4);
        Vol14->box(FL_GTK_DOWN_BOX);
        Vol14->color((Fl_Color)43);
        Vol14->selection_color((Fl_Color)12);
        Vol14->minimum(127);
        Vol14->maximum(0);
        Vol14->step(1);
        Vol14->callback((Fl_Callback*)cb_Vol14);
      } // Fl_Slider* Vol14
      { On14 = new Fl_Button(885, 365, 40, 25, gettext("On"));
        On14->type(1);
        On14->box(FL_PLASTIC_THIN_UP_BOX);
        On14->shortcut(0x27);
        On14->color((Fl_Color)11);
        On14->selection_color((Fl_Color)3);
        On14->labelsize(13);
        On14->callback((Fl_Callback*)cb_On14);
        On14->align(Fl_Align(FL_ALIGN_CLIP));
      } // Fl_Button* On14
      { Solo14 = new Fl_Button(878, 395, 25, 15, gettext("Solo"));
        Solo14->type(1);
        Solo14->box(FL_PLASTIC_THIN_UP_BOX);
        Solo14->color((Fl_Color)11);
        Solo14->selection_color((Fl_Color)3);
        Solo14->labelsize(8);
        Solo14->callback((Fl_Callback*)cb_Solo14);
        Solo14->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* Solo14
      { More14 = new Fl_Button(906, 395, 25, 15, gettext("+"));
        More14->type(1);
        More14->box(FL_PLASTIC_THIN_UP_BOX);
        More14->color((Fl_Color)11);
        More14->selection_color((Fl_Color)3);
        More14->labelsize(8);
        More14->callback((Fl_Callback*)cb_More14);
        More14->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* More14
      { DP14 = new Fl_Box(870, 710, 70, 25, gettext("Piano"));
        DP14->box(FL_PLASTIC_DOWN_BOX);
        DP14->color((Fl_Color)230);
        DP14->labelsize(9);
        DP14->labelcolor((Fl_Color)1);
        DP14->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DP14
      { Fl_Box* o = new Fl_Box(870, 335, 70, 25, gettext("Acc 4"));
        o->labelsize(15);
        o->labelcolor(FL_LIGHT2);
      } // Fl_Box* o
      { VumCanal14 = new Fl_Group(925, 558, 10, 147);
        { Fl_Box* o = new Fl_Box(925, 685, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(925, 665, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(925, 645, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(925, 625, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(925, 605, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(925, 585, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)82);
          o->selection_color((Fl_Color)133);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(925, 565, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)80);
          o->selection_color((Fl_Color)1);
        } // Fl_Box* o
        VumCanal14->end();
      } // Fl_Group* VumCanal14
      { P14 = new Fl_Counter(870, 750, 62, 21, gettext("Program"));
        P14->type(1);
        P14->box(FL_NO_BOX);
        P14->color((Fl_Color)44);
        P14->labelsize(9);
        P14->labelcolor(FL_LIGHT2);
        P14->minimum(0);
        P14->maximum(127);
        P14->step(1);
        P14->textcolor(FL_BACKGROUND2_COLOR);
        P14->callback((Fl_Callback*)cb_P14);
        P14->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* P14
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(940, 325, 71, 450);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)44);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Pan15 = new Fl_Dial(955, 415, 35, 35, gettext("Pan"));
        Pan15->box(FL_GTK_ROUND_UP_BOX);
        Pan15->color(FL_DARK1);
        Pan15->selection_color((Fl_Color)1);
        Pan15->labelsize(9);
        Pan15->labelcolor(FL_LIGHT2);
        Pan15->maximum(127);
        Pan15->step(1);
        Pan15->value(64);
        Pan15->callback((Fl_Callback*)cb_Pan15);
        Pan15->align(Fl_Align(66));
      } // Fl_Dial* Pan15
      { Reverb15 = new Fl_Dial(955, 465, 35, 35, gettext("Reverb"));
        Reverb15->box(FL_GTK_ROUND_UP_BOX);
        Reverb15->color(FL_DARK1);
        Reverb15->selection_color((Fl_Color)4);
        Reverb15->labelsize(9);
        Reverb15->labelcolor(FL_LIGHT2);
        Reverb15->maximum(127);
        Reverb15->step(1);
        Reverb15->callback((Fl_Callback*)cb_Reverb15);
      } // Fl_Dial* Reverb15
      { Chorus15 = new Fl_Dial(955, 515, 35, 35, gettext("Chorus"));
        Chorus15->box(FL_GTK_ROUND_UP_BOX);
        Chorus15->color(FL_DARK1);
        Chorus15->selection_color((Fl_Color)4);
        Chorus15->labelsize(9);
        Chorus15->labelcolor(FL_LIGHT2);
        Chorus15->maximum(127);
        Chorus15->step(1);
        Chorus15->callback((Fl_Callback*)cb_Chorus15);
      } // Fl_Dial* Chorus15
      { Vol15 = new Fl_Slider(955, 565, 35, 140);
        Vol15->type(4);
        Vol15->box(FL_GTK_DOWN_BOX);
        Vol15->color((Fl_Color)43);
        Vol15->selection_color((Fl_Color)12);
        Vol15->minimum(127);
        Vol15->maximum(0);
        Vol15->step(1);
        Vol15->callback((Fl_Callback*)cb_Vol15);
      } // Fl_Slider* Vol15
      { On15 = new Fl_Button(955, 365, 40, 25, gettext("On"));
        On15->type(1);
        On15->box(FL_PLASTIC_THIN_UP_BOX);
        On15->shortcut(0xa1);
        On15->color((Fl_Color)11);
        On15->selection_color((Fl_Color)3);
        On15->labelsize(13);
        On15->callback((Fl_Callback*)cb_On15);
        On15->align(Fl_Align(FL_ALIGN_CLIP));
      } // Fl_Button* On15
      { Solo15 = new Fl_Button(948, 395, 25, 15, gettext("Solo"));
        Solo15->type(1);
        Solo15->box(FL_PLASTIC_THIN_UP_BOX);
        Solo15->color((Fl_Color)11);
        Solo15->selection_color((Fl_Color)3);
        Solo15->labelsize(8);
        Solo15->callback((Fl_Callback*)cb_Solo15);
        Solo15->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* Solo15
      { More15 = new Fl_Button(976, 395, 25, 15, gettext("+"));
        More15->type(1);
        More15->box(FL_PLASTIC_THIN_UP_BOX);
        More15->color((Fl_Color)11);
        More15->selection_color((Fl_Color)3);
        More15->labelsize(8);
        More15->callback((Fl_Callback*)cb_More15);
        More15->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Button* More15
      { DP15 = new Fl_Box(940, 710, 70, 25, gettext("Piano"));
        DP15->box(FL_PLASTIC_DOWN_BOX);
        DP15->color((Fl_Color)230);
        DP15->labelsize(9);
        DP15->labelcolor((Fl_Color)1);
        DP15->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DP15
      { Fl_Box* o = new Fl_Box(940, 335, 70, 25, gettext("Acc 5"));
        o->labelsize(15);
        o->labelcolor(FL_LIGHT2);
      } // Fl_Box* o
      { VumCanal15 = new Fl_Group(995, 558, 10, 147);
        { Fl_Box* o = new Fl_Box(995, 685, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(995, 665, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(995, 645, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(995, 625, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(995, 605, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)59);
          o->selection_color((Fl_Color)2);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(995, 585, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)82);
          o->selection_color((Fl_Color)133);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(995, 565, 10, 20);
          o->box(FL_GTK_UP_BOX);
          o->color((Fl_Color)80);
          o->selection_color((Fl_Color)1);
        } // Fl_Box* o
        VumCanal15->end();
      } // Fl_Group* VumCanal15
      { P15 = new Fl_Counter(940, 750, 64, 21, gettext("Program"));
        P15->type(1);
        P15->box(FL_NO_BOX);
        P15->color((Fl_Color)44);
        P15->labelsize(9);
        P15->labelcolor(FL_LIGHT2);
        P15->minimum(0);
        P15->maximum(127);
        P15->step(1);
        P15->textcolor(FL_BACKGROUND2_COLOR);
        P15->callback((Fl_Callback*)cb_P15);
        P15->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* P15
      o->end();
    } // Fl_Group* o
    { Menu = new Fl_Menu_Bar(0, 0, 1020, 25);
      Menu->box(FL_FLAT_BOX);
      Menu->color((Fl_Color)44);
      Menu->selection_color(FL_DARK1);
      Menu->labelcolor(FL_BACKGROUND2_COLOR);
      Menu->textcolor(FL_BACKGROUND2_COLOR);
      if (!menu_Menu_i18n_done) {
        int i=0;
        for ( ; i<30; i++)
          if (menu_Menu[i].label())
            menu_Menu[i].label(gettext(menu_Menu[i].label()));
        menu_Menu_i18n_done = 1;
      }
      Menu->menu(menu_Menu);
    } // Fl_Menu_Bar* Menu
    { ElBueno = new Fl_Group(0, 25, 1010, 250);
      ElBueno->box(FL_BORDER_BOX);
      ElBueno->color((Fl_Color)44);
      ElBueno->selection_color(FL_BACKGROUND2_COLOR);
      ElBueno->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { Fl_Group* o = new Fl_Group(812, 139, 89, 132);
        o->box(FL_BORDER_BOX);
        o->color((Fl_Color)44);
        { RTempo = new Fl_Dial(823, 185, 65, 65, gettext("Tempo"));
          RTempo->box(FL_ROUND_UP_BOX);
          RTempo->color(FL_DARK1);
          RTempo->selection_color((Fl_Color)1);
          RTempo->labelsize(11);
          RTempo->labelcolor(FL_LIGHT2);
          RTempo->minimum(20);
          RTempo->maximum(300);
          RTempo->step(1);
          RTempo->value(120);
          RTempo->callback((Fl_Callback*)cb_RTempo);
        } // Fl_Dial* RTempo
        { CTempo = new Fl_Counter(825, 160, 64, 21, gettext("Tempo"));
          CTempo->type(1);
          CTempo->box(FL_NO_BOX);
          CTempo->color((Fl_Color)44);
          CTempo->labelsize(10);
          CTempo->labelcolor(FL_LIGHT2);
          CTempo->minimum(20);
          CTempo->maximum(300);
          CTempo->step(1);
          CTempo->value(120);
          CTempo->textcolor(FL_BACKGROUND2_COLOR);
          CTempo->callback((Fl_Callback*)cb_CTempo);
          CTempo->align(Fl_Align(FL_ALIGN_TOP));
        } // Fl_Counter* CTempo
        o->end();
      } // Fl_Group* o
      { ListaStyles = new Fl_Browser(265, 50, 230, 220, gettext("Styles"));
        ListaStyles->type(2);
        ListaStyles->box(FL_GTK_THIN_DOWN_BOX);
        ListaStyles->color((Fl_Color)44);
        ListaStyles->selection_color(FL_DARK1);
        ListaStyles->labelsize(16);
        ListaStyles->labelcolor(FL_LIGHT2);
        ListaStyles->textcolor(FL_BACKGROUND2_COLOR);
        ListaStyles->callback((Fl_Callback*)cb_ListaStyles);
        ListaStyles->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Browser* ListaStyles
      { ListaSounds = new Fl_Browser(5, 50, 165, 220, gettext("Sounds"));
        ListaSounds->type(2);
        ListaSounds->box(FL_GTK_THIN_DOWN_BOX);
        ListaSounds->color((Fl_Color)44);
        ListaSounds->selection_color(FL_DARK1);
        ListaSounds->labelsize(16);
        ListaSounds->labelcolor(FL_LIGHT2);
        ListaSounds->textcolor(FL_BACKGROUND2_COLOR);
        ListaSounds->callback((Fl_Callback*)cb_ListaSounds);
        ListaSounds->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Browser* ListaSounds
      { STST = new Fl_Button(904, 215, 100, 55, gettext("Start/Stop"));
        STST->type(1);
        STST->box(FL_PLASTIC_THIN_UP_BOX);
        STST->shortcut(0x20);
        STST->down_box(FL_PLASTIC_THIN_DOWN_BOX);
        STST->color((Fl_Color)11);
        STST->selection_color((Fl_Color)3);
        STST->labelsize(11);
        STST->callback((Fl_Callback*)cb_STST);
        STST->when(FL_WHEN_CHANGED);
      } // Fl_Button* STST
      { DCompas = new Fl_Box(904, 140, 45, 40, gettext("1"));
        DCompas->box(FL_BORDER_BOX);
        DCompas->color((Fl_Color)44);
        DCompas->selection_color(FL_DARK1);
        DCompas->labelsize(20);
        DCompas->labelcolor((Fl_Color)1);
        DCompas->callback((Fl_Callback*)cb_DCompas);
        DCompas->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Box* DCompas
      { marker = new Fl_Group(905, 185, 90, 25);
        marker->box(FL_GTK_DOWN_BOX);
        marker->color((Fl_Color)44);
        marker->selection_color((Fl_Color)44);
        marker->labelcolor((Fl_Color)44);
        { N1 = new Fl_Box(906, 190, 20, 15);
          N1->box(FL_GTK_UP_BOX);
          N1->color((Fl_Color)1);
          N1->selection_color((Fl_Color)9);
        } // Fl_Box* N1
        { N2 = new Fl_Box(928, 190, 20, 15);
          N2->box(FL_GTK_UP_BOX);
          N2->color((Fl_Color)2);
          N2->selection_color((Fl_Color)10);
        } // Fl_Box* N2
        { N3 = new Fl_Box(950, 190, 20, 15);
          N3->box(FL_GTK_UP_BOX);
          N3->color((Fl_Color)2);
          N3->selection_color((Fl_Color)10);
        } // Fl_Box* N3
        { N4 = new Fl_Box(972, 190, 20, 15);
          N4->box(FL_GTK_UP_BOX);
          N4->color((Fl_Color)2);
          N4->selection_color((Fl_Color)10);
        } // Fl_Box* N4
        marker->end();
      } // Fl_Group* marker
      { Fl_Group* o = new Fl_Group(175, 30, 85, 40);
        { Sso = new Fl_Button(175, 35, 40, 35, gettext("@<-"));
          Sso->type(102);
          Sso->box(FL_PLASTIC_THIN_UP_BOX);
          Sso->color((Fl_Color)9);
          Sso->selection_color((Fl_Color)1);
          Sso->labelcolor((Fl_Color)1);
          Sso->callback((Fl_Callback*)cb_Sso);
        } // Fl_Button* Sso
        { Sst = new Fl_Button(220, 35, 40, 35, gettext("@->"));
          Sst->type(102);
          Sst->box(FL_PLASTIC_THIN_UP_BOX);
          Sst->color((Fl_Color)9);
          Sst->selection_color((Fl_Color)1);
          Sst->labelcolor((Fl_Color)1);
          Sst->callback((Fl_Callback*)cb_Sst);
        } // Fl_Button* Sst
        o->end();
      } // Fl_Group* o
      { DMidi = new Fl_Slider(785, 40, 20, 40, gettext("Midi In"));
        DMidi->type(2);
        DMidi->box(FL_BORDER_BOX);
        DMidi->color(FL_FOREGROUND_COLOR);
        DMidi->selection_color((Fl_Color)2);
        DMidi->labelsize(11);
        DMidi->labelcolor(FL_LIGHT2);
        DMidi->minimum(127);
        DMidi->maximum(0);
        DMidi->step(1);
        DMidi->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Slider* DMidi
      { Dsel = new Fl_Box(175, 75, 85, 25);
        Dsel->box(FL_BORDER_BOX);
        Dsel->color(FL_DARK1);
        Dsel->labelcolor((Fl_Color)1);
        Dsel->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* Dsel
      { VolKeyb = new Fl_Slider(175, 115, 35, 155, gettext("Keyb"));
        VolKeyb->type(4);
        VolKeyb->box(FL_GTK_DOWN_BOX);
        VolKeyb->color((Fl_Color)43);
        VolKeyb->selection_color((Fl_Color)1);
        VolKeyb->labelsize(11);
        VolKeyb->labelcolor(FL_LIGHT2);
        VolKeyb->minimum(127);
        VolKeyb->maximum(0);
        VolKeyb->step(1);
        VolKeyb->value(100);
        VolKeyb->callback((Fl_Callback*)cb_VolKeyb);
        VolKeyb->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Slider* VolKeyb
      { CTranspose = new Fl_Counter(915, 49, 64, 21, gettext("Transpose"));
        CTranspose->type(1);
        CTranspose->box(FL_NO_BOX);
        CTranspose->color((Fl_Color)44);
        CTranspose->labelsize(10);
        CTranspose->labelcolor(FL_LIGHT2);
        CTranspose->minimum(-6);
        CTranspose->maximum(5);
        CTranspose->step(1);
        CTranspose->textcolor(FL_BACKGROUND2_COLOR);
        CTranspose->callback((Fl_Callback*)cb_CTranspose);
        CTranspose->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* CTranspose
      { CSplit = new Fl_Counter(915, 87, 64, 21, gettext("Split"));
        CSplit->type(1);
        CSplit->box(FL_NO_BOX);
        CSplit->color((Fl_Color)44);
        CSplit->labelsize(10);
        CSplit->labelcolor(FL_LIGHT2);
        CSplit->minimum(48);
        CSplit->maximum(70);
        CSplit->step(1);
        CSplit->value(60);
        CSplit->textcolor(FL_BACKGROUND2_COLOR);
        CSplit->callback((Fl_Callback*)cb_CSplit);
        CSplit->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Counter* CSplit
      { VolAcc = new Fl_Slider(220, 115, 35, 155, gettext("Acc"));
        VolAcc->type(4);
        VolAcc->box(FL_GTK_DOWN_BOX);
        VolAcc->color((Fl_Color)43);
        VolAcc->selection_color((Fl_Color)1);
        VolAcc->labelsize(11);
        VolAcc->labelcolor(FL_LIGHT2);
        VolAcc->minimum(127);
        VolAcc->maximum(0);
        VolAcc->step(1);
        VolAcc->value(100);
        VolAcc->callback((Fl_Callback*)cb_VolAcc);
        VolAcc->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Slider* VolAcc
      { DSplit = new Fl_Box(920, 110, 55, 25, gettext("C"));
        DSplit->box(FL_BORDER_BOX);
        DSplit->color((Fl_Color)44);
        DSplit->labelcolor((Fl_Color)1);
        DSplit->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      } // Fl_Box* DSplit
      { SelectType = new Fl_Choice(640, 138, 140, 25, gettext("Style Type"));
        SelectType->box(FL_GTK_UP_BOX);
        SelectType->down_box(FL_BORDER_BOX);
        SelectType->color((Fl_Color)44);
        SelectType->selection_color(FL_DARK1);
        SelectType->labelsize(11);
        SelectType->labelcolor(FL_LIGHT2);
        SelectType->textcolor(FL_BACKGROUND2_COLOR);
        SelectType->callback((Fl_Callback*)cb_SelectType);
        SelectType->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Choice* SelectType
      { Fl_Group* o = new Fl_Group(810, 25, 85, 85);
        { FGBM = new Fl_Button(820, 70, 70, 35, gettext("Fingered Bass"));
          FGBM->type(102);
          FGBM->box(FL_PLASTIC_THIN_UP_BOX);
          FGBM->color((Fl_Color)9);
          FGBM->selection_color((Fl_Color)1);
          FGBM->labelsize(11);
          FGBM->labelcolor((Fl_Color)1);
          FGBM->callback((Fl_Callback*)cb_FGBM);
          FGBM->align(Fl_Align(FL_ALIGN_WRAP));
        } // Fl_Button* FGBM
        { FG = new Fl_Button(820, 30, 70, 35, gettext("Fingered"));
          FG->type(102);
          FG->box(FL_PLASTIC_THIN_UP_BOX);
          FG->color((Fl_Color)9);
          FG->selection_color((Fl_Color)1);
          FG->labelsize(11);
          FG->labelcolor((Fl_Color)1);
          FG->callback((Fl_Callback*)cb_FG);
        } // Fl_Button* FG
        o->end();
      } // Fl_Group* o
      { STSync = new Fl_Button(955, 140, 45, 40, gettext("Sync Start"));
        STSync->type(1);
        STSync->box(FL_PLASTIC_THIN_UP_BOX);
        STSync->shortcut(0x20);
        STSync->color((Fl_Color)11);
        STSync->selection_color((Fl_Color)3);
        STSync->labelsize(11);
        STSync->callback((Fl_Callback*)cb_STSync);
        STSync->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
        STSync->when(FL_WHEN_CHANGED);
      } // Fl_Button* STSync
      { DMidiInDevice = new Fl_Output(640, 45, 140, 25, gettext("Midi In Device"));
        DMidiInDevice->box(FL_BORDER_BOX);
        DMidiInDevice->color(FL_DARK1);
        DMidiInDevice->selection_color(FL_DARK1);
        DMidiInDevice->labelsize(11);
        DMidiInDevice->labelcolor(FL_LIGHT2);
        DMidiInDevice->textcolor((Fl_Color)1);
        DMidiInDevice->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* DMidiInDevice
      { DMidiOutDevice = new Fl_Output(640, 90, 140, 25, gettext("Midi Out Device"));
        DMidiOutDevice->box(FL_BORDER_BOX);
        DMidiOutDevice->color(FL_DARK1);
        DMidiOutDevice->selection_color(FL_DARK1);
        DMidiOutDevice->labelsize(11);
        DMidiOutDevice->labelcolor(FL_LIGHT2);
        DMidiOutDevice->textcolor((Fl_Color)1);
        DMidiOutDevice->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* DMidiOutDevice
      { BroReg = new Fl_Browser(500, 50, 135, 220, gettext("Registrations"));
        BroReg->type(2);
        BroReg->box(FL_GTK_THIN_DOWN_BOX);
        BroReg->color((Fl_Color)44);
        BroReg->selection_color(FL_DARK1);
        BroReg->labelsize(16);
        BroReg->labelcolor(FL_LIGHT2);
        BroReg->textcolor(FL_BACKGROUND2_COLOR);
        BroReg->callback((Fl_Callback*)cb_BroReg);
        BroReg->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Browser* BroReg
      { DInfoControl = new Fl_Box(640, 250, 168, 20);
        DInfoControl->box(FL_BORDER_BOX);
        DInfoControl->color(FL_DARK1);
        DInfoControl->labelsize(13);
        DInfoControl->labelcolor(FL_BACKGROUND2_COLOR);
        DInfoControl->align(Fl_Align(68|FL_ALIGN_INSIDE));
      } // Fl_Box* DInfoControl
      { Fl_Box* o = new Fl_Box(645, 185, 35, 17, gettext("label"));
        o->box(FL_GTK_UP_BOX);
        o->color((Fl_Color)110);
        o->hide();
      } // Fl_Box* o
      { Fl_Button* o = new Fl_Button(810, 109, 90, 22, gettext("Copy Mixer"));
        o->box(FL_PLASTIC_THIN_UP_BOX);
        o->color((Fl_Color)11);
        o->selection_color((Fl_Color)3);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Copy);
      } // Fl_Button* o
      ElBueno->end();
    } // Fl_Group* ElBueno
    { Botones = new Fl_Group(355, 325, 160, 450);
      Botones->box(FL_BORDER_BOX);
      Botones->color((Fl_Color)44);
      { Fl_Group* o = new Fl_Group(355, 345, 160, 345);
        o->color((Fl_Color)44);
        { bMainA = new Fl_Button(360, 345, 155, 30, gettext("Main A"));
          bMainA->type(102);
          bMainA->box(FL_PLASTIC_THIN_UP_BOX);
          bMainA->shortcut(0x61);
          bMainA->color((Fl_Color)10);
          bMainA->selection_color((Fl_Color)2);
          bMainA->labelsize(11);
          bMainA->callback((Fl_Callback*)cb_bMainA);
          bMainA->when(FL_WHEN_CHANGED);
        } // Fl_Button* bMainA
        { bMainB = new Fl_Button(360, 450, 155, 30, gettext("Main B"));
          bMainB->type(102);
          bMainB->box(FL_PLASTIC_THIN_UP_BOX);
          bMainB->shortcut(0x62);
          bMainB->color((Fl_Color)10);
          bMainB->selection_color((Fl_Color)2);
          bMainB->labelsize(11);
          bMainB->callback((Fl_Callback*)cb_bMainB);
          bMainB->when(FL_WHEN_CHANGED);
        } // Fl_Button* bMainB
        { bMainC = new Fl_Button(360, 555, 155, 30, gettext("Main C"));
          bMainC->type(102);
          bMainC->box(FL_PLASTIC_THIN_UP_BOX);
          bMainC->shortcut(0x63);
          bMainC->color((Fl_Color)10);
          bMainC->selection_color((Fl_Color)2);
          bMainC->labelsize(11);
          bMainC->callback((Fl_Callback*)cb_bMainC);
          bMainC->when(FL_WHEN_CHANGED);
        } // Fl_Button* bMainC
        { bMainD = new Fl_Button(360, 660, 155, 30, gettext("Main D"));
          bMainD->type(102);
          bMainD->box(FL_PLASTIC_THIN_UP_BOX);
          bMainD->shortcut(0x64);
          bMainD->color((Fl_Color)10);
          bMainD->selection_color((Fl_Color)2);
          bMainD->labelsize(11);
          bMainD->callback((Fl_Callback*)cb_bMainD);
          bMainD->when(FL_WHEN_CHANGED);
        } // Fl_Button* bMainD
        o->end();
      } // Fl_Group* o
      { bEndingA = new Fl_Button(440, 380, 75, 30, gettext("Ending A"));
        bEndingA->type(1);
        bEndingA->box(FL_PLASTIC_THIN_UP_BOX);
        bEndingA->color((Fl_Color)12);
        bEndingA->selection_color((Fl_Color)2);
        bEndingA->labelsize(11);
        bEndingA->callback((Fl_Callback*)cb_bEndingA);
      } // Fl_Button* bEndingA
      { bEndingB = new Fl_Button(440, 485, 75, 30, gettext("Ending B"));
        bEndingB->type(1);
        bEndingB->box(FL_PLASTIC_THIN_UP_BOX);
        bEndingB->color((Fl_Color)12);
        bEndingB->selection_color((Fl_Color)2);
        bEndingB->labelsize(11);
        bEndingB->callback((Fl_Callback*)cb_bEndingB);
      } // Fl_Button* bEndingB
      { bEndingC = new Fl_Button(440, 590, 75, 30, gettext("Ending C"));
        bEndingC->type(1);
        bEndingC->box(FL_PLASTIC_THIN_UP_BOX);
        bEndingC->shortcut(0x65);
        bEndingC->color((Fl_Color)12);
        bEndingC->selection_color((Fl_Color)2);
        bEndingC->labelsize(11);
        bEndingC->callback((Fl_Callback*)cb_bEndingC);
      } // Fl_Button* bEndingC
      { bIntroA = new Fl_Button(360, 380, 75, 30, gettext("Intro A"));
        bIntroA->type(1);
        bIntroA->box(FL_PLASTIC_THIN_UP_BOX);
        bIntroA->color((Fl_Color)9);
        bIntroA->selection_color((Fl_Color)2);
        bIntroA->labelsize(11);
        bIntroA->callback((Fl_Callback*)cb_bIntroA);
      } // Fl_Button* bIntroA
      { bIntroB = new Fl_Button(360, 485, 75, 30, gettext("Intro B"));
        bIntroB->type(1);
        bIntroB->box(FL_PLASTIC_THIN_UP_BOX);
        bIntroB->color((Fl_Color)9);
        bIntroB->selection_color((Fl_Color)2);
        bIntroB->labelsize(11);
        bIntroB->callback((Fl_Callback*)cb_bIntroB);
      } // Fl_Button* bIntroB
      { bIntroC = new Fl_Button(360, 590, 75, 30, gettext("Intro C"));
        bIntroC->type(1);
        bIntroC->box(FL_PLASTIC_THIN_UP_BOX);
        bIntroC->shortcut(0x69);
        bIntroC->color((Fl_Color)9);
        bIntroC->selection_color((Fl_Color)2);
        bIntroC->labelsize(11);
        bIntroC->callback((Fl_Callback*)cb_bIntroC);
      } // Fl_Button* bIntroC
      { bFillAA = new Fl_Button(360, 415, 75, 30, gettext("Fill In AA"));
        bFillAA->type(1);
        bFillAA->box(FL_PLASTIC_THIN_UP_BOX);
        bFillAA->shortcut(0x66);
        bFillAA->color((Fl_Color)13);
        bFillAA->selection_color((Fl_Color)2);
        bFillAA->labelsize(11);
        bFillAA->callback((Fl_Callback*)cb_bFillAA);
      } // Fl_Button* bFillAA
      { bFillAB = new Fl_Button(440, 415, 75, 30, gettext("Fill In AB"));
        bFillAB->type(1);
        bFillAB->box(FL_PLASTIC_THIN_UP_BOX);
        bFillAB->color((Fl_Color)13);
        bFillAB->selection_color((Fl_Color)2);
        bFillAB->labelsize(11);
        bFillAB->callback((Fl_Callback*)cb_bFillAB);
      } // Fl_Button* bFillAB
      { bFillBA = new Fl_Button(440, 520, 75, 30, gettext("Fill In BA"));
        bFillBA->type(1);
        bFillBA->box(FL_PLASTIC_THIN_UP_BOX);
        bFillBA->color((Fl_Color)13);
        bFillBA->selection_color((Fl_Color)2);
        bFillBA->labelsize(11);
        bFillBA->callback((Fl_Callback*)cb_bFillBA);
      } // Fl_Button* bFillBA
      { bFillBB = new Fl_Button(360, 520, 75, 30, gettext("Fill In BB"));
        bFillBB->type(1);
        bFillBB->box(FL_PLASTIC_THIN_UP_BOX);
        bFillBB->shortcut(0x67);
        bFillBB->color((Fl_Color)13);
        bFillBB->selection_color((Fl_Color)2);
        bFillBB->labelsize(11);
        bFillBB->callback((Fl_Callback*)cb_bFillBB);
      } // Fl_Button* bFillBB
      { bFillCC = new Fl_Button(360, 625, 75, 30, gettext("Fill In CC"));
        bFillCC->type(1);
        bFillCC->box(FL_PLASTIC_THIN_UP_BOX);
        bFillCC->shortcut(0x68);
        bFillCC->color((Fl_Color)13);
        bFillCC->selection_color((Fl_Color)2);
        bFillCC->labelsize(11);
        bFillCC->callback((Fl_Callback*)cb_bFillCC);
      } // Fl_Button* bFillCC
      { bFillDD = new Fl_Button(360, 695, 80, 30, gettext("Fill In DD"));
        bFillDD->type(1);
        bFillDD->box(FL_PLASTIC_THIN_UP_BOX);
        bFillDD->shortcut(0x6e);
        bFillDD->color((Fl_Color)13);
        bFillDD->selection_color((Fl_Color)2);
        bFillDD->labelsize(11);
        bFillDD->callback((Fl_Callback*)cb_bFillDD);
      } // Fl_Button* bFillDD
      { AutoFill = new Fl_Button(360, 735, 155, 30, gettext("Auto Fill In"));
        AutoFill->type(1);
        AutoFill->box(FL_PLASTIC_THIN_UP_BOX);
        AutoFill->shortcut(0x6f);
        AutoFill->color((Fl_Color)9);
        AutoFill->selection_color((Fl_Color)1);
        AutoFill->labelsize(11);
        AutoFill->callback((Fl_Callback*)cb_AutoFill);
      } // Fl_Button* AutoFill
      Botones->end();
    } // Fl_Group* Botones
    { VName = new Fl_Box(610, 275, 175, 50);
      VName->box(FL_BORDER_BOX);
      VName->color((Fl_Color)44);
      VName->labelfont(1);
      VName->labelsize(22);
      VName->labelcolor((Fl_Color)1);
      VName->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    } // Fl_Box* VName
    { VChord = new Fl_Box(785, 275, 225, 50);
      VChord->box(FL_BORDER_BOX);
      VChord->color((Fl_Color)44);
      VChord->labelfont(1);
      VChord->labelsize(22);
      VChord->labelcolor((Fl_Color)1);
      VChord->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    } // Fl_Box* VChord
    { VSound = new Fl_Box(5, 275, 280, 50);
      VSound->box(FL_BORDER_BOX);
      VSound->color((Fl_Color)44);
      VSound->labelfont(1);
      VSound->labelsize(22);
      VSound->labelcolor((Fl_Color)1);
      VSound->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    } // Fl_Box* VSound
    { VStyle = new Fl_Box(285, 275, 325, 50);
      VStyle->box(FL_BORDER_BOX);
      VStyle->color((Fl_Color)44);
      VStyle->labelfont(1);
      VStyle->labelsize(22);
      VStyle->labelcolor((Fl_Color)1);
      VStyle->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    } // Fl_Box* VStyle
    rmgmorganwin->size_range(800, 600);
    rmgmorganwin->end();
    rmgmorganwin->resizable(rmgmorganwin);
  } // Fl_Double_Window* rmgmorganwin
  int i;
  SelectType->add("All");
  for (i=0; i<=17; i++) SelectType->add(rmgmo->CStyle[i].Nom);
  SelectType->value(0);
  
  SelectType->color2(ElBueno->color());
  CTranspose->clear_visible_focus();
  CSplit->clear_visible_focus();
  CTempo->clear_visible_focus();
  
  P0->clear_visible_focus();
  P1->clear_visible_focus();
  P2->clear_visible_focus();
  P3->clear_visible_focus();
  P4->clear_visible_focus();
  P9->clear_visible_focus();
  P10->clear_visible_focus();
  P11->clear_visible_focus();
  P12->clear_visible_focus();
  P13->clear_visible_focus();
  P14->clear_visible_focus();
  P15->clear_visible_focus();
  return rmgmorganwin;
}

stygmorgan::stygmorgan(int argc, char **argv,RMGMO *rmgmo_) {
  int x,y,w,h;
  
  
  Fl::scheme("none");
  fl_open_display();
  Fl::visual(FL_DOUBLE|FL_INDEX);
  Fl::visual(FL_RGB);
  
  rmgmo=rmgmo_;
  
  make_window();
  
  N1->deactivate();
  N2->deactivate();
  N3->deactivate();
  N4->deactivate();
  
  ActuaDsel();
  
  Fl_Preferences stygmorgan (Fl_Preferences::USER, WEBSITE, PACKAGE);
  
  stygmorgan.get("rmgmorganwinX",x,4);
  stygmorgan.get("rmgmorganwinY",y,29);
  stygmorgan.get("rmgmorganwinW",w,1024);
  stygmorgan.get("rmgmorganwinH",h,780);
  stygmorgan.get("Estilo",rmgmo->Estilo,1);
  stygmorgan.get("Sonido",rmgmo->Sonido,1);
  stygmorgan.get("Acc_Volume",rmgmo->AccVol,100);
  stygmorgan.get("Keyb_Volume",rmgmo->KeybVol,100);
  stygmorgan.get("SplitPoint",rmgmo->split,60);
  
  rmgmorganwin->resize(x,y,w,h);
  ActuaVarios();
  ActuaMidDevices();
  Leer_Registrations();
  Leer_Sounds();
  
  Fl::background(163,163,163);
  
  rmgmorganwin->show(argc,argv);
  put_icon(rmgmorganwin);
  
  while (espera == 0) usleep(1);
  
  rmgmo->panico(1,0,15);
  
  if (rmgmo->numsounds > 0) 
  {
   ListaSounds->value(rmgmo->Sonido);
   ListaSounds->do_callback();
  } 
  else
  ponmixsound();
  
  if (rmgmo->numstyles > 0) 
  {
   Leer_Styles(rmgmo->Estilo); 
  } 
  else
  {
  ponmix();
  EnAp();
  }
  
  labelwin(1);
  void * v=DCompas;
  Fl::add_timeout(.5,tick,v);
}

void stygmorgan::tick(void* v) {
  Fl_Box *o = (Fl_Box*)v;
  o->do_callback();
  Fl::repeat_timeout(0.004,tick,v);
}

Fl_Double_Window* stygmorgan::MoreParams(int i) {
  { More = new Fl_Double_Window(100, 255);
    More->box(FL_BORDER_BOX);
    More->color((Fl_Color)44);
    More->callback((Fl_Callback*)cb_More, (void*)(this));
    { Fl_Counter* o = Octave = new Fl_Counter(5, 55, 90, 25, gettext("Octave"));
      Octave->type(1);
      Octave->box(FL_NO_BOX);
      Octave->color((Fl_Color)44);
      Octave->selection_color((Fl_Color)44);
      Octave->labelsize(11);
      Octave->labelcolor(FL_BACKGROUND2_COLOR);
      Octave->minimum(-2);
      Octave->maximum(2);
      Octave->step(1);
      Octave->textcolor((Fl_Color)1);
      Octave->callback((Fl_Callback*)cb_Octave);
      Octave->align(Fl_Align(FL_ALIGN_TOP));
      o->value(rmgmo->CM[rmgmo->selmix].octave);
    } // Fl_Counter* Octave
    { Transpose = new Fl_Counter(5, 100, 90, 25, gettext("Transpose"));
      Transpose->type(1);
      Transpose->box(FL_NO_BOX);
      Transpose->color((Fl_Color)44);
      Transpose->selection_color((Fl_Color)44);
      Transpose->labelsize(11);
      Transpose->labelcolor(FL_BACKGROUND2_COLOR);
      Transpose->minimum(-6);
      Transpose->maximum(6);
      Transpose->step(1);
      Transpose->textcolor((Fl_Color)1);
      Transpose->callback((Fl_Callback*)cb_Transpose);
      Transpose->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Counter* Transpose
    { bMSB = new Fl_Counter(5, 145, 90, 25, gettext("Bank MSB"));
      bMSB->box(FL_NO_BOX);
      bMSB->color((Fl_Color)44);
      bMSB->selection_color((Fl_Color)44);
      bMSB->labelsize(11);
      bMSB->labelcolor(FL_BACKGROUND2_COLOR);
      bMSB->minimum(0);
      bMSB->maximum(127);
      bMSB->step(1);
      bMSB->textcolor((Fl_Color)1);
      bMSB->callback((Fl_Callback*)cb_bMSB);
      bMSB->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Counter* bMSB
    { bLSB = new Fl_Counter(5, 190, 90, 25, gettext("Bank LSB"));
      bLSB->box(FL_NO_BOX);
      bLSB->color((Fl_Color)44);
      bLSB->selection_color((Fl_Color)44);
      bLSB->labelsize(11);
      bLSB->labelcolor(FL_BACKGROUND2_COLOR);
      bLSB->minimum(0);
      bLSB->maximum(127);
      bLSB->step(1);
      bLSB->textcolor((Fl_Color)1);
      bLSB->callback((Fl_Callback*)cb_bLSB);
      bLSB->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Counter* bLSB
    { Fl_Button* o = new Fl_Button(10, 225, 80, 25, gettext("Ok"));
      o->box(FL_PLASTIC_THIN_UP_BOX);
      o->color((Fl_Color)11);
      o->selection_color((Fl_Color)3);
      o->callback((Fl_Callback*)cb_Ok);
    } // Fl_Button* o
    { LMore = new Fl_Box(0, 5, 100, 25);
      LMore->labeltype(FL_ENGRAVED_LABEL);
      LMore->labelsize(16);
      LMore->labelcolor(FL_BACKGROUND2_COLOR);
      LMore->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* LMore
    More->end();
  } // Fl_Double_Window* More
  rmgmo->wmore=1;
  int x,y;
  static const char *pepe [] ={"stygmorgan"};
  int argc=1;
  char **argv= (char **) pepe;
  
  bMSB->lstep(10);
  bMSB->clear_visible_focus();
  bLSB->lstep(10);
  bLSB->clear_visible_focus();
  rmgmo->selmix = i;
  Octave->value(rmgmo->CM[i].octave);
  Octave->clear_visible_focus();
  Transpose->value(rmgmo->CM[i].transpose);
  Transpose->clear_visible_focus();
  bMSB->value(rmgmo->CM[i].bMSB);
  bLSB->value(rmgmo->CM[i].bLSB);
  
  switch(i)
  {
         case 0:
         LMore->label("Left 1");
         break;
                
         
         case 1:
         LMore->label("Left 2");
         break;
         
         
         case 2:
         LMore->label("Right 1");
         break;
         
         
         
         case 3:
         LMore->label("Right 2");
         break;
         
         
         case 4:
         LMore->label("Right 3");
         break;
         
         
         case 9:
         LMore->label("Drums");
         break;
         
         
         case 10:
         LMore->label("Bass");
         break;
         
         
         case 11:
         LMore->label("Acc 1");
         break;
         
  
         case 12:
         LMore->label("Acc 2");
         break;
         
         
         case 13:
         LMore->label("Acc 3");
         break;
         
         
         case 14:
         LMore->label("Acc 4");
         break;
         
         
         case 15:
         LMore->label("Acc 5");
         break;
         
         
  
  }       
         
     
       
  
  Fl::get_mouse(x,y);
  More->position(x,y);
  More->icon((char*)p);
  More->show(argc, argv);
  return More;
}

void stygmorgan::ponmix() {
  P9->parent()->redraw();
  P9->value(rmgmo->CM[9].program);
  P10->parent()->redraw();
  P10->value(rmgmo->CM[10].program);
  P11->parent()->redraw();
  P11->value(rmgmo->CM[11].program);
  P12->parent()->redraw();
  P12->value(rmgmo->CM[12].program);
  P13->parent()->redraw();
  P13->value(rmgmo->CM[13].program);
  P14->parent()->redraw();
  P14->value(rmgmo->CM[14].program);
  P15->parent()->redraw();
  P15->value(rmgmo->CM[15].program);
  
  
  DP9->label(rmgmo->PresetList[rmgmo->CalculaBanco(9)].PBanco[rmgmo->CM[9].program].ProgName);
  DP10->label(rmgmo->PresetList[rmgmo->CalculaBanco(10)].PBanco[rmgmo->CM[10].program].ProgName);
  DP11->label(rmgmo->PresetList[rmgmo->CalculaBanco(11)].PBanco[rmgmo->CM[11].program].ProgName);
  DP12->label(rmgmo->PresetList[rmgmo->CalculaBanco(12)].PBanco[rmgmo->CM[12].program].ProgName);
  DP13->label(rmgmo->PresetList[rmgmo->CalculaBanco(13)].PBanco[rmgmo->CM[13].program].ProgName);
  DP14->label(rmgmo->PresetList[rmgmo->CalculaBanco(14)].PBanco[rmgmo->CM[14].program].ProgName);
  DP15->label(rmgmo->PresetList[rmgmo->CalculaBanco(15)].PBanco[rmgmo->CM[15].program].ProgName);
  
  
  Pan9->value(rmgmo->CM[9].pan);
  Pan10->value(rmgmo->CM[10].pan);
  Pan11->value(rmgmo->CM[11].pan);
  Pan12->value(rmgmo->CM[12].pan);
  Pan13->value(rmgmo->CM[13].pan);
  Pan14->value(rmgmo->CM[14].pan);
  Pan15->value(rmgmo->CM[15].pan);
  
  
  ActuVolp();
  
  
  
  Reverb9->value(rmgmo->CM[9].reverb);
  Reverb10->value(rmgmo->CM[10].reverb);
  Reverb11->value(rmgmo->CM[11].reverb);
  Reverb12->value(rmgmo->CM[12].reverb);
  Reverb13->value(rmgmo->CM[13].reverb);
  Reverb14->value(rmgmo->CM[14].reverb);
  Reverb15->value(rmgmo->CM[15].reverb);
  
  
  
  Chorus9->value(rmgmo->CM[9].chorus);
  Chorus10->value(rmgmo->CM[10].chorus);
  Chorus11->value(rmgmo->CM[11].chorus);
  Chorus12->value(rmgmo->CM[12].chorus);
  Chorus13->value(rmgmo->CM[13].chorus);
  Chorus14->value(rmgmo->CM[14].chorus);
  Chorus15->value(rmgmo->CM[15].chorus);
  
  
  ActuaOnOffP();
  ponmixsound();
  ActuaSolo();
}

void stygmorgan::PonSolo(int mcanal) {
  int i;
  
  for (i=0; i<=4; i++)
  { 
    if ((rmgmo->CM[i].solo) && (mcanal != i ))
    
         { 
           rmgmo->CM[mcanal].solo = 0;
           ActuaSolo();
           return;
         }
         
  }
  
  for (i=9; i<=15; i++)
  { 
    if ((rmgmo->CM[i].solo) && (mcanal != i ))
    
         { 
           rmgmo->CM[mcanal].solo = 0;
           ActuaSolo();
           return;
         }
         
  }
  
   rmgmo->AyudaSolo(mcanal);
     
     MoreSolo();
}

void stygmorgan::ActuaOnOff() {
  On0->value(rmgmo->CM[0].OnOff);
  On1->value(rmgmo->CM[1].OnOff);
  On2->value(rmgmo->CM[2].OnOff);
  On3->value(rmgmo->CM[3].OnOff);
  On4->value(rmgmo->CM[4].OnOff);
  ActuaDP();
}

void stygmorgan::QuitaSolo() {
  rmgmo->AyudaQuitaSolo();
  MoreSolo();
}

void stygmorgan::ActuaSolo() {
  Solo0->value(rmgmo->CM[0].solo);
  Solo1->value(rmgmo->CM[1].solo);
  Solo2->value(rmgmo->CM[2].solo);
  Solo3->value(rmgmo->CM[3].solo);
  Solo4->value(rmgmo->CM[4].solo);
  Solo9->value(rmgmo->CM[9].solo);
  Solo10->value(rmgmo->CM[10].solo);
  Solo11->value(rmgmo->CM[11].solo);
  Solo12->value(rmgmo->CM[12].solo);
  Solo13->value(rmgmo->CM[13].solo);
  Solo14->value(rmgmo->CM[14].solo);
  Solo15->value(rmgmo->CM[15].solo);
}

void stygmorgan::Actua_More() {
  More0->value(0);
  More1->value(0);
  More2->value(0);
  More3->value(0);
  More4->value(0);
  
  More9->value(0);
  More10->value(0);
  More11->value(0);
  More12->value(0);
  More13->value(0);
  More14->value(0);
  More15->value(0);
}

void stygmorgan::pontempo() {
  RTempo->value(rmgmo->bpm);
  rmgmo->set_tempo();
}

void stygmorgan::Leer_Styles(int num) {
  int i;
  int k=0;
  memset(rmgmo->numLista, 0, sizeof rmgmo->numLista);
  ListaStyles->clear();
  for (i=0;i<rmgmo->numstyles;i++)
  {
     if (rmgmo->SStipo == 0)
     {
     k++;
     ListaStyles->add(rmgmo->StyleNom[i].Name);
     rmgmo->numLista[k]=i+1;
     }
     else
     if (rmgmo->StyleNom[i].style == ( rmgmo->SStipo -1 ))
     {
     k++;
     ListaStyles->add(rmgmo->StyleNom[i].Name);
     rmgmo->numLista[k]=i+1;
        
     }
  }
  
  ListaStyles->value(num);
  ListaStyles->do_callback();
}

void stygmorgan::EnAp() {
  if ( rmgmo->tvb[1] != 0) bMainA->show(); else bMainA->hide();
  if ( rmgmo->tvb[2] != 0) bMainB->show(); else bMainB->hide();
  if ( rmgmo->tvb[3] != 0) bMainC->show(); else bMainC->hide();
  if ( rmgmo->tvb[4] != 0) bMainD->show(); else bMainD->hide();
  if ( rmgmo->tvb[5] != 0) bFillAA->show(); else bFillAA->hide();
  if ( rmgmo->tvb[6] != 0) bFillBB->show(); else bFillBB->hide();
  if ( rmgmo->tvb[7] != 0) bFillCC->show(); else bFillCC->hide();
  if ( rmgmo->tvb[8] != 0) bFillDD->show(); else bFillDD->hide();
  if ( rmgmo->tvb[9] != 0) bIntroA->show(); else bIntroA->hide();
  if ( rmgmo->tvb[10] != 0) bIntroB->show(); else bIntroB->hide();
  if ( rmgmo->tvb[11] != 0) bIntroC->show(); else bIntroC->hide();
  if ( rmgmo->tvb[12] != 0) bEndingA->show(); else bEndingA->hide();
  if ( rmgmo->tvb[13] != 0) bEndingB->show(); else bEndingB->hide();
  if ( rmgmo->tvb[14] != 0) bEndingC->show(); else bEndingC->hide();
  if ( rmgmo->tvb[15] != 0) bFillBA->show(); else bFillBA->hide();
  if ( rmgmo->tvb[16] != 0) bFillAB->show(); else bFillAB->hide();
}

void stygmorgan::ActuaBoton() {
  if ( ! rmgmo->sbot[1]) bMainA->value(0); else bMainA->setonly();
  if ( ! rmgmo->sbot[2]) bMainB->value(0); else bMainB->setonly();
  if ( ! rmgmo->sbot[3]) bMainC->value(0); else bMainC->setonly();
  if ( ! rmgmo->sbot[4]) bMainD->value(0); else bMainD->setonly();
  
  
  if ( ! rmgmo->sbot[5]) bFillAA->value(0); else bFillAA->value(1);
  if ( ! rmgmo->sbot[6]) bFillBB->value(0); else bFillBB->value(1);
  if ( ! rmgmo->sbot[7]) bFillCC->value(0); else bFillCC->value(1);
  if ( ! rmgmo->sbot[8]) bFillDD->value(0); else bFillDD->value(1);
  if ( ! rmgmo->sbot[9]) bIntroA->value(0); else bIntroA->value(1);
  if ( ! rmgmo->sbot[10]) bIntroB->value(0); else bIntroB->value(1);
  if ( ! rmgmo->sbot[11]) bIntroC->value(0); else bIntroC->value(1);
  if ( ! rmgmo->sbot[12]) bEndingA->value(0); else  bEndingA->value(1);
  if ( ! rmgmo->sbot[13]) bEndingB->value(0); else bEndingB->value(1); 
  if ( ! rmgmo->sbot[14]) bEndingC->value(0); else bEndingC->value(1); 
  if ( ! rmgmo->sbot[15]) bFillBA->value(0); else bFillBA->value(1);
  if ( ! rmgmo->sbot[16]) bFillAB->value(0); else bFillAB->value(1);
}

void stygmorgan::CVari(int boton,int vari) {
  int i;
  int excep=0;
  
  if (boton != 0)
   vari=rmgmo->tvb[boton];
  else
   boton=rmgmo->tbotvar[vari];
   
     
  
  if (! rmgmo->bplay)
  {
  if (rmgmo->siguiente == 0) rmgmo->siguiente=vari;
  rmgmo->buscacs(vari);
  rmgmo->Variacion=vari;
  VName->label(rmgmo->nStyle.Pattern[vari].Name);
  rmgmo->mirapc(rmgmo->Variacion);
  rmgmo->BuscaSi();
  rmgmo->ponmixpatternenmix(rmgmo->Variacion);
  ponmix();
  for(i=5; i<22; i++)rmgmo->sbot[i]=0;
  if (boton < 5)
  for(i=1; i<5; i++) if ((rmgmo->sbot[i] == 1 ) && (i != boton)) rmgmo->sbot[i]=0;
  rmgmo->sbot[boton]=1;
  
  
  ActuaBoton();
  rmgmo->BuscaNext();
  Fl::focus(STST);
  }
  
  else
  
  {
  if ((rmgmo->AFill) && (boton<5))
  {
  
  
  switch(boton)
  {
      case 1:
      if (rmgmo->tvb[15]!=0) boton=15; else boton +=4;
      break;
      case 2:
      if (rmgmo->tvb[16]!=0) boton=16; else
      {
       boton +=3;
       excep=1;
      } 
      break;
      case 3:
      boton +=4;
      break;
      case 4:
      boton +=4;
  }    
  rmgmo->sbot[boton]=1;
  ActuaBoton();
  rmgmo->siguiente=rmgmo->tvb[boton];
  switch(boton)
  {
  
    case 5:
    if(excep==0)
    rmgmo->tiene=rmgmo->tvb[1];
    else
    rmgmo->tiene=rmgmo->tvb[2];
    break;    
    case 6:
    rmgmo->tiene=rmgmo->tvb[2];
    break;    
    case 7:
    rmgmo->tiene=rmgmo->tvb[3];
    break;    
    case 8:
    rmgmo->tiene=rmgmo->tvb[4];
    break;    
    case 15:
    rmgmo->tiene=rmgmo->tvb[1];
    break;    
    case 16:
    rmgmo->tiene=rmgmo->tvb[2];
    break;    
  
  
  
  }
  
  }
  else
  {
  if(boton<5)
  for(i=1; i<5; i++) if ((rmgmo->sbot[i] == 1 ) && (i != boton)) rmgmo->sbot[i]=0;
  rmgmo->sbot[boton]=1;
  ActuaBoton();
  rmgmo->siguiente=rmgmo->tvb[boton];
  switch(boton)
  {
  
    case 5:
    rmgmo->tiene=rmgmo->tvb[1];
    break;    
    case 6:
    rmgmo->tiene=rmgmo->tvb[2];
    break;    
    case 7:
    rmgmo->tiene=rmgmo->tvb[3];
    break;    
    case 8:
    rmgmo->tiene=rmgmo->tvb[4];
    break;    
    case 15:
    rmgmo->tiene=rmgmo->tvb[1];
    break;    
    case 16:
    rmgmo->tiene=rmgmo->tvb[2];
    break;    
  }
  }
  }
}

void stygmorgan::buscala() {
  int i;
  for (i=1; i<5; i++)
  {
   if (rmgmo->sbot[i])
     {
       CVari(i,0);
       break;      
     }    
   }
}

void stygmorgan::Leer_Sounds() {
  int i;
  ListaSounds->clear();
  for (i=0;i<rmgmo->numsounds;i++)
  ListaSounds->add(rmgmo->SoundNom[i].Name);
}

void stygmorgan::ponmixsound() {
  P0->parent()->redraw();
  P0->value(rmgmo->CM[0].program);
  P1->parent()->redraw();
  P1->value(rmgmo->CM[1].program);
  P2->parent()->redraw();
  P2->value(rmgmo->CM[2].program);
  P3->parent()->redraw();
  P3->value(rmgmo->CM[3].program);
  P4->parent()->redraw();
  P4->value(rmgmo->CM[4].program);
  
  
  DP0->label(rmgmo->PresetList[rmgmo->CalculaBanco(0)].PBanco[rmgmo->CM[0].program].ProgName);
  DP1->label(rmgmo->PresetList[rmgmo->CalculaBanco(1)].PBanco[rmgmo->CM[1].program].ProgName);
  DP2->label(rmgmo->PresetList[rmgmo->CalculaBanco(2)].PBanco[rmgmo->CM[2].program].ProgName);
  DP3->label(rmgmo->PresetList[rmgmo->CalculaBanco(3)].PBanco[rmgmo->CM[3].program].ProgName);
  DP4->label(rmgmo->PresetList[rmgmo->CalculaBanco(4)].PBanco[rmgmo->CM[4].program].ProgName);
  
  
  
  Pan0->value(rmgmo->CM[0].pan);
  Pan1->value(rmgmo->CM[1].pan);
  Pan2->value(rmgmo->CM[2].pan);
  Pan3->value(rmgmo->CM[3].pan);
  Pan4->value(rmgmo->CM[4].pan);
  
  
  ActuVols();
  
  
  Reverb0->value(rmgmo->CM[0].reverb);
  Reverb1->value(rmgmo->CM[1].reverb);
  Reverb2->value(rmgmo->CM[2].reverb);
  Reverb3->value(rmgmo->CM[3].reverb);
  Reverb4->value(rmgmo->CM[4].reverb);
  
  
  Chorus0->value(rmgmo->CM[0].chorus);
  Chorus1->value(rmgmo->CM[1].chorus);
  Chorus2->value(rmgmo->CM[2].chorus);
  Chorus3->value(rmgmo->CM[3].chorus);
  Chorus4->value(rmgmo->CM[4].chorus);
  
  
  ActuaOnOff();
}

void stygmorgan::ActuaOnOffP() {
  On9->value(rmgmo->CM[9].OnOff);
  On10->value(rmgmo->CM[10].OnOff);
  On11->value(rmgmo->CM[11].OnOff);
  On12->value(rmgmo->CM[12].OnOff);
  On13->value(rmgmo->CM[13].OnOff);
  On14->value(rmgmo->CM[14].OnOff);
  On15->value(rmgmo->CM[15].OnOff);
  ActuaDP();
}

void stygmorgan::apaga() {
  N1->deactivate();
  N2->deactivate();
  N3->deactivate();
  N4->deactivate();
  ElSeq->activate();
  FunciLeds(1);
  DMidi->value(0);
}

void stygmorgan::PCVari(int boton,int vari) {
  int i;
  boton=rmgmo->tbotvar[vari];
  rmgmo->siguiente=vari;
  rmgmo->buscacs(vari);
  rmgmo->Variacion=vari;
  VName->label(rmgmo->nStyle.Pattern[vari].Name);
  rmgmo->mirapc(rmgmo->Variacion);
  rmgmo->rema=0;
  rmgmo->cs=0;
  rmgmo->BuscaSi();
  rmgmo->ponmixpatternenmix(rmgmo->Variacion);
  ponmix();
  for(i=5; i<22; i++)rmgmo->sbot[i]=0;
  rmgmo->sbot[boton]=1;
  ActuaBoton();
  rmgmo->BuscaNext();
  Fl::focus(STST);
}

void stygmorgan::ActuaDsel() {
  switch (rmgmo->sel)
  {    
       case 0:
       
       Dsel->label("Sounds");
       break;
       
       case 1:
       Dsel->label("Patterns");
       break;
  }
}

void stygmorgan::ActuVolp() {
  Vol9->value(rmgmo->CM[9].vol);
  Vol10->value(rmgmo->CM[10].vol);
  Vol11->value(rmgmo->CM[11].vol);
  Vol12->value(rmgmo->CM[12].vol);
  Vol13->value(rmgmo->CM[13].vol);
  Vol14->value(rmgmo->CM[14].vol);
  Vol15->value(rmgmo->CM[15].vol);
}

void stygmorgan::ActuVols() {
  Vol0->value(rmgmo->CM[0].vol);
  Vol1->value(rmgmo->CM[1].vol);
  Vol2->value(rmgmo->CM[2].vol);
  Vol3->value(rmgmo->CM[3].vol);
  Vol4->value(rmgmo->CM[4].vol);
}

Fl_Double_Window* stygmorgan::CreaCMixer() {
  { CMixer = new Fl_Double_Window(260, 335, gettext("Copy Mixer settings to:"));
    CMixer->color((Fl_Color)44);
    CMixer->callback((Fl_Callback*)cb_CMixer, (void*)(this));
    { Fl_Button* o = new Fl_Button(168, 285, 75, 30, gettext("Ok"));
      o->box(FL_PLASTIC_THIN_UP_BOX);
      o->color((Fl_Color)11);
      o->selection_color((Fl_Color)3);
      o->callback((Fl_Callback*)cb_Ok1);
    } // Fl_Button* o
    { CCCancel = new Fl_Button(168, 245, 75, 30, gettext("Cancel"));
      CCCancel->box(FL_PLASTIC_THIN_UP_BOX);
      CCCancel->color((Fl_Color)11);
      CCCancel->selection_color((Fl_Color)3);
      CCCancel->callback((Fl_Callback*)cb_CCCancel);
    } // Fl_Button* CCCancel
    { Fl_Button* o = new Fl_Button(168, 35, 75, 30, gettext("Select All"));
      o->box(FL_PLASTIC_THIN_UP_BOX);
      o->color((Fl_Color)11);
      o->selection_color((Fl_Color)3);
      o->callback((Fl_Callback*)cb_Select);
    } // Fl_Button* o
    CMixer->end();
  } // Fl_Double_Window* CMixer
  int i,x,y;
  static const char *pepe [] ={"stygmorgan"};
  int argc=1;
  char **argv= (char **) pepe;
  CMixer->hide();
  
  for (i=1; i<rmgmo->nStyle.numpat; i++)
   {
     
      Fl_Check_Button *obutton = new Fl_Check_Button(25,20 *i,140,18,rmgmo->nStyle.Pattern[i].Name);
      obutton->user_data((void*) i);
      if (i== rmgmo->Variacion) obutton->value(1);
      CMixer->add(obutton); 
      obutton->down_box(FL_NO_BOX);
      obutton->color((Fl_Color)44);
      obutton->labelcolor((Fl_Color)FL_WHITE);
      obutton->selection_color((Fl_Color)3);
      obutton->labelsize((Fl_Fontsize)11);
      obutton->clear_visible_focus();    
    }
              
  Fl::get_mouse(x,y);
  CMixer->position(x,y);
  CMixer->icon((char*)p);
  CMixer->show(argc,argv);
  return CMixer;
}

void stygmorgan::SetSound(int num) {
  rmgmo->panico(123,0,4);
  rmgmo->isnews=0;
  memset(&rmgmo->nSound, 0 ,sizeof(rmgmo->nSound));
  rmgmo->readsound(num);
  VSound->label(rmgmo->nSound.Name);
  rmgmo->ponsoundenmix();
  ponmixsound();
  ListaSounds->select(num,1);
}

void stygmorgan::coord() {
  x=rmgmorganwin->x();
  y=rmgmorganwin->y();
}

void stygmorgan::SaveStylesFunction() {
  int i;
  
  i=ListaStyles->value();
  
  
  if (rmgmo->isnew) 
  {
  
  rmgmo->savestyle();
  SelectType->value(0);
  rmgmo->SStipo=0;
  rmgmo->readstyles(rmgmo->StylesFilename);
  Leer_Styles(rmgmo->numstyles);
  }
  else
  if (rmgmo->EventoCambia)
  rmgmo->writestylec(rmgmo->numLista[(int)ListaStyles->value()],0);
  else
  {
  rmgmo->writestyle(rmgmo->numLista[(int)ListaStyles->value()]);
  rmgmo->readstyles(rmgmo->StylesFilename);
  Leer_Styles(i);
  }
}

void stygmorgan::GuardaPref() {
  Fl_Preferences stygmorgan (Fl_Preferences::USER, WEBSITE, PACKAGE);
  
  stygmorgan.set("rmgmorganwinX",rmgmorganwin->x());
  stygmorgan.set("rmgmorganwinY",rmgmorganwin->y());
  stygmorgan.set("rmgmorganwinW",rmgmorganwin->w());
  stygmorgan.set("rmgmorganwinH",rmgmorganwin->h());
  
  stygmorgan.set("StylesFilename",rmgmo->StylesFilename);
  stygmorgan.set("SoundsFilename",rmgmo->SoundsFilename);
  stygmorgan.set("PresetFilename",rmgmo->PresetFilename);
  stygmorgan.set("DrumSetFilename",rmgmo->DrumSetFilename);
  stygmorgan.set("RegistrationFilename",rmgmo->RegisFilename);
  
  stygmorgan.set("TypeChordRec",rmgmo->TipoRecChord);
  stygmorgan.set("SplitPoint",rmgmo->split);
  
  stygmorgan.set("Estilo",rmgmo->Estilo);
  stygmorgan.set("Sonido",rmgmo->Sonido);
  stygmorgan.set("Pattern",rmgmo->Variacion);
  stygmorgan.set("Acc_Volume",rmgmo->AccVol);
  stygmorgan.set("Keyb_Volume",rmgmo->KeybVol);
  stygmorgan.set("Transpose",rmgmo->transpose);
}

void stygmorgan::Leer_Registrations() {
  int i;
  BroReg->clear();
  for (i=0;i<rmgmo->numregis;i++)
  BroReg->add(rmgmo->RegisNom[i].Name);
}

void stygmorgan::SetRegistration(int num) {
  rmgmo->isnewr=0;
  memset(&rmgmo->R, 0 ,sizeof(rmgmo->R));
  rmgmo->readregistration(num);
  BroReg->select(num,1);
  PonLaReg();
}

void stygmorgan::ActuaVarios() {
  if(rmgmo->TipoRecChord==1) FG->setonly();
  if(rmgmo->TipoRecChord==2) FGBM->setonly();
  STSync->value(rmgmo->syncstart);
  VolKeyb->value(rmgmo->KeybVol);
  VolKeyb->do_callback();
  VolAcc->value(rmgmo->AccVol);
  VolAcc->do_callback();
  if (rmgmo->sel==0) Sso->setonly();
  if (rmgmo->sel==1) Sst->setonly();
  ActuaDsel();
  AutoFill->value(rmgmo->AFill);
  CSplit->parent()->redraw();
  CSplit->value(rmgmo->split);
  CSplit->do_callback();
  CTranspose->parent()->redraw();
  CTranspose->value(rmgmo->transpose);
}

void stygmorgan::PonLaReg() {
  rmgmo->RegaPon();
  ActuaVarios();
  SetSound(rmgmo->Sonido);
  SelectType->value(0);
  rmgmo->SStipo=0;
  Leer_Styles(rmgmo->Estilo);
  rmgmo->bpm=rmgmo->R.tempo;
  pontempo();
  rmgmo->Variacion=rmgmo->R.Pattern;
  if (rmgmo->bplay) PCVari(0,rmgmo->Variacion); else
  CVari(0,rmgmo->Variacion);
}

void stygmorgan::semabplay() {
  if ( rmgmo->hay )
              {
                rmgmo->hay = 0;
                ponmix();
                VName->label(rmgmo->nStyle.Pattern[rmgmo->Variacion].Name);
                if (( rmgmo->tbotvar[rmgmo->Variacion] >=12) && (rmgmo->tbotvar[rmgmo->Variacion] <=14)) rmgmo->siguiente=0;
                rmgmo->sbot[rmgmo->tbotvar[rmgmo->ultima]]=0;
                rmgmo->sbot[rmgmo->tbotvar[rmgmo->Variacion]]=1;
                ActuaBoton();
              }
  
             if (rmgmo->endi)
              {
                rmgmo->endi=0;
                STST->value(0);
                apaga();
              }
  
             if (rmgmo->sic)
               {
                DCompas->label(rmgmo->dcompas);
                rmgmo->sic=0;
                
               }
               
             if (rmgmo->negra != rmgmo->onegra)
             { 
               
               rmgmo->onegra=rmgmo->negra;
               
               switch(rmgmo->onegra)
                {
  
             case 1:
                N1->activate();
                N2->deactivate();
                N3->deactivate();
                N4->deactivate();
                break;
             case 2:
                N2->activate();
                N1->deactivate();
                N3->deactivate();
                N4->deactivate();
                break;
             case 3:
                N3->activate();
                N2->deactivate();
                N1->deactivate();
                N4->deactivate();
                break;
             case 4:
                N4->activate();
                N2->deactivate();
                N3->deactivate();
                N1->deactivate();
                break;
  
                }
             }
             
            if (rmgmo->semi != rmgmo->osemi)
            { 
              rmgmo->osemi=rmgmo->semi;
              FunciLeds(0);
            }
}

void stygmorgan::sema() {
  if (rmgmo->CambiaMidi)
               {
                 rmgmo->CambiaMidi=0;
                 ActuaMidDevices();
                 rmgmo->Conecta();
               }  
  
  
  if (rmgmo->CambiaTempo)
               {
                rmgmo->CambiaTempo=0; 
                RTempo->value(rmgmo->bpm);
                CTempo->parent()->redraw();
                CTempo->value(rmgmo->bpm);
                }
  
            
    if ((rmgmo->weventeditor==1) && (rmgmo->genmidi==0) &&(rmgmo->PendientesEE > 0))
      {
       time_t ahora;
       int k=rmgmo->PendientesEE;
     
       for (int i=0; i<k; i++)
            {
             ahora=time(NULL); 
             if ((rmgmo->POEE[i].estado==1) && ((ahora >=rmgmo->POEE[i].delta)))
                {
                 rmgmo->POEE[i].estado=0;
                 rmgmo->envionota(rmgmo->POEE[i].canal,rmgmo->POEE[i].nota,0);
                 rmgmo->ActuPenEE(); 
                 }  
             }
            
       }     
            
                     
               
              
              if (rmgmo->ponvum)
               {
               rmgmo->ponvum=0;
               DMidi->value(rmgmo->vum);
               }
  
              if (pera == 2 )
               {
                 pera=0;
                 ImportSty->activate();
                 ListaStyles->activate();
                 Botones->activate();
                 SelectType->activate();
                 STST->activate();
                 BroReg->activate();
  		if (rmgmo->bcancel==2)
                 		{ 
                  		if(rmgmo->bplay)
                  			{
                  			STST->value(0);
                  			STST->do_callback();
                  			}
                  		ListaStyles->do_callback();
                  			
                 		}               
                 	if (rmgmo->bcancel==0) 
                 		{
                  		if(rmgmo->bplay)
                 				 {
                  			  STST->value(0);
                  			  STST->do_callback();
                  			 }
          		        SaveStylesFunction(); 
                		} 
    
               else rmgmo->bcancel=0;
               }
  
  
               if (rmgmo->cc)
               {
               VChord->label(rmgmo->NombreAcorde);
               rmgmo->cc=0;
               }
  
               if (rmgmo->ponstart)
               {
                 rmgmo->ponstart=0;
                 rmgmo->bplay=1;
                 STST->value(1);
                 STST->do_callback();
               }
               
               
              if (rmgmo->cambioc)
             {
                   rmgmo->cambioc=0;
  
                  if (programa==0)
                       {
                         if (rmgmo->sel) Sst->setonly(); else   Sso->setonly();
                         ActuaDsel();
                       }
                   else
                       {
                        switch(rmgmo->sel)
                            {
                              case 0:
  
                                if (programa <= rmgmo->numsounds)
  
                                     {
                                       ListaSounds->value(programa);
                                       ListaSounds->do_callback();
                                    }
                                 break;
                               case 1:
  
                                 if ((programa < 16 ) && (rmgmo->tvb[programa] != 0)) CVari(programa,0);
                                 break;
  
                             }
  
                         }
  
               }
               
      
      
     if  (rmgmo->tapaga==1) 
     { rmgmo->tapaga=0;
       FunciLeds(1);
     }
     
     if (rmgmo->rtplay==1)
      { 
        rmgmo->rtplay=3; 
       if (STST->value()) STST->value(0); else STST->value(1);
       STST->do_callback();
      } 
       
     if (rmgmo->rtplay==2)
      { 
        rmgmo->rtplay=0; 
       if (STST->value()) STST->value(0); else STST->value(0);
       STST->do_callback();
      } 
       
        
     
     if (rmgmo->pbStart)
     {
       rmgmo->pbStart=0;
       if (STST->value()) STST->value(0); else STST->value(1);
       STST->do_callback();
     }
     
      if (rmgmo->pbAutoF)
     {
       rmgmo->pbAutoF=0;
       if (AutoFill->value()) AutoFill->value(0); else AutoFill->value(1);
       AutoFill->do_callback();
     }
}

void stygmorgan::MoreSolo() {
  ActuaOnOff();
  ActuaOnOffP();
}

void stygmorgan::ActuaMidDevices() {
  DMidiInDevice->value(rmgmo->MID);
  DMidiOutDevice->value(rmgmo->MOD);
}

void stygmorgan::labelwin(int i) {
  char temp[512];
  char loque[128];
  
  bzero(loque,sizeof(loque));
  
  
  switch(i)
  {
    case 1:
    sprintf(loque,"Style - %s",rmgmo->nStyle.Name);
    break;
    case 2:
    sprintf(loque,"Registation - %s",rmgmo->R.Name);
    break;
    case 3:
    sprintf(loque,"Style - %s (Data not Saved)",rmgmo->nStyle.Name);
    break;
    case 4:
    sprintf(loque,"Registation - %s (Data not saved)",rmgmo->R.Name);
    break;
    case 5:
    sprintf(loque,"Sound - %s (Data not Saved)",rmgmo->nSound.Name);
  
  }
  
  
  
  bzero(temp,sizeof(temp));
  
  sprintf(temp,"%s %s - %s",PACKAGE,VERSION,loque);
  
  rmgmorganwin->copy_label(temp);
}

void stygmorgan::AcutaLeds(int ifun) {
  Fl_Group * Elg=VumCanal9;
  
  int i;
  int lacosa=0;
  //int lapapa=0;
  
  for(i=9; i<=15;i++)
  {
    if (ifun==1)
    {
     lacosa=0;
   //  lapapa=1;
     }
      else 
     {
      lacosa=rmgmo->lastvelo[i];
   //   lapapa=rmgmo->cocas[i];
     }  
  
  switch(i)
     { 
        
        case 10:
              Elg=VumCanal10;
              break;
        case 11:
              Elg=VumCanal11;
              break;
        case 12:
              Elg=VumCanal12;
              break;
        case 13:
              Elg=VumCanal13;
              break;                        
        case 14:
              Elg=VumCanal14;
              break;
        case 15:
              Elg=VumCanal15;
              break;      
      }        
  
  for ( int t=0; t<Elg->children(); t++ ) 
    {          
      Fl_Widget *w = Elg->child(t);
      
      if (((t+1)*127/7.5) >= lacosa)
        {
             switch(t)
                {
                 case 5:
                 w->color(82);
                 break;
                 case 6:
                 w->color(80);
                 break; 
                 default:
                 w->color(59);
                 } 
        
        }
      else
        {     
             switch(t)
               {
                 case 5:
                 w->color(133);
                 break;
                 case 6:
                 w->color(1);
                 break;
                 default:    
                 w->color(2);
               }  
        }         
     
      w->redraw(); 
    }
    
    rmgmo->cocas[i]=0;
    rmgmo->lastvelo[i]=0;
    
    }
}

void stygmorgan::FunciLeds(int ifun) {
  if (ifun==0)
  {
    AcutaLeds(ifun);
    return;
  }
  
  if (ifun==1)
  {  
    for (int t=9; t<=15; t++)
      {
         rmgmo->lastvelo[t]=0;
         rmgmo->cocas[t]=1;
    
       }  
       
      AcutaLeds(ifun); 
   }
}

void stygmorgan::ActuaBanco(int can) {
  switch(can)
  {
   case 0:
          P0->parent()->redraw();
          P0->value(rmgmo->CM[can].program);
          P0->do_callback();
          break;
  case 1:
   P1->parent()->redraw();
   P1->value(rmgmo->CM[can].program);
          P1->do_callback();
          break;
  case 2:
   P2->parent()->redraw(); 
   P2->value(rmgmo->CM[can].program);
          P2->do_callback();
          break;
  case 3:
   P3->parent()->redraw();
   P3->value(rmgmo->CM[can].program);
          P3->do_callback();
          break;
  case 4:
   P4->parent()->redraw();
   P4->value(rmgmo->CM[can].program);
          P4->do_callback();
          break;
  case 9:
   P9->parent()->redraw();
   P9->value(rmgmo->CM[can].program);
          P9->do_callback();
          break;
   case 10:
    P10->parent()->redraw();
    P10->value(rmgmo->CM[can].program);
          P10->do_callback();
          break;
  case 11:
   P11->parent()->redraw();
   P11->value(rmgmo->CM[can].program);
          P11->do_callback();
          break;
  case 12:
   P12->parent()->redraw();
   P12->value(rmgmo->CM[can].program);
          P12->do_callback();
          break;
  case 13:
   P13->parent()->redraw();
   P13->value(rmgmo->CM[can].program);
          P13->do_callback();
          break;
  case 14:
   P14->parent()->redraw();
   P14->value(rmgmo->CM[can].program);
          P14->do_callback();
          break;
  case 15:
   P15->parent()->redraw();
   P15->value(rmgmo->CM[can].program);
          P15->do_callback();
          break;
  }
}

void stygmorgan::put_icon(Fl_Window* window) {
  hints = NULL;
  XpmCreatePixmapFromData(fl_display, DefaultRootWindow(fl_display),(char **)stygmicon128,&p ,&mask, NULL);
  if (hints == NULL) hints = XGetWMHints(fl_display, fl_xid(window));
  hints->icon_pixmap=p;
  hints->icon_mask=mask; 
  hints->flags = IconPixmapHint | IconMaskHint;
  XSetWMHints(fl_display, fl_xid(window), hints);
  window->icon((char * ) p);
}

void stygmorgan::poninfo(int track, int control, int value) {
  char temp[256];
  bzero(temp,sizeof(temp));
  sprintf(temp,"%s %s=%d",rmgmo->UTNames[track].Nom,rmgmo->UCNames[control].Nom,value);
  DInfoControl->copy_label(temp);
}

void stygmorgan::ActuaDP() {
  if (!rmgmo->CM[0].OnOff) DP0->color((Fl_Color)0);
  else
  DP0->color((Fl_Color)230);
  DP0->redraw();
  if (!rmgmo->CM[1].OnOff) DP1->color((Fl_Color)0);
  else
  DP1->color((Fl_Color)230);
  DP1->redraw();
  if (!rmgmo->CM[2].OnOff) DP2->color((Fl_Color)0);
  else
  DP2->color((Fl_Color)230);
  DP2->redraw();
  if (!rmgmo->CM[3].OnOff) DP3->color((Fl_Color)0);
  else
  DP3->color((Fl_Color)230);
  DP3->redraw();
  if (!rmgmo->CM[4].OnOff) DP4->color((Fl_Color)0);
  else
  DP4->color((Fl_Color)230);
  DP4->redraw();
  if (!rmgmo->CM[9].OnOff) DP9->color((Fl_Color)0);
  else
  DP9->color((Fl_Color)230);
  DP9->redraw();
  if (!rmgmo->CM[10].OnOff) DP10->color((Fl_Color)0);
  else
  DP10->color((Fl_Color)230);
  DP10->redraw();
  if (!rmgmo->CM[11].OnOff) DP11->color((Fl_Color)0);
  else
  DP11->color((Fl_Color)230);
  DP11->redraw();
  if (!rmgmo->CM[12].OnOff) DP12->color((Fl_Color)0);
  else
  DP12->color((Fl_Color)230);
  DP12->redraw();
  if (!rmgmo->CM[13].OnOff) DP13->color((Fl_Color)0);
  else
  DP13->color((Fl_Color)230);
  DP13->redraw();
  if (!rmgmo->CM[14].OnOff) DP14->color((Fl_Color)0);
  else
  DP14->color((Fl_Color)230);
  DP14->redraw();
  if (!rmgmo->CM[15].OnOff) DP15->color((Fl_Color)0);
  else
  DP15->color((Fl_Color)230);
  DP15->redraw();
}
