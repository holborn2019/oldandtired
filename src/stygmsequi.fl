# data file for the Fltk User Interface Designer (fluid)
version 1.0304
i18n_type 1
i18n_include <libintl.h>
i18n_function gettext
header_name {.h}
code_name {.cxx}
decl {//Copyright(c) 2006 Josep Andreu (holborn)} {private local
}

decl {//License GNU/GPL version 2} {private local
}

decl {//Based on gmorgan} {private local
}

decl {\#include <Fl/Fl_Scroll.H>} {public local
}

decl {\#include <FL/Fl_File_Chooser.H>} {public local
}

decl {\#include <Fl/Fl_Preferences.H>} {public local
}

decl {\#include <FL/fl_ask.H>} {public local
}

decl {\#include <FL/Fl_Value_Input.H>} {public local
}

decl {\#include "stygmorgan.h"} {public local
}

class ElScroll {: {public Fl_Scroll}
} {
  Function {ElScroll(int X, int Y, int W, int H, const char* L=0) : Fl_Scroll(X,Y,W,H,L)} {} {
    code {} {}
  }
  Function {resize(int X, int Y,int W, int H)} {open
  } {
    code {int kx,ky;
int p=0;
int q=0;
kx=(W-20)/4;
ky=(H-20)/6;

for ( int t=0; t<children(); t++ ) 
  {          
    Fl_Widget *w = child(t);
    
    long long temp = (long long) w->user_data();
    
    if ((int) temp > 0)
     {
     w->resize((kx*p)+1 ,(ky*q)+1,kx,ky);
     p++;
     if (p==4) 
     {
      p=0;
      q++;
     } 
     }
  }
         
  init_sizes();
  Fl_Scroll::resize(X,Y,W,H);} {}
  }
}

class sequencer {} {
  Function {sequencer(RMGMO *rmgmo_)} {C
  } {
    code {Fl::visual(FL_DOUBLE|FL_INDEX);
Fl::visual(FL_RGB);
rmgmo=rmgmo_;
make_window();
labelwin();

int x,y,w,h;

static const char *pepe [] ={"stygmorgan"};

int argc=1;
char **argv= (char **) pepe;

Fl_Preferences stygmorgan (Fl_Preferences::USER, WEBSITE, PACKAGE);

stygmorgan.get("sequencerwinX",x,4);
stygmorgan.get("sequencerwinY",y,29);
stygmorgan.get("sequencerwinW",w,800);
stygmorgan.get("sequencerwinH",h,600);

stygmseqwin->resize(x,y,w,h);
stygmseqwin->icon((char *)p);
stygmseqwin->show(argc,argv);


void * v=Casi;
Fl::add_timeout(.5,tick,v);} {selected
    }
  }
  decl {RMGMO *rmgmo;} {private local
  }
  Function {tick(void* v)} {return_type {static void}
  } {
    code {Fl_Box *o = (Fl_Box*)v;
o->do_callback();
Fl::repeat_timeout(.04,tick,v);} {}
  }
  Function {make_window()} {} {
    Fl_Window stygmseqwin {
      callback {GuardaPrefs();

rmgmo->bcancel=2;
pera=2;
Fl::remove_timeout(tick);
rmgmo->ctipo=2;
rmgmo->fundi=0;
rmgmo->splay=0;
rmgmo->bass=0;
rmgmo->wsequencer=0;
stygmseqwin->clear();
stygmseqwin->hide();
delete stygmseqwin;}
      xywh {1312 141 800 600} type Double color 44 selection_color 47 labelcolor 7 hide resizable size_range {800 600 0 0}
    } {
      Fl_Menu_Bar {} {open
        xywh {0 0 800 25} box FLAT_BOX color 44 selection_color 47 labelcolor 7 textcolor 7
      } {
        Submenu {} {
          label {&File} open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label New
            callback {NewSong();}
            xywh {0 0 100 20} divider
          }
          MenuItem {} {
            label {Load Song}
            callback {char *filename;
filename=fl_file_chooser("Load Song:","(*.stysong)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".stysong");
rmgmo->loadsong(filename);
Titulo->value(SongF.title);
STempo->value(SongF.bpm);
Slider->value(1);
MTempoTrack->value(SongF.MasterT);
GeneraScroll();
labelwin();
rmgmo->readstyle(S[1].style);
MetePats();
Slider->do_callback();}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Save Song}
            callback {char *filename;
\#define EXT ".stysong"
filename=fl_file_chooser("Save Song:","*.stysong",SongF.title,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
\#undef EXT
SongF.bpm=(int)STempo->value();
rmgmo->savesong(filename);}
            xywh {0 0 100 20} divider
          }
          MenuItem {} {
            label {Export Midi File}
            callback {if (CheckForExport()) return;

char *filename;
\#define EXT ".mid"
filename=fl_file_chooser("Export to Midi File:","*.mid",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
\#undef EXT
rmgmo->saveMidiFile(filename);
rmgmo->cas=1;}
            xywh {0 0 100 20} divider
          }
          MenuItem {} {
            label Close
            callback {stygmseqwin->do_callback();}
            xywh {0 0 100 20}
          }
        }
        Submenu {} {
          label {&Edit}
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label Copy
            callback {PreparaEdit(1);}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label Delete
            callback {PreparaEdit(2);}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label Move
            callback {PreparaEdit(3);}
            xywh {0 0 100 20}
          }
        }
        MenuItem {} {
          label {Tempo Track}
          callback {prepara_WTT();
WTT->hide();
WTT->position(x+30,y+30);
prepara_WTT();

static const char *pepe [] ={"stygmorgan"};

int argc=1;
char **argv= (char **) pepe;

WTT->icon((char *)p);

WTT->show(argc,argv);}
          xywh {0 0 100 20}
        }
        Submenu {} {
          label {&Help}
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label Help
            callback {rmgmo->ventana=7;}
            xywh {0 0 100 20} shortcut 0xffbe divider
          }
          MenuItem {} {
            label About
            callback {if(wabout) return;
wabout=1;
rmgmo->ventana=1;}
            xywh {0 0 100 20}
          }
        }
      }
      Fl_Group {} {
        xywh {0 25 800 40} color 44 selection_color 47 labelcolor 7
      } {
        Fl_Input Titulo {
          label Title
          callback {strcpy(SongF.title,o->value());
labelwin();}
          xywh {40 30 225 30} box BORDER_BOX color 46 selection_color 47 labelsize 11 labelcolor 7 textsize 16 textcolor 1
        }
        Fl_Value_Input STempo {
          label Tempo
          callback {SongF.bpm=(int)o->value();
rmgmo->bpm=SongF.bpm;
rmgmo->set_tempo();}
          xywh {745 30 45 30} box BORDER_BOX color 46 selection_color 47 labelsize 11 labelcolor 7 minimum 20 maximum 300 step 1 value 120 textsize 19 textcolor 1
        }
      }
      Fl_Group Displays {
        xywh {0 465 800 135} box DOWN_BOX color 44 selection_color 47 labelcolor 7
      } {
        Fl_Browser BroSty {
          label Styles
          xywh {5 480 205 115} type Select box FLAT_BOX color 44 selection_color 47 labelsize 11 labelcolor 7 align 1 textcolor 7
        }
        Fl_Browser BroPat {
          label Patterns
          xywh {215 480 125 115} box FLAT_BOX color 44 selection_color 47 labelsize 11 labelcolor 7 align 1 textcolor 7
        }
        Fl_Button Patras {
          label {@|<}
          callback {Slider->value(1);
Slider->do_callback();
Scr->scroll_to(0,0);
UpdateBros();}
          xywh {560 565 30 30} box PLASTIC_THIN_UP_BOX color 11 selection_color 3 align 96
        }
        Fl_Slider Slider {
          callback {char tmp[6];
rmgmo->cas=(int)o->value();
bzero(tmp,sizeof(tmp));
sprintf(tmp,"%d",rmgmo->cas);
Casi->copy_label(tmp);
if (SongF.MasterT)  rmgmo->BuscaTempo();
else 
{ 
if(SongF.bpm != 0 ) 
 rmgmo->bpm=SongF.bpm;
else rmgmo->bpm=120;
}
STempo->value(rmgmo->bpm);
UpdateBros();}
          xywh {595 565 205 30} type {Horz Knob} color 44 selection_color 4 labelsize 11 labelcolor 7 align 5 minimum 1 maximum 128 step 1
        }
        Fl_Button SSTST {
          label {Start/Stop}
          callback {rmgmo->splay=(int)o->value();

if (rmgmo->splay)
{
prepara();
rmgmo->ostart();
}
else
{
rmgmo->ostop();
rmgmo->tapaga=1;
}}
          xywh {710 515 86 46} type Toggle box PLASTIC_THIN_UP_BOX color 11 selection_color 3 labelsize 12
        }
        Fl_Box Casi {
          label 1
          callback {if(rmgmo->nic)
{
 rmgmo->nic=0;
 char tmp[12];
 bzero(tmp,sizeof(tmp));
 sprintf(tmp,"%d/%d",rmgmo->scompas,rmgmo->vnegra); 
 Bar->copy_label(tmp);
 UpdateInputs(rmgmo->cas,rmgmo->vnegra);
 
 
}  

if (rmgmo->sic)
{
 rmgmo->sic=0;
 Slider->value(rmgmo->cas);
 Slider->do_callback();
 UpdateBros();
}

if (rmgmo->cc1)
{
  rmgmo->cc1=0;
  NomChord->copy_label(rmgmo->NombreAcorde);
}

if (rmgmo->finito)
{
  rmgmo->finito=0;
  SSTST->value(0);
  SSTST->do_callback();
}

if(rmgmo->MTempo)
 {
   STempo->value(rmgmo->MTempo);
   rmgmo->MTempo=0;
 }
 
if (rmgmo->CNStyle)
{
  rmgmo->CNStyle=0;
  NomStyle->copy_label(rmgmo->nStyle.Name);
}


if (rmgmo->CNPattern)
{
   rmgmo->CNPattern=0;
   NomPattern->copy_label(rmgmo->nStyle.Pattern[rmgmo->Variacion].Name);
}}
          xywh {710 480 32 30} box BORDER_BOX color 44 selection_color 47 labelcolor 1 align 88
        }
        Fl_Box Bar {
          label 1
          xywh {746 480 50 30} box BORDER_BOX color 44 selection_color 47 labelcolor 1 align 24
        }
        Fl_Browser BroChord {
          label Chords
          xywh {350 480 95 115} color 44 selection_color 47 labelsize 11 labelcolor 7 align 1 textcolor 7
        }
        Fl_Box {} {
          label Cell
          xywh {710 465 40 15} color 44 labelsize 11 labelcolor 7
        }
        Fl_Box {} {
          label Bar
          xywh {755 465 40 15} color 44 labelsize 11 labelcolor 7
        }
        Fl_Box NomChord {
          label C
          xywh {560 520 145 40} box BORDER_BOX color 44 selection_color 47 labelsize 20 labelcolor 1 align 16
        }
        Fl_Button MTempoTrack {
          label {Tempo Track}
          callback {SongF.MasterT = (int) o->value();}
          xywh {455 565 95 30} type Toggle box PLASTIC_THIN_UP_BOX color 11 selection_color 3 labelsize 12
        }
        Fl_Box NomStyle {
          xywh {450 470 255 45} box BORDER_BOX color 44 selection_color 47 labelsize 20 labelcolor 1 align 16
        }
        Fl_Box NomPattern {
          label {Fill In AB}
          xywh {450 520 105 40} box BORDER_BOX color 44 selection_color 47 labelsize 20 labelcolor 1 align 16
        }
      }
      Fl_Scroll Scr {
        xywh {0 65 800 400} type BOTH_ALWAYS color 44 selection_color 47 labelcolor 7 resizable
        class ElScroll
      } {}
    }
    code {int i;
char tmp[128];

for (i=0;i<rmgmo->numstyles;i++)
{
 bzero(tmp,sizeof(tmp));
 sprintf(tmp,"%d - %s",i+1,rmgmo->StyleNom[i].Name);
 BroSty->add(tmp);
 }
 
for (i=0; i<=33; i++) BroChord->add(rmgmo->ChN[i].Nom);

MTempoTrack->value(SongF.MasterT);
Slider->value(rmgmo->cas);
Slider->do_callback();
Titulo->value(SongF.title);

GeneraScroll();} {}
  }
  Function {song_call(Fl_Input* o, void* v)} {return_type {static void}
  } {
    code {((sequencer*)(o->parent()->parent()->parent()->user_data()))->song_call_i(o,v);} {}
  }
  Function {song_call_i(Fl_Input* o, void*)} {return_type {inline void}
  } {
    code {long long kd = (long long) o->user_data();

if (kd <= 128)
{
 if (rmgmo->CheckChord((char *) o->value())== 1 ) strcpy(S[kd].ch1,(char *) o->value());
 else
 saca_error(1);
 return;
} 
 
 
 
 
if ((kd > 128) && (kd <=256))
{
 if (rmgmo->CheckChord((char *) o->value())== 1 ) strcpy(S[kd-128].ch2,(char *) o->value());
 else
  saca_error(1);
 return;
}



if ((kd > 768) && (kd <=896))
{
 strcpy(S[kd-768].go_to,(char *) o->value());
 return;
}



if ((kd > 1152) && (kd <=1280))
{
 if (rmgmo->CheckChord((char *) o->value())== 1 )  strcpy(S[kd-1152].ch3,(char *) o->value());
else
  saca_error(1);
 return;
}





if ((kd > 1280) && (kd <=1408)) 
{
 if (rmgmo->CheckChord((char *) o->value())== 1 )  strcpy(S[kd-1280].ch4,(char *) o->value());
else
  saca_error(1);
 return;
}






if ((kd > 1664) && (kd <=1792)) strcpy(S[kd-1664].go_af,(char *) o->value());} {}
  }
  Function {song_call1(Fl_Value_Input* o, void* v)} {return_type {static void}
  } {
    code {((sequencer*)(o->parent()->parent()->parent()->user_data()))->song_call1_i(o,v);} {}
  }
  Function {song_call1_i(Fl_Value_Input* o, void*)} {return_type void
  } {
    code {long long kd = (long long) o->user_data();
int j;

if ((kd > 896) && (kd <=1024))
{
 S[kd-896].times = (int) o->value();
 return;
} 

if ((kd > 1024) && (kd <=1152))
{
 j = kd -1024;
 S[j].style = (int)o->value();
 S[j].pattern=1;

if (rmgmo->splay) return;

rmgmo->Estilo=(int)o->value();
rmgmo->readstyle(rmgmo->Estilo);
BroSty->value(rmgmo->Estilo);
MetePats();

 for ( int t=0; t<o->parent()->children(); t++ ) 
  {          
    Fl_Widget *w = o->parent()->child(t);
    long long temp = (long long) w->user_data();
    
    if (temp ==(4096+j))
      { 
        Fl_Value_Input* k;
        k =  (Fl_Value_Input*) w; 
        k->value(S[j].pattern);
      }  
   }

int t1=j;

while ((t1)<=128)
     {
     if ((t1>j) && (S[t1].style != 0 )) break; 
     
       Fl_Group * g = (Fl_Group*) Scr->child(t1-1);
    
          for ( int t=1; t<21; t++ )  
                {
                 Fl_Widget *w = g->child(t);

                 long long temp1 = (long long) w->user_data();    
              
                 if (temp1 ==(1280+t1))
                   {
                      switch(rmgmo->divisor)
                           {
                            case 4:
                              w->activate();
                              break;
                            case 5:
                              w->activate();
                              break;
                            default:
                              w->deactivate();
                            } 
                   }    
       
                if (temp1 ==(1152+t1))
                  {
                     switch(rmgmo->divisor)
                         {
                            case 2:
                             w->deactivate();
                             break;
                            case 6:
                             w->deactivate();
                             break;
                             default:
                             w->activate();
                         } 
                   }    
  
                }
           
      t1++;  
     }   
return;
}

if ((kd > 1792) && (kd <=1920))
 {
   S[kd-1792].atimes = (int) o->value();
   return;
 }  

if ((kd > 4096) && (kd <=4224)) 
{
S[kd-4096].pattern = (int) o->value();

if(rmgmo->splay) return;

if (S[kd-4096].style != 0) 
{
rmgmo->readstyle(S[kd-4096].style);
BroSty->value(S[kd-4096].style);
}
else
for (int i=kd-4096; i>0; i--)
{
  if (S[i].style != 0)
   {
     rmgmo->readstyle(S[i].style);
     BroSty->value(S[i].style);
     break;
    }   
}

MetePats();
if ((BroPat->size()>0 ) && ((int)o->value()<=BroPat->size()))
BroPat->value((int)o->value());
}} {}
  }
  Function {song_call2(Fl_Button* o, void* v)} {return_type {static void}
  } {
    code {((sequencer*)(o->parent()->parent()->parent()->user_data()))->song_call2_i(o,v);} {}
  }
  Function {song_call2_i(Fl_Button* o, void*)} {C return_type {inline void}
  } {
    code {int i;
long long kd = (long long) o->user_data();
if ((kd > 256) && (kd <=384))
{
 for(i=1; i<=128; i++)
  { 
   if ((S[i].a != 0) && (i != (kd -256)))
     {
       fl_alert("Another 'A' point is selected. Please Correct.");
       o->value(0);
       S[kd-256].a = (int) o->value();
       return;
     }
  }
 
  S[kd-256].a = (int) o->value();
  return;
}



if ((kd > 384) && (kd <=512)) 
{
 for(i=1; i<=128; i++)
  { 
   if ((S[i].b != 0) && (i != (kd-384)))
     {
       fl_alert("Another 'B' point is selected. Please Correct.");
       o->value(0);
       S[kd-384].b = (int) o->value();
       return;
     }
  }

S[kd-384].b = (int) o->value();
return; 
}




if ((kd > 512) && (kd <=640))
{
  for(i=1; i<=128; i++)
  { 
   if ((S[i].c != 0) && (i != (kd -512)))
     {
       fl_alert("Another 'C' point is selected. Please Correct.");
       o->value(0);
       S[kd-512].c = (int) o->value();
       return;
     }
  }

 S[kd-512].c = (int) o->value();
 return;
}




if ((kd > 640) && (kd <=768))
{
 for(i=1; i<=128; i++)
  { 
   if ((S[i].d != 0) && (i != (kd-640)))
     {
       fl_alert("Another 'D' point is selected. Please Correct.");
       o->value(0);
        S[kd-640].d = (int) o->value();
       return;
     }
  }
 S[kd-640].d = (int) o->value();
 return;
}






if ((kd > 3500) && (kd <=3628))
{
 for(i=1; i<=128; i++)
  { 
   if ((S[i].e != 0) && (i != (kd-3500)))
     {
       fl_alert("Another 'E' point is selected. Please Correct.");
       o->value(0);
       S[kd-3500].e = (int) o->value();
       return;
     }
  }
 S[kd-3500].e = (int) o->value();
 return;

}





if ((kd > 3700) && (kd <=3828))
{
 for(i=1; i<=128; i++)
  { 
   if ((S[i].f != 0) && (i != (kd-3700)))
     {
       fl_alert("Another 'F' point is selected. Please Correct.");
       o->value(0);
       S[kd-3700].f = (int) o->value();
       return;
     }
  }
 S[kd-3700].f = (int) o->value();
 return;
}





if ((kd > 1920) && (kd <=2048))
{
 for(i=1; i<=128; i++)
  { 
   if ((S[i].fin != 0) && (i != (kd-1920)))
     {
       fl_alert("Another 'End' point is selected. Please Correct.");
       o->value(0);
       S[kd-1920].fin = (int) o->value();
       return;
     }
  }
 S[kd-1920].fin = (int) o->value();
 return;
}




if ((kd > 2048) && (kd <=2176))
{

 
 if (S[kd-2048].ar16) 
	 { 
	 o->value(0);
   	 return;
 	 }
 	 else S[kd-2048].ar8 = (int) o->value();
 return;
 }




if ((kd > 2176) && (kd <=2304))
{
 
if (S[kd-2176].ar8)
	{
 	 o->value(0);
 	 return;
	}
else S[kd-2176].ar16 = (int) o->value();
return;
}



if ((kd > 3100) && (kd <=3228))
{

 
 if (S[kd-3100].ar16a) 
	 { 
	 o->value(0);
   	 return;
 	 }
 	 else S[kd-3100].ar8a = (int) o->value();
  return;    
 }




if ((kd > 3300) && (kd <=3428))
{
 
if (S[kd-3300].ar8a)
	{
 	 o->value(0);
 	 return;
	}
else S[kd-3300].ar16a = (int) o->value();

}} {}
  }
  Function {GeneraScroll()} {} {
    code {int i,x,y;
char tmp[64];
int num=0;
Scr->clear();

 
 for(i=1; i<=128; i++)
 
{  
 
  x = (((i-1) % 4) * 200)+ 1;  
  
 if (i < 5 ) y = 1; else  y = (((i-1)/ 4)  * 124) + 1; 
  
  
  num++;
  
  bzero(tmp,sizeof(tmp));
  sprintf(tmp,"%d",i);
    
            
      Fl_Group* ob = new Fl_Group( x , y, 199, 124);
            
      ob->box(FL_THIN_UP_BOX);
      ob->color(44);
      ob->labelsize(9);
      ob->labelcolor(88);
      ob->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
      ob->copy_label(tmp);
      //k=1000+i;
      ob->user_data((void *) i);
      ob->begin();
      
      Fl_Input* oin1 = new Fl_Input( x+1, y+1, 48,50);
      oin1->box(FL_BORDER_BOX);
      oin1->color(46);
      oin1->textcolor(7);
      oin1->textsize(11);
      oin1->user_data((void*) num);
      oin1->value(S[num].ch1);
      oin1->callback((Fl_Callback *)song_call);
      ob->add(oin1);
  
      Fl_Input* oin2 = new Fl_Input( x+50, y+1, 48,50);
      oin2->box(FL_BORDER_BOX);
      oin2->color(46);
      oin2->textcolor(7);
      oin2->textsize(11);
      oin2->user_data((void*) (128 + num));
      oin2->value(S[num].ch2);
      oin2->callback((Fl_Callback *)song_call);
      ob->add(oin2);
  
      Fl_Input* oin3 = new Fl_Input( x+99, y+1, 48,50);
      oin3->box(FL_BORDER_BOX);
      oin3->color(46);
      oin3->textcolor(7);
      oin3->textsize(11);
      oin3->user_data((void*) (1152 + num));
      oin3->value(S[num].ch3);
      oin3->callback((Fl_Callback *)song_call);
      ob->add(oin3);
 
      Fl_Input* oin4 = new Fl_Input( x+148, y+1, 48,50);
      oin4->box(FL_BORDER_BOX);
      oin4->color(46);
      oin4->textcolor(7);
      oin4->textsize(11);
      oin4->user_data((void*) (1280 + num));
      oin4->value(S[num].ch4);
      oin4->callback((Fl_Callback *)song_call);
      ob->add(oin4);     
      
       
            
      Fl_Button* but1 = new Fl_Button(x+27, y+98, 12,20,"A");
      but1->type(1);
      but1->box(FL_PLASTIC_THIN_UP_BOX);
      but1->color(11);
      but1->selection_color(3);
      but1->labelsize(10);
      but1->user_data((void*) (256 + num));
      but1->value(S[num].a);
      but1->callback((Fl_Callback *)song_call2);
      ob->add(but1);
      
      Fl_Button* but2 = new Fl_Button(x+40, y+98, 12,20,"B");
      but2->type(1);
      but2->box(FL_PLASTIC_THIN_UP_BOX);
      but2->selection_color(3);
      but2->color(11);
      but2->labelsize(10);
      but2->user_data((void*) (384 + num));
      but2->value(S[num].b);
      but2->callback((Fl_Callback *)song_call2);
      ob->add(but2);
      
      Fl_Button* but3 = new Fl_Button(x+53, y+98, 12,20,"C");
      but3->type(1);
      but3->box(FL_PLASTIC_THIN_UP_BOX);
      but3->selection_color(3);
      but3->color(11);
      but3->labelsize(10);
      but3->user_data((void*) (512 + num));
      but3->value(S[num].c);
      but3->callback((Fl_Callback *)song_call2);
      ob->add(but3);
      
      Fl_Button* but4 = new Fl_Button(x+66, y+98, 12,20,"D");
      but4->type(1);
      but4->box(FL_PLASTIC_THIN_UP_BOX);
      but4->selection_color(3);
      but4->color(11);
      but4->labelsize(10);
      but4->user_data((void*) (640 + num));
      but4->value(S[num].d);
      but4->callback((Fl_Callback *)song_call2);
      ob->add(but4);
      
      Fl_Button* but5 = new Fl_Button(x+79, y+98, 12,20,"E");
      but5->type(1);
      but5->box(FL_PLASTIC_THIN_UP_BOX);
      but5->selection_color(3);
      but5->color(11);
      but5->labelsize(10);
      but5->user_data((void*) (3500 + num));
      but5->value(S[num].e);
      but5->callback((Fl_Callback *)song_call2);
      ob->add(but5);
      
      Fl_Button* but6 = new Fl_Button(x+92, y+98, 12,20,"F");
      but6->type(1);
      but6->box(FL_PLASTIC_THIN_UP_BOX);
      but6->selection_color(3);
      but6->color(11);
      but6->labelsize(10);
      but6->user_data((void*) (3700 + num));
      but6->value(S[num].f);
      but6->callback((Fl_Callback *)song_call2);
      ob->add(but6);
      
      
     Fl_Input* oin5 = new Fl_Input(x+140, y+98, 12, 20, "To");
      oin5->box(FL_FLAT_BOX);
      oin5->labelsize(10);
      oin5->align(FL_ALIGN_LEFT);
      oin5->color(46);
      oin5->textcolor(7);
      oin5->labelcolor(7);
      oin5->user_data((void*) (768 + num));
      oin5->value(S[num].go_to);
      oin5->callback((Fl_Callback *)song_call);
      ob->add(oin5);

      Fl_Value_Input* val1 = new Fl_Value_Input(x+173, y+98, 20, 20,"Rp.");
      val1->box(FL_FLAT_BOX);
      val1->labelsize(10);
      val1->textcolor(7);
      val1->align(FL_ALIGN_LEFT);
      val1->color(46);
      val1->labelcolor(7);
      val1->maximum(99);
      val1->step(1);
      val1->user_data((void*) (896 + num));
      val1->value(S[num].times);
      val1->callback((Fl_Callback *)song_call1);

      ob->add(val1);

     Fl_Input* oin6 = new Fl_Input(x+140, y+76, 12, 20, "To");
      oin6->box(FL_FLAT_BOX);
      oin6->labelsize(10);
      oin6->textcolor(7);
      oin6->align(FL_ALIGN_LEFT);
      oin6->color(46);
      oin6->textcolor(7);
      oin6->labelcolor(7);
      oin6->user_data((void*) (1664 + num));
      oin6->value(S[num].go_af);
      oin6->callback((Fl_Callback *)song_call);

      ob->add(oin6);

      Fl_Value_Input* val4 = new Fl_Value_Input(x+173, y+76, 20, 20,"At.");
      val4->box(FL_FLAT_BOX);
      val4->labelsize(10);
      val4->labelcolor(7);
      val4->textcolor(7);
      val4->align(FL_ALIGN_LEFT);
      val4->color(46);
      val4->maximum(99);
      val4->step(1);
      val4->user_data((void*) (1792 + num));
      val4->value(S[num].atimes);
      val4->callback((Fl_Callback *)song_call1);
      ob->add(val4);
 
 
 
 
 
 
 
     Fl_Value_Input* val2 = new Fl_Value_Input(x+22, y+76, 25, 20,"Sty.");
      val2->box(FL_FLAT_BOX);
      val2->labelsize(10);
      val2->align(FL_ALIGN_LEFT);
      val2->color(46);
      val2->labelcolor(7);
      val2->textcolor(7);
      val2->maximum(rmgmo->numstyles);
      val2->step(1);
      val2->user_data((void*) (1024 + num));
      val2->value(S[num].style);
      val2->callback((Fl_Callback *)song_call1);

      ob->add(val2);
      
     Fl_Value_Input* val3 = new Fl_Value_Input(x+68, y+76, 20, 20,"Pat.");
      val3->box(FL_FLAT_BOX);
      val3->labelsize(10);
      val3->align(FL_ALIGN_LEFT);
      val3->color(46);
      val3->labelcolor(7);
      val3->textcolor(7);
      val3->maximum(21);
      val3->step(1);
      val3->user_data((void*) (4096 + num));
      val3->value(S[num].pattern);
      val3->callback((Fl_Callback *)song_call1);

      ob->add(val3);
      
      
      Fl_Button* but8 = new Fl_Button(x+170, y+52, 12,20,"8");
      but8->type(1);
      but8->box(FL_PLASTIC_THIN_UP_BOX);
      but8->color(59);
      but8->selection_color(2);
      but8->labelsize(11);
      but8->user_data((void*) (2048 + num));
      but8->value(S[num].ar8);
      but8->callback((Fl_Callback *)song_call2);

      ob->add(but8);
      
      Fl_Button* but16 = new Fl_Button(x+184, y+52, 12,20,"16");
      but16->type(1);
      but16->box(FL_PLASTIC_THIN_UP_BOX);
      but16->color(59);
      but16->selection_color(2);
      but16->labelsize(11);
      but16->user_data((void*) (2176 + num));
      but16->value(S[num].ar16);
      but16->callback((Fl_Callback *)song_call2);

      Fl_Button* but8a = new Fl_Button(x+72, y+52, 12,20,"8");
      but8a->type(1);
      but8a->box(FL_PLASTIC_THIN_UP_BOX);
      but8a->color(59);
      but8a->selection_color(2);
      but8a->labelsize(11);
      but8a->user_data((void*) (3100 + num));
      but8a->value(S[num].ar8a);
      but8a->callback((Fl_Callback *)song_call2);

      ob->add(but8a);
      
      Fl_Button* but16a = new Fl_Button(x+86, y+52, 12,20,"16");
      but16a->type(1);
      but16a->box(FL_PLASTIC_THIN_UP_BOX);
      but16a->color(59);
      but16a->selection_color(2);
      but16a->labelsize(11);
      but16a->user_data((void*) (3300 + num));
      but16a->value(S[num].ar16a);
      but16a->callback((Fl_Callback *)song_call2);




      ob->add(but16);
      
      Fl_Button* butX = new Fl_Button(x+1, y+52, 26,22,"End");
      butX->type(1);
      butX->color(59);
      butX->box(FL_PLASTIC_THIN_UP_BOX);
      butX->selection_color(2);
      butX->labelsize(10);
      butX->user_data((void*) (1920 + num));
      butX->value(S[num].fin);
      butX->callback((Fl_Callback *)song_call2);
      ob->add(butX);
      
      
      ob->end(); 
      
      Scr->add_resizable(*ob);
      Scr->resize(Scr->x(),Scr->y(),Scr->h(),Scr->w());
                
}

int t1=1;


while ((t1)<=128)
     {
     if (S[t1].style != 0 ) rmgmo->readstyle(S[t1].style); 
     
       Fl_Group * g = (Fl_Group*) Scr->child(t1-1);
    
          for ( int t=1; t<21; t++ )  
                {
                 Fl_Widget *w = g->child(t);

                 long long temp= (long long) w->user_data();
              
                 if ( temp ==(1280+t1))
                   {
                      switch(rmgmo->divisor)
                           {
                            case 4:
                              w->activate();
                              break;
                            case 5:
                              w->activate();
                              break;
                            default:
                              w->deactivate();
                            } 
                   }    
       
                   
       
                if (temp ==(1152+t1))
                  {
                     switch(rmgmo->divisor)
                         {
                            case 2:
                             w->deactivate();
                             break;
                            case 6:
                             w->deactivate();
                             break;
                             default:
                             w->activate();
                         } 
                   }    
  
                }
           
      t1++;  
     }   

Scr->redraw();    
Fl::flush();} {}
  }
  Function {GuardaPrefs()} {} {
    code {Fl_Preferences stygmorgan (Fl_Preferences::USER, WEBSITE, PACKAGE);

stygmorgan.set("sequencerwinX",stygmseqwin->x());
stygmorgan.set("sequencerwinY",stygmseqwin->y());
stygmorgan.set("sequencerwinW",stygmseqwin->w());
stygmorgan.set("sequencerwinH",stygmseqwin->h());} {}
  }
  Function {NewSong()} {} {
    code {memset(S,0 ,sizeof S);
memset(&SongF, 0, sizeof S);
GeneraScroll();
Titulo->value("");
STempo->value(120);
Slider->value(1);
Slider->do_callback();
MTempoTrack->value(0);
Patras->do_callback();} {}
  }
  Function {prepara()} {} {
    code {int vari=1;
int i;

 rmgmo->rela=1.0;
 rmgmo->lppq=1; 
 
if (S[rmgmo->cas].style != 0)
{ rmgmo->Estilo=S[rmgmo->cas].style;
 rmgmo->readstyle(rmgmo->Estilo);
 rmgmo->CNStyle=1;
 rmgmo->CNPattern=1;
} 
else
{
for (i=rmgmo->cas;i>=1;i--)
{
if (S[i].style != 0)
{
 rmgmo->Estilo=S[i].style;
 rmgmo->readstyle(rmgmo->Estilo);
 rmgmo->CNStyle=1;
 rmgmo->CNPattern=1;
 break;
}
} 
}
rmgmo->bpm = (int)STempo->value();
if (SongF.MasterT)
{
 rmgmo->BuscaTempo();
 STempo->value(rmgmo->bpm); 
}
rmgmo->set_tempo();

if(S[rmgmo->cas].pattern != 0) vari=S[rmgmo->cas].pattern;
else
{
for (i=rmgmo->cas;i>=1;i--)
{
if(S[i].pattern != 0)
{
 vari=S[i].pattern;
 break;
}
}
} 

rmgmo->PonPatron(vari);
rmgmo->CNPattern=1;
rmgmo->MiraAcorde(rmgmo->cas,1);
rmgmo->BuscaRepes();} {}
  }
  Function {prepara_WTT()} {} {
    Fl_Window WTT {
      label {Tempo Track}
      xywh {1454 328 285 325} type Double color 44 selection_color 47 labelcolor 7 hide
    } {
      Fl_Browser TempoTrackBrowser {
        callback {int i = (int) o->value();
WTTBar->value(SongF.TemT[i].bar);
WTTBlack->value(SongF.TemT[i].black);
WTTTempo->value(SongF.TemT[i].tempo);}
        xywh {5 5 150 315} type Hold color 44 selection_color 47 labelcolor 7 textsize 12 textcolor 7
      }
      Fl_Value_Input WTTBar {
        label Bar
        xywh {240 25 40 25} color 44 selection_color 47 labelsize 11 labelcolor 7 minimum 1 maximum 4000 step 1 value 1 textsize 12 textcolor 7
      }
      Fl_Value_Input WTTTempo {
        label Tempo
        xywh {240 85 40 25} color 44 selection_color 47 labelsize 11 labelcolor 7 minimum 20 maximum 300 step 1 value 120 textsize 12 textcolor 7
      }
      Fl_Button {} {
        label Modify
        callback {if (CheckTempoValues()) return;

char temp[64];
int i = (int) TempoTrackBrowser->value();
SongF.TemT[i].bar = (int) WTTBar->value();
SongF.TemT[i].black = (int) WTTBlack->value();
SongF.TemT[i].tempo = (int) WTTTempo->value();
bzero(temp,sizeof(temp));
sprintf(temp, "B-%03d-%d T-%03d",SongF.TemT[i].bar,SongF.TemT[i].black,SongF.TemT[i].tempo);
TempoTrackBrowser->text(i,temp);}
        xywh {170 165 110 30} box PLASTIC_THIN_UP_BOX color 11 selection_color 3 labelsize 12 align 80
      }
      Fl_Value_Input WTTBlack {
        label {Quarter Note}
        xywh {240 55 40 25} color 44 selection_color 47 labelsize 11 labelcolor 7 minimum 1 maximum 4 step 1 value 1 textsize 12 textcolor 7
      }
      Fl_Button {} {
        label Delete
        callback {int i = (int) TempoTrackBrowser->value();
if (i != 1)
{
TempoTrackBrowser->remove(i);
rmgmo->BorraTiempo(i);
}}
        xywh {170 200 110 30} box PLASTIC_THIN_UP_BOX color 11 selection_color 3 labelsize 12 align 80
      }
      Fl_Button {} {
        label Add
        callback {if (CheckTempoValues()) return;

char temp[64];
int i = 1;
i = rmgmo->BuscaPosTempo((int)WTTBar->value(),(int)WTTBlack->value());

if (i==0) 
{
fl_message("Sorry Track Full");
return;
}

rmgmo->InsertaTiempo(i);
SongF.TemT[i].bar = (int) WTTBar->value();
SongF.TemT[i].black = (int) WTTBlack->value();
SongF.TemT[i].tempo = (int) WTTTempo->value();
bzero(temp,sizeof(temp));
sprintf(temp, "B-%03d-%d Tempo=%03d",SongF.TemT[i].bar,SongF.TemT[i].black, SongF.TemT[i].tempo);
TempoTrackBrowser->insert(i,temp);
TempoTrackBrowser->select(i);}
        xywh {170 130 110 30} box PLASTIC_THIN_UP_BOX color 11 selection_color 3 labelsize 12 align 80
      }
      Fl_Button {} {
        label {Clear All}
        callback {char temp[64];
TempoTrackBrowser->clear();
memset(SongF.TemT, 0 , sizeof SongF.TemT);

 SongF.TemT[1].bar = 1;
 SongF.TemT[1].black = 1;
 SongF.TemT[1].tempo = (int) STempo->value();

bzero(temp,sizeof(temp));
sprintf(temp, "B-%03d-%d Tempo=%03d",SongF.TemT[1].bar,SongF.TemT[1].black, SongF.TemT[1].tempo);
TempoTrackBrowser->add(temp);
TempoTrackBrowser->select(1);}
        xywh {170 235 110 30} box PLASTIC_THIN_UP_BOX color 11 selection_color 3 labelsize 12 align 80
      }
      Fl_Button {} {
        label Close
        callback {WTT->hide();
WTT->clear();
delete WTT;}
        xywh {170 290 110 30} box PLASTIC_THIN_UP_BOX color 11 selection_color 3 labelsize 12 align 80
      }
    }
    code {int i;
char temp[128];
   
    WTTBar->value(SongF.TemT[1].bar);
    WTTBlack->value(SongF.TemT[1].black);
    WTTTempo->value(SongF.TemT[1].tempo);  
    TempoTrackBrowser->clear();

for (i=1; i<200; i++)
{
 if ((int)SongF.TemT[i].bar == 0 ) break;
 bzero(temp,sizeof(temp));
 sprintf(temp, "B-%03d-%d Tempo=%03d",SongF.TemT[i].bar,SongF.TemT[i].black, SongF.TemT[i].tempo);
 TempoTrackBrowser->add(temp); 

}

TempoTrackBrowser->select(1);} {}
  }
  Function {CheckTempoValues()} {return_type int
  } {
    code {if (((int) WTTBlack->value() > 4) || ((int) WTTBlack->value() < 1))
{
 fl_message("Sorry quarter note (1-4) only");
 return(1);
}
if (((int) WTTTempo->value() > 300) || ((int) WTTTempo->value() < 20))
{
 fl_message("Sorry Tempo (20-300) only");
 return(1);
}

return(0);} {}
  }
  Function {saca_error(int num)} {} {
    code {switch (num)
  {
      case 1:
           fl_alert("Sorry but not seems a valid chord");
           break;
   }} {}
  }
  Function {PreparaEdit(int imenufunc)} {} {
    Fl_Window EditSeqwin {
      callback {EditSeqwin->hide();
EditSeqwin->clear();
delete EditSeqwin;}
      xywh {108 161 250 175} type Double color 44 selection_color 47 labelcolor 7 hide
    } {
      Fl_Button {} {
        label Cancel
        callback {EditSeqwin->do_callback();}
        xywh {35 125 85 30} box PLASTIC_THIN_UP_BOX color 11 selection_color 3
      }
      Fl_Button {} {
        label Ok
        callback {Hazlo();
EditSeqwin->do_callback();}
        xywh {140 125 85 30} box PLASTIC_THIN_UP_BOX color 11 selection_color 3
      }
      Fl_Value_Input From {
        label {From:}
        xywh {65 20 35 25} color 44 selection_color 47 labelsize 11 labelcolor 7 minimum 1 maximum 128 step 1 value 1 textcolor 7
      }
      Fl_Value_Input To {
        label {To:}
        xywh {175 20 35 25} color 44 selection_color 47 labelsize 11 labelcolor 7 minimum 1 maximum 128 step 1 value 1 textcolor 7
      }
      Fl_Value_Input Destination {
        label {Destination:}
        xywh {115 70 35 25} color 44 selection_color 47 labelsize 11 labelcolor 7 minimum 1 maximum 128 step 1 value 1 textcolor 7
      }
    }
    code {switch (imenufunc)
    {
       case 1:
           EditSeqwin->copy_label("Copy");
           Destination->show();
           break;
    
       case 2:
           EditSeqwin->copy_label("Delete");
           Destination->hide();
           break;
           
       case 3:
           EditSeqwin->copy_label("Move");
           Destination->show();
           break;    
    
    
    
    }
    
    rmgmo->imenu=imenufunc;
    
    EditSeqwin->hide();
    EditSeqwin->position(30,30);
    
static const char *pepe [] ={"stygmorgan"};

int argc=1;
char **argv= (char **) pepe;

EditSeqwin->icon((char *)p);
    
EditSeqwin->show(argc,argv);} {}
  }
  Function {Hazlo()} {} {
    code {int i;
int k=0;
int desde=(int)From->value();
int hasta=(int)To->value();
int hacia=(int)Destination->value();
int cuantos=hasta-desde+1;



switch(rmgmo->imenu)
{
        case 1:
         
        for (i=desde;i<=hasta; i++)   
           { 
          
            S[hacia+k]=S[i];
            k++; 
           }
         
         
        break;
        
        
        case 2:
        
        for (i=desde;i<=hasta; i++)   
           { 
             
              memset( &S[i], 0, sizeof S[0]);
           }
           
        
        break;
        
        
        
        case 3:
        
        for(i=1;i<=128;i++) SongF.S[i]=S[i];
        
        
        for (i=desde;i<=hasta; i++) 
           {
          S[hacia+k]=SongF.S[i];
          k++; 
          if (i<hacia) memset( &S[i], 0, sizeof S[0]);
          if (i >(hacia+cuantos)) memset( &S[i], 0, sizeof S[0]);   
           }
        
        
        
 }
 
 GeneraScroll();} {}
  }
  Function {MetePats()} {} {
    code {int i;
char tmp[32];
BroPat->clear();
for (i=1; i<rmgmo->nStyle.numpat; i++)
{ 
bzero(tmp,sizeof(tmp));
sprintf(tmp,"%d - %s",i,rmgmo->nStyle.Pattern[i].Name);
BroPat->add(tmp);
}} {}
  }
  Function {labelwin()} {} {
    code {char temp[256];
sprintf(temp, "%s %s - sequencer - %s",PACKAGE,VERSION,SongF.title);
stygmseqwin->copy_label(temp);
Scr->scroll_to(0,0);} {}
  }
  Function {CheckForExport()} {return_type int
  } {
    code {int i=rmgmo->ChecaExporta();

if (i==0) return(0);

switch(i)
{
  case 2:
     fl_alert("Please select and 'end' point");  
     break;
  case 3:
      fl_alert("Please select a style for the first bar");
         
 }        
         
         
return(1);} {}
  }
  Function {UpdateBros()} {} {
    code {BroSty->value(S[rmgmo->cas].style);
BroPat->value(S[rmgmo->cas].pattern);} {}
  }
  Function {UpdateInputs(int lacas,int lanegra)} {} {
    code {Fl_Group *h = Scr->child(rmgmo->ultimalacas)->as_group();

h->child(rmgmo->ultimalanegra)->color(46);
h->child(rmgmo->ultimalanegra)->redraw();

Fl_Group *g = Scr->child(lacas-1)->as_group();

g->child(lanegra-1)->color(47);
g->child(lanegra-1)->redraw();

rmgmo->ultimalanegra=lanegra-1;
rmgmo->ultimalacas = lacas-1;} {}
  }
}
