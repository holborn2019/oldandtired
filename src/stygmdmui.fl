# data file for the Fltk User Interface Designer (fluid)
version 1.0304
i18n_type 1
i18n_include <libintl.h>
i18n_function gettext
header_name {.h}
code_name {.cxx}
decl {//Copyright(c) 2006 Josep Andreu (holborn)} {private local
}

decl {//License GNU/GPL version 2} {private local
}

decl {\#include <FL/x.H>} {public local
}

decl {\#include <Fl/Fl_Scroll.H>} {public local
}

decl {\#include <Fl/Fl_Box.H>} {public local
}

decl {\#include <FL/Fl_Value_Slider.H>} {public local
}

decl {\#include <Fl/Fl_Preferences.H>} {public local
}

decl {\#include "stygmorgan.h"} {public local
}

class DSlider {: {public Fl_Value_Slider}
} {
  Function {DSlider(int x,int y, int w, int h, const char *label=0):Fl_Value_Slider(x,y,w,h,label)} {open
  } {
    code {} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {int i=0;

if (event == FL_PUSH && Fl::visible_focus()) {
    Fl::focus(this);
    redraw();
} 



switch (event) 
	{
    	              		
    		 case FL_MOUSEWHEEL :
                      {
                      if (Fl::e_dy==0) return 0;
                      handle_push();
                      handle_drag(clamp(increment(value(),Fl::e_dy)));
                      handle_release();
                      return 1;	
                      }
         
                case FL_FOCUS :
                case FL_UNFOCUS :
                      if (Fl::visible_focus()) {
                      redraw();
                      return 1;
                      } else return 0;
        }


 i = Fl_Slider::handle(event);

return i;} {}
  }
}

class Drummixer {open
} {
  decl {RMGMO *rmgmo;} {private local
  }
  Function {Drummixer(RMGMO *rmgmo_)} {} {
    code {Fl::visual(FL_DOUBLE|FL_INDEX);
Fl::visual(FL_RGB);
rmgmo=rmgmo_;
make_window();
ReadPattern();
GeneraScroll();
labelwin();

int x,y,w,h;
static const char *pepe [] ={"stygmorgan"};
int argc=1;
char **argv= (char **) pepe;

Fl_Preferences stygmorgan (Fl_Preferences::USER, WEBSITE, PACKAGE);

stygmorgan.get("drummixerwinX",x,4);
stygmorgan.get("drummixerwinY",y,29);
stygmorgan.get("drummixerwinW",w,600);
stygmorgan.get("drummixerwinH",h,600);

drummixerwin->resize(x,y,w,h);
drummixerwin->icon((char *)p);
drummixerwin->show(argc,argv);




void * v=Caso;
Fl::add_timeout(.5,tick,v);} {}
  }
  Function {tick(void* v)} {return_type {static void}
  } {
    code {Fl_Box *o = (Fl_Box*)v;
o->do_callback();
Fl::repeat_timeout(.008,tick,v);} {}
  }
  Function {make_window()} {} {
    Fl_Window drummixerwin {
      callback {GuardaPrefs();
rmgmo->wdrummixer=0;
ResetSliders();
pera=2;
Fl::remove_timeout(tick);
drummixerwin->clear();
drummixerwin->hide();
delete drummixerwin;}
      xywh {1523 115 500 600} type Single color 44 hide
    } {
      Fl_Group {} {open
        xywh {0 0 500 73} box BORDER_BOX color 44 selection_color 47
      } {
        Fl_Box Caso {
          callback {if(rmgmo->bplay) MiraLucecitas();}
          xywh {130 13 240 26} box BORDER_BOX color 44 selection_color 47 labelfont 1 labelcolor 1 align 16
        }
        Fl_Box CasoV {
          xywh {130 43 241 26} box BORDER_BOX color 44 selection_color 47 labelfont 1 labelcolor 1
        }
        Fl_Button {} {
          label {Apply Changes}
          callback {PonCambiosPoce();
ResetSliders();}
          xywh {11 13 110 25} box PLASTIC_THIN_UP_BOX color 11 selection_color 3 labelsize 11
        }
        Fl_Button {} {
          label Cancel
          callback {rmgmo->bcancel=2;
drummixerwin->do_callback();}
          xywh {380 45 110 25} box PLASTIC_THIN_UP_BOX color 11 selection_color 3 labelsize 11
        }
        Fl_Button {} {
          label Ok
          callback {PonCambiosPoce();
rmgmo->bcancel=0;
drummixerwin->do_callback();}
          xywh {381 13 110 25} box PLASTIC_THIN_UP_BOX color 11 selection_color 3 labelsize 11
        }
        Fl_Button {} {
          label {Reset Sliders}
          callback {ResetSliders();}
          xywh {11 45 110 25} box PLASTIC_THIN_UP_BOX color 11 selection_color 3 labelsize 11
        }
      }
      Fl_Scroll Scr {
        xywh {0 76 500 524} type VERTICAL color 44 selection_color 47 labelcolor 7
      } {}
    }
    code {Caso->copy_label(rmgmo->nStyle.Name);
CasoV->copy_label(rmgmo->nStyle.Pattern[rmgmo->Variacion].Name);} {}
  }
  Function {labelwin()} {} {
    code {char temp[256];
sprintf(temp, "%s %s - Drum Note Mixer - %s %s",PACKAGE,VERSION,rmgmo->nStyle.Name,rmgmo->nStyle.Pattern[rmgmo->Variacion].Name);
drummixerwin->copy_label(temp);} {}
  }
  Function {GuardaPrefs()} {} {
    code {Fl_Preferences stygmorgan (Fl_Preferences::USER, WEBSITE, PACKAGE);

stygmorgan.set("drummixerwinX",drummixerwin->x());
stygmorgan.set("drummixerwinY",drummixerwin->y());
stygmorgan.set("drummixerwinW",drummixerwin->w());
stygmorgan.set("drummixerwinH",drummixerwin->h());} {}
  }
  Function {dm_call1(Fl_Value_Slider* o, void* v)} {return_type {static void}
  } {
    code {((Drummixer*)(o->parent()->parent()->parent()->user_data()))->dm_call1_i(o,v);} {}
  }
  Function {dm_call1_i(Fl_Value_Slider* o, void*)} {return_type void
  } {
    code {long long kd = (long long) o->user_data();
int nota= int(kd)-1800;
rmgmo->VelPorce[nota]=(int)o->value();} {}
  }
  Function {ReadPattern()} {open
  } {
    code {int i;
for (i=0;i<128;i++)
{
 rmgmo->losquehayqueponer[i]=0;
 rmgmo->VelPorce[i]= 0;
 rmgmo->NotaVel[i]=0;
}


for (i=0; i<rmgmo->nStyle.Pattern[rmgmo->Variacion].eventos;i++)
{
 if (rmgmo->pcp[rmgmo->PEG[rmgmo->Variacion][i].canal]==9)
  {   

   if ((rmgmo->PEG[rmgmo->Variacion][i].tipo ==2) && (rmgmo->PEG[rmgmo->Variacion][i].velocity >0))
    {
      rmgmo->losquehayqueponer[rmgmo->PEG[rmgmo->Variacion][i].nota] = 1;
      
    }
   } 
   }} {selected
    }
  }
  Function {GeneraScroll()} {} {
    code {int i,x,y;
char tmp[128];
Scr->clear();

i=0;
x=8;
y=76;
    
 for(i=0; i<128; i++)
 
{  
 
  if(rmgmo->losquehayqueponer[i]==1)
   { 
      
      Fl_Group* ob = new Fl_Group( x-4 , y, 498, 40);
            
      ob->box(FL_BORDER_BOX);
      ob->color(44);
      ob->labelsize(9);
      ob->labelcolor(88);
      ob->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
      ob->user_data((void *) i);
      ob->begin();
     
       Fl_Box* Caja = new Fl_Box(x+2, y+12, 14, 14);
       Caja->box(FL_GTK_ROUND_UP_BOX);
       Caja->color((Fl_Color)59);
       Caja->selection_color((Fl_Color)2);
       ob->add(Caja);

       bzero(tmp,sizeof tmp);
       sprintf(tmp,"%s",rmgmo->PD[rmgmo->CM[9].program].DNN[i].Nom);
       if (strlen(tmp) < 3) sprintf(tmp,"%s%d",rmgmo->NCE[i%12].Nom,(i/12)-1);    
        
    
       Fl_Box* Instru = new Fl_Box(x+22,y+4,170,30); 
       Instru->box(FL_BORDER_BOX); 
       Instru->color(44);  
       Instru->labelsize(13);
       Instru->labelcolor(FL_LIGHT2);
       Instru->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
       Instru->copy_label(tmp);
       ob->add(Instru) ;
 
       DSlider* ElSlider = new DSlider(x+198,y+4,272,30);
       ElSlider->type(5);
       ElSlider->box(FL_GTK_DOWN_BOX);
       ElSlider->color((Fl_Color)44);
       ElSlider->selection_color((Fl_Color)12);
       ElSlider->labeltype(FL_NORMAL_LABEL);
       ElSlider->labelfont(0);
       ElSlider->labelsize(14);
       ElSlider->labelcolor(FL_FOREGROUND_COLOR);
       ElSlider->minimum(-70);
       ElSlider->maximum(70);
       ElSlider->step(1);
       ElSlider->textsize(14);
       ElSlider->textcolor(FL_LIGHT2);
       ElSlider->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
       ElSlider->when(FL_WHEN_CHANGED);
       ElSlider->user_data((void*) (1800+i));
       ElSlider->callback((Fl_Callback *)dm_call1);
       
      ob->end(); 
      
      Scr->add(*ob);
      y=y+40;
      
 }
}

Scr->redraw();    
Fl::flush();} {}
  }
  Function {MiraLucecitas()} {} {
    code {for(int i=0;i<128;i++)
{
   if(rmgmo->losquehayqueponer[i])
     {
       if(rmgmo->NotaVel[i]!=0)PonLucecitas(BuscaLucecita(i)-1);
       if(rmgmo->NotaVel[i]==0)QuitaLucecitas(BuscaLucecita(i)-1);
     }               
}} {}
  }
  Function {BuscaLucecita(int luz)} {return_type int
  } {
    code {int Encontradas = 0;

for (int i=0;i<128;i++)
  {
     if(rmgmo->losquehayqueponer[i])
        {
          Encontradas++;
          if (i == luz) break;
        } 
   }
   
 return(Encontradas);} {}
  }
  Function {PonLucecitas(int luz)} {} {
    code {Fl_Group *h = Scr->child(luz)->as_group();
h->child(0)->color(2);
h->child(0)->redraw();} {}
  }
  Function {QuitaLucecitas(int luz)} {} {
    code {Fl_Group *h = Scr->child(luz)->as_group();
h->child(0)->color(59);
h->child(0)->redraw();} {}
  }
  Function {PonCambiosPoce()} {} {
    code {int i=0;
int velo=0;

for (i=0; i<rmgmo->nStyle.Pattern[rmgmo->Variacion].eventos;i++)
{
 
 if (rmgmo->pcp[rmgmo->PEG[rmgmo->Variacion][i].canal]==9)
  {   

   if ((rmgmo->PEG[rmgmo->Variacion][i].tipo ==2) || (rmgmo->PEG[rmgmo->Variacion][i].velocity >0))
    {
    
    velo= rmgmo->PEG[rmgmo->Variacion][i].velocity;
    velo += (rmgmo->PEG[rmgmo->Variacion][i].velocity * rmgmo->VelPorce[rmgmo->PEG[rmgmo->Variacion][i].nota] / 100);
    if(velo > 127) velo= 127;
    if(velo <=0) velo = 4;
    rmgmo->PEG[rmgmo->Variacion][i].velocity = velo;
      
    }
   } 
   }} {}
  }
  Function {ResetSliders()} {} {
    code {int i,k;
k=0;
for(i=0;i<128;i++)
 {
  rmgmo->VelPorce[i]=0;
 
   if(rmgmo->losquehayqueponer[i]==1)
     {
        Fl_Group *h = Scr->child(k)->as_group();
        Fl_Value_Slider *g = (Fl_Value_Slider *) h->child(2);
        g->value(0);
        g->redraw();
        k++;
      }  
  }} {}
  }
}
